Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-14_22-48


/**
 * Retrieves all versions of a dataset and returns them as a List for easier consumption.
 *
 * <p>This method fetches all pages of DatasetVersion items for the specified dataset name and collects them into a List.
 * This is useful for scenarios where the developer wants to work with all dataset versions in-memory, rather than dealing with paged iteration.</p>
 *
 * @param name The name of the dataset resource.
 * @return List of all DatasetVersion items for the given dataset name.
 * @throws IllegalArgumentException thrown if parameters fail the validation.
 * @throws HttpResponseException thrown if the request is rejected by server.
 * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
 * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
 * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
 * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
 */
public List<DatasetVersion> listAllDatasetVersions(String name) {
    /*
      Combined Methods: listDatasetVersions(String name) + iteration and collection to List
      Reason: Developers often want all results as a List for further processing, testing, or UI display, and should not have to manually iterate and collect paged results.
    */
    PagedIterable<DatasetVersion> paged = listDatasetVersions(name);
    List<DatasetVersion> allVersions = new ArrayList<>();
    for (DatasetVersion version : paged) {
        allVersions.add(version);
    }
    return allVersions;
}

/**
 * Retrieves the latest version of each dataset and returns them as a List for easier consumption.
 *
 * <p>This method fetches all pages of the latest DatasetVersion items and collects them into a List.
 * Useful for scenarios where developers want to work with all latest dataset versions in-memory, without manual paging.</p>
 *
 * @return List of latest DatasetVersion items.
 * @throws HttpResponseException thrown if the request is rejected by server.
 * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
 * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
 * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
 * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
 */
public List<DatasetVersion> listAllLatestDatasetVersions() {
    /*
      Combined Methods: listLatestDatasetVersions() + iteration and collection to List
      Reason: Developers frequently want to process all latest versions at once, and this wrapper eliminates the need for manual iteration and collection from paged responses.
    */
    PagedIterable<DatasetVersion> paged = listLatestDatasetVersions();
    List<DatasetVersion> allLatestVersions = new ArrayList<>();
    for (DatasetVersion version : paged) {
        allLatestVersions.add(version);
    }
    return allLatestVersions;
}/**
 * Retrieves a specific version of a DatasetVersion, returning the strongly-typed DatasetVersion object.
 * <p>
 * This method simplifies retrieval by automatically handling request options and deserialization.
 * </p>
 *
 * @param name The name of the dataset resource.
 * @param version The specific version id of the DatasetVersion to retrieve.
 * @return The specific version of the DatasetVersion.
 * @throws IllegalArgumentException if parameters fail validation.
 * @throws HttpResponseException if the request is rejected by the server.
 * @throws ClientAuthenticationException if authentication fails.
 * @throws ResourceNotFoundException if the resource is not found.
 * @throws ResourceModifiedException if the resource is modified concurrently.
 * @throws RuntimeException for all other failures.
 */
public DatasetVersion getDatasetVersion(String name, String version) {
    /*
      Combined Methods: getDatasetVersionWithResponse(String name, String version, RequestOptions requestOptions)
      Reason: Provides a streamlined, developer-friendly way to retrieve a DatasetVersion by name and version,
      automatically handling request options and deserialization. This eliminates the need for the user to manually
      construct RequestOptions or handle BinaryData conversion, which are common sources of boilerplate and confusion.
    */
    RequestOptions requestOptions = new RequestOptions();
    return getDatasetVersionWithResponse(name, version, requestOptions).getValue().toObject(DatasetVersion.class);
}

/**
 * Retrieves a specific version of a DatasetVersion, returning the full HTTP response including headers and status.
 * <p>
 * This method is intended for advanced scenarios where the developer needs access to HTTP metadata.
 * </p>
 *
 * @param name The name of the dataset resource.
 * @param version The specific version id of the DatasetVersion to retrieve.
 * @return The HTTP response containing the DatasetVersion as BinaryData.
 * @throws HttpResponseException if the request is rejected by the server.
 * @throws ClientAuthenticationException if authentication fails.
 * @throws ResourceNotFoundException if the resource is not found.
 * @throws ResourceModifiedException if the resource is modified concurrently.
 */
public Response<BinaryData> getDatasetVersionWithResponse(String name, String version) {
    /*
      Combined Methods: getDatasetVersionWithResponse(String name, String version, RequestOptions requestOptions)
      Reason: Provides a convenience overload that supplies default RequestOptions, reducing boilerplate for the
      common case where custom request options are not needed. This aligns with Azure SDK guidelines for simple
      overloads and improves usability for typical scenarios.
    */
    RequestOptions requestOptions = new RequestOptions();
    return getDatasetVersionWithResponse(name, version, requestOptions);
}/**
 * Starts a new pending upload of a dataset for a specific version, using only the required parameters.
 * <p>
 * This overload streamlines the process by requiring only the resource name, version, and the required pending upload type.
 * Optional fields such as pendingUploadId and connectionName are omitted for common scenarios.
 * </p>
 *
 * @param name The name of the resource.
 * @param version The specific version id of the DatasetVersion to operate on.
 * @param pendingUploadType The type of pending upload (e.g., "BlobReference").
 * @return The response for the pending upload request.
 */
public PendingUploadResponse startPendingUpload(String name, String version, String pendingUploadType) {
    /*
      Combined Methods: pendingUpload(String, String, PendingUploadRequest)
      Reason: Most common workflow only requires name, version, and pendingUploadType. This wrapper eliminates the need for the user to construct a PendingUploadRequest object for the simplest use case, reducing boilerplate and making the API more approachable for typical scenarios.
    */
    PendingUploadRequest request = new PendingUploadRequest()
        .setPendingUploadType(pendingUploadType);
    return pendingUpload(name, version, request);
}

/**
 * Starts or resumes a pending upload of a dataset for a specific version, optionally specifying an existing pendingUploadId and connectionName.
 * <p>
 * This overload streamlines the process by allowing the user to specify only the fields they care about, while handling the construction of the PendingUploadRequest.
 * </p>
 *
 * @param name The name of the resource.
 * @param version The specific version id of the DatasetVersion to operate on.
 * @param pendingUploadType The type of pending upload (e.g., "BlobReference").
 * @param pendingUploadId The optional existing pending upload ID (may be null).
 * @param connectionName The optional connection name (may be null).
 * @return The response for the pending upload request.
 */
public PendingUploadResponse startOrResumePendingUpload(
    String name,
    String version,
    String pendingUploadType,
    String pendingUploadId,
    String connectionName
) {
    /*
      Combined Methods: pendingUpload(String, String, PendingUploadRequest)
      Reason: This wrapper abstracts away the manual creation of PendingUploadRequest and its optional fields, letting developers focus on their intent (start or resume an upload) and reducing repetitive setup code.
    */
    PendingUploadRequest request = new PendingUploadRequest()
        .setPendingUploadType(pendingUploadType)
        .setPendingUploadId(pendingUploadId)
        .setConnectionName(connectionName);
    return pendingUpload(name, version, request);
}

/**
 * Starts a new pending upload of a dataset for a specific version and returns the full HTTP response, using only the required parameters.
 * <p>
 * This overload is intended for scenarios where the developer needs access to HTTP response metadata, but does not want to manually construct the request body.
 * </p>
 *
 * @param name The name of the resource.
 * @param version The specific version id of the DatasetVersion to operate on.
 * @param pendingUploadType The type of pending upload (e.g., "BlobReference").
 * @param requestOptions The options to configure the HTTP request before sending.
 * @return The HTTP response for the pending upload request.
 */
public Response<BinaryData> startPendingUploadWithResponse(
    String name,
    String version,
    String pendingUploadType,
    RequestOptions requestOptions
) {
    /*
      Combined Methods: pendingUploadWithResponse(String, String, BinaryData, RequestOptions)
      Reason: This wrapper provides a streamlined way to access the full HTTP response for the most common scenario, reducing the need for manual BinaryData and request object construction.
    */
    PendingUploadRequest request = new PendingUploadRequest()
        .setPendingUploadType(pendingUploadType);
    return pendingUploadWithResponse(name, version, BinaryData.fromObject(request), requestOptions);
}/**
 * Creates or updates a dataset version from a local file in a single call.
 * <p>
 * This method handles all steps required to upload a local file as a dataset version, including:
 * <ul>
 *   <li>Validating the file path</li>
 *   <li>Requesting a pending upload and obtaining upload credentials</li>
 *   <li>Uploading the file to the service</li>
 *   <li>Registering the dataset version with the uploaded file URI</li>
 * </ul>
 * <p>
 * This eliminates the need for the developer to manually coordinate multiple service calls and blob uploads.
 *
 * @param name The name of the dataset resource.
 * @param version The version identifier for the dataset.
 * @param filePath The path to the local file to upload.
 * @return The created or updated FileDatasetVersion.
 * @throws IllegalArgumentException If the provided path is not a file.
 */
public FileDatasetVersion uploadFileAsDatasetVersion(String name, String version, Path filePath) {
    /*
      Combined Methods: pendingUpload, BlobClient.upload, createOrUpdateDatasetVersionWithResponse
      Reason: This wrapper abstracts the multi-step, error-prone workflow of uploading a file and registering it as a dataset version,
      reducing developer boilerplate and potential for misuse. It represents the high-level intent of "upload this file as a dataset version".
    */
    if (!Files.isRegularFile(filePath)) {
        throw new IllegalArgumentException("The provided path is not a file: " + filePath);
    }
    PendingUploadRequest body = new PendingUploadRequest();
    PendingUploadResponse pendingUploadResponse = this.pendingUpload(name, version, body);
    SasCredential credential = pendingUploadResponse.getBlobReference().getCredential();
    String blobUri = pendingUploadResponse.getBlobReference().getBlobUri();
    BlobClient blobClient = new BlobClientBuilder().endpoint(credential.getSasUri()).blobName(name).buildClient();
    blobClient.upload(BinaryData.fromFile(filePath));
    RequestOptions requestOptions = new RequestOptions();
    FileDatasetVersion datasetVersion = this
        .createOrUpdateDatasetVersionWithResponse(name, version,
            BinaryData.fromObject(new FileDatasetVersion().setDataUri(blobClient.getBlobUrl())), requestOptions)
        .getValue()
        .toObject(FileDatasetVersion.class);
    return datasetVersion;
}

/**
 * Creates or updates a dataset version from a local folder in a single call.
 * <p>
 * This method handles all steps required to upload all files in a folder as a dataset version, including:
 * <ul>
 *   <li>Validating the folder path</li>
 *   <li>Requesting a pending upload and obtaining upload credentials</li>
 *   <li>Uploading all files in the folder (preserving relative paths)</li>
 *   <li>Registering the dataset version with the uploaded folder URI</li>
 * </ul>
 * <p>
 * This eliminates the need for the developer to manually coordinate multiple service calls and blob uploads.
 *
 * @param name The name of the dataset resource.
 * @param version The version identifier for the dataset.
 * @param folderPath The path to the local folder to upload.
 * @return The created or updated FolderDatasetVersion.
 * @throws IllegalArgumentException If the provided path is not a directory.
 * @throws IOException If an I/O error occurs during file access.
 */
public FolderDatasetVersion uploadFolderAsDatasetVersion(String name, String version, Path folderPath) throws IOException {
    /*
      Combined Methods: pendingUpload, BlobClient.upload (for each file), createOrUpdateDatasetVersionWithResponse
      Reason: This wrapper abstracts the multi-step workflow of uploading a folder and registering it as a dataset version,
      reducing developer boilerplate and potential for error. It represents the high-level intent of "upload this folder as a dataset version".
    */
    if (!Files.isDirectory(folderPath)) {
        throw new IllegalArgumentException("The provided path is not a folder: " + folderPath);
    }
    PendingUploadRequest request = new PendingUploadRequest();
    PendingUploadResponse pendingUploadResponse = this.pendingUpload(name, version, request);
    String blobContainerUri = pendingUploadResponse.getBlobReference().getBlobUri();
    SasCredential credential = pendingUploadResponse.getBlobReference().getCredential();
    String containerUrl = blobContainerUri.substring(0, blobContainerUri.lastIndexOf('/'));
    Files.walk(folderPath).filter(Files::isRegularFile).forEach(filePath -> {
        String relativePath = folderPath.relativize(filePath).toString().replace('\\', '/');
        BlobClient blobClient = new BlobClientBuilder().endpoint(credential.getSasUri()).blobName(relativePath).buildClient();
        blobClient.upload(BinaryData.fromFile(filePath), true);
    });
    RequestOptions requestOptions = new RequestOptions();
    FolderDatasetVersion datasetVersion = this
        .createOrUpdateDatasetVersionWithResponse(name, version,
            BinaryData.fromObject(new FolderDatasetVersion().setDataUri(containerUrl)), requestOptions)
        .getValue()
        .toObject(FolderDatasetVersion.class);
    return datasetVersion;
}/**
 * Deletes a specific version of a dataset, handling common error scenarios and providing a clear, intent-based API.
 *
 * <p>This method abstracts away the need to manually construct {@link RequestOptions} and directly calls the lower-level
 * deleteDatasetVersionWithResponse method, surfacing only the most relevant parameters for typical delete operations.</p>
 *
 * @param name The name of the dataset resource.
 * @param version The version of the DatasetVersion to delete.
 * @throws IllegalArgumentException if parameters fail validation.
 * @throws HttpResponseException if the request is rejected by the server.
 * @throws ClientAuthenticationException if authentication fails.
 * @throws ResourceNotFoundException if the specified dataset version does not exist.
 * @throws ResourceModifiedException if the dataset version cannot be deleted due to a conflict.
 * @throws RuntimeException for all other wrapped checked exceptions if the request fails to be sent.
 */
public void deleteDatasetVersionIfExists(String name, String version) {
    /*
      Combined Methods: deleteDatasetVersion and deleteDatasetVersionWithResponse
      Reason: This wrapper provides a clear, intent-driven API for deleting a dataset version, 
      eliminating the need for developers to manually construct RequestOptions or handle response objects 
      when they simply want to delete a version. It also clarifies that the operation is safe to call 
      even if the version may not exist, aligning with common developer expectations for delete operations.
    */
    try {
        deleteDatasetVersion(name, version);
    } catch (ResourceNotFoundException ex) {
        // No-op: Deleting a non-existent resource is considered successful in most developer workflows.
    }
}/**
 * Creates or updates a DatasetVersion with the given name and version, using only the required fields.
 * <p>
 * This overload provides a streamlined way to create or update a DatasetVersion when only the essential fields are needed.
 * Optional fields (description, tags, etc.) are omitted for simplicity. For advanced scenarios, use the full method.
 * </p>
 */
public DatasetVersion upsertDatasetVersion(String name, String version, String type, String dataUri) {
    /*
      Combined Methods: createOrUpdateDatasetVersion(String name, String version, DatasetVersion datasetVersion)
      Reason: Developers commonly want to create or update a DatasetVersion with just the required fields (type, dataUri, name, version).
      This wrapper eliminates the need to manually construct a DatasetVersion object for the most basic scenario,
      reducing boilerplate and aligning with the options pattern for simple creation.
    */
    DatasetVersion datasetVersion = new DatasetVersion()
        .setName(name)
        .setVersion(version)
        .setType(type)
        .setDataUri(dataUri);
    return createOrUpdateDatasetVersion(name, version, datasetVersion);
}

/**
 * Creates or updates a DatasetVersion with common optional fields.
 * <p>
 * This overload allows creation or update of a DatasetVersion with required fields and commonly-used optional fields
 * (description and tags), minimizing the need for verbose model construction in typical scenarios.
 * </p>
 */
public DatasetVersion upsertDatasetVersion(
    String name,
    String version,
    String type,
    String dataUri,
    String description,
    Map<String, String> tags
) {
    /*
      Combined Methods: createOrUpdateDatasetVersion(String name, String version, DatasetVersion datasetVersion)
      Reason: This wrapper targets the common workflow where developers want to specify description and tags
      in addition to the required fields, without manually building the DatasetVersion model.
      It streamlines the process and reduces repetitive code.
    */
    DatasetVersion datasetVersion = new DatasetVersion()
        .setName(name)
        .setVersion(version)
        .setType(type)
        .setDataUri(dataUri)
        .setDescription(description)
        .setTags(tags);
    return createOrUpdateDatasetVersion(name, version, datasetVersion);
}

/**
 * Creates or updates a DatasetVersion with all available fields, providing sensible defaults for optional parameters.
 * <p>
 * This overload is intended for scenarios where developers want to specify all possible fields, but don't want to manually
 * construct the DatasetVersion object. Optional parameters can be passed as null if not needed.
 * </p>
 */
public DatasetVersion upsertDatasetVersion(
    String name,
    String version,
    String type,
    String dataUri,
    Boolean isReference,
    String connectionName,
    String id,
    String description,
    Map<String, String> tags
) {
    /*
      Combined Methods: createOrUpdateDatasetVersion(String name, String version, DatasetVersion datasetVersion)
      Reason: This wrapper provides a comprehensive yet convenient way to create or update a DatasetVersion,
      allowing developers to specify all fields in a single call, reducing manual model construction and boilerplate.
    */
    DatasetVersion datasetVersion = new DatasetVersion()
        .setName(name)
        .setVersion(version)
        .setType(type)
        .setDataUri(dataUri)
        .setIsReference(isReference)
        .setConnectionName(connectionName)
        .setId(id)
        .setDescription(description)
        .setTags(tags);
    return createOrUpdateDatasetVersion(name, version, datasetVersion);
}/**
 * Retrieves the SAS credential (including SAS URI and storage account details) for a specific dataset version,
 * returning the strongly-typed result directly for ease of use.
 *
 * <p>This method streamlines access to the storage credentials for a dataset version, hiding the need to manually
 * construct request options or deserialize the response.</p>
 *
 * @param name The name of the dataset resource.
 * @param version The version identifier of the dataset.
 * @return The credential result containing SAS URI and related storage details.
 */
public AssetCredentialResult getDatasetStorageCredentials(String name, String version) {
    /*
      Combined Methods: getCredentialsWithResponse(String, String, RequestOptions)
      Reason: This wrapper provides a clear, intent-driven method for retrieving dataset storage credentials.
              It eliminates the need for the developer to manually create RequestOptions or deserialize the BinaryData,
              aligning with the guideline to return logical entities for common workflows.
              This method is especially useful for the most common scenario—simply retrieving the credentials.
    */
    RequestOptions requestOptions = new RequestOptions();
    return getCredentialsWithResponse(name, version, requestOptions).getValue()
        .toObject(AssetCredentialResult.class);
}

/**
 * Retrieves the SAS URI string for the blob associated with a specific dataset version.
 *
 * <p>This method abstracts away the details of parsing the full credential result, returning just the SAS URI
 * for direct use in storage operations.</p>
 *
 * @param name The name of the dataset resource.
 * @param version The version identifier of the dataset.
 * @return The SAS URI string for the dataset version's blob.
 */
public String getDatasetBlobSasUri(String name, String version) {
    /*
      Combined Methods: getCredentialsWithResponse(String, String, RequestOptions)
      Reason: This wrapper targets the common use case where a developer needs only the SAS URI for direct storage access,
              not the full credential structure. It parses and returns the SAS URI directly, reducing boilerplate and
              improving clarity for this frequent workflow.
    */
    RequestOptions requestOptions = new RequestOptions();
    AssetCredentialResult result = getCredentialsWithResponse(name, version, requestOptions).getValue()
        .toObject(AssetCredentialResult.class);
    return result.getBlobReference().getCredential().getSasUri();
}

/**
 * Retrieves the SAS credential for a dataset version, allowing the caller to specify custom request options.
 *
 * <p>This overload provides a strongly-typed result while still supporting advanced scenarios where custom
 * request options are needed.</p>
 *
 * @param name The name of the dataset resource.
 * @param version The version identifier of the dataset.
 * @param requestOptions Custom options for the HTTP request.
 * @return The credential result containing SAS URI and related storage details.
 */
public AssetCredentialResult getDatasetStorageCredentials(String name, String version, RequestOptions requestOptions) {
    /*
      Combined Methods: getCredentialsWithResponse(String, String, RequestOptions)
      Reason: This wrapper provides a strongly-typed result (AssetCredentialResult) even when custom RequestOptions are needed,
              reducing the need for developers to manually deserialize BinaryData in advanced scenarios.
    */
    return getCredentialsWithResponse(name, version, requestOptions).getValue()
        .toObject(AssetCredentialResult.class);
}