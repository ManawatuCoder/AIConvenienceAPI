Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-07_13-23


/**
 * Combined Methods: create, createWithResponse, createIfNotExists, createIfNotExistsWithResponse
 * Reason: These methods all create a container, with various combinations of metadata, access type, and existence checks. Wrapping them into a single method using the options pattern simplifies the API and provides a single entry point for all create scenarios, improving discoverability and reducing overload proliferation.
 * 
 * Comment: Creates a new container if it does not exist, using the provided options. Returns true if the container was created, false if it already existed.
 */
public boolean createContainer(BlobContainerCreateOptions options, Duration timeout, Context context) {
    Response<Boolean> response = createIfNotExistsWithResponse(options, timeout, context);
    return response.getValue();
}

/**
 * Combined Methods: delete, deleteWithResponse, deleteIfExists, deleteIfExistsWithResponse
 * Reason: These methods all delete a container, optionally checking for existence and accepting request conditions. Wrapping them into a single method using the options pattern provides a unified and convenient way to delete a container, with or without existence checks and conditions.
 * 
 * Comment: Deletes the container if it exists, using the provided request conditions. Returns true if the container was deleted, false if it did not exist.
 */
public boolean deleteContainer(BlobRequestConditions requestConditions, Duration timeout, Context context) {
    Response<Boolean> response = deleteIfExistsWithResponse(requestConditions, timeout, context);
    return response.getValue();
}

/**
 * Combined Methods: setMetadata, setMetadataWithResponse
 * Reason: Both methods set container metadata, with one being a convenience overload. Wrapping them provides a single method that allows setting metadata with or without additional options, following the options pattern for extensibility.
 * 
 * Comment: Sets the container's metadata using the provided metadata map and request conditions.
 */
public void setContainerMetadata(Map<String, String> metadata, BlobRequestConditions requestConditions, Duration timeout, Context context) {
    setMetadataWithResponse(metadata, requestConditions, timeout, context);
}

/**
 * Combined Methods: setAccessPolicy, setAccessPolicyWithResponse
 * Reason: Both methods set the container's access policy, with one being a convenience overload. Wrapping them provides a single method that allows setting access policy with or without additional options, following the options pattern for extensibility.
 * 
 * Comment: Sets the container's access policy using the provided access type, identifiers, and request conditions.
 */
public void setContainerAccessPolicy(PublicAccessType accessType, List<BlobSignedIdentifier> identifiers, BlobRequestConditions requestConditions, Duration timeout, Context context) {
    setAccessPolicyWithResponse(accessType, identifiers, requestConditions, timeout, context);
}

/**
 * Combined Methods: getProperties, getPropertiesWithResponse
 * Reason: Both methods retrieve container properties, with one being a convenience overload. Wrapping them provides a single method that allows retrieving properties with or without additional options, following the options pattern for extensibility.
 * 
 * Comment: Gets the container's properties using the provided lease ID, timeout, and context.
 */
public BlobContainerProperties getContainerProperties(String leaseId, Duration timeout, Context context) {
    return getPropertiesWithResponse(leaseId, timeout, context).getValue();
}

/**
 * Combined Methods: getAccessPolicy, getAccessPolicyWithResponse
 * Reason: Both methods retrieve the container's access policy, with one being a convenience overload. Wrapping them provides a single method that allows retrieving access policy with or without additional options, following the options pattern for extensibility.
 * 
 * Comment: Gets the container's access policy using the provided lease ID, timeout, and context.
 */
public BlobContainerAccessPolicies getContainerAccessPolicy(String leaseId, Duration timeout, Context context) {
    return getAccessPolicyWithResponse(leaseId, timeout, context).getValue();
}

/**
 * Combined Methods: exists, existsWithResponse
 * Reason: Both methods check for the existence of the container, with one being a convenience overload. Wrapping them provides a single method that allows checking existence with or without additional options, following the options pattern for extensibility.
 * 
 * Comment: Checks if the container exists using the provided timeout and context.
 */
public boolean containerExists(Duration timeout, Context context) {
    return existsWithResponse(timeout, context).getValue();
}