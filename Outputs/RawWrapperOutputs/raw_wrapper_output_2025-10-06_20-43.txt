Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-06_20-43


/**
 * Combined Methods: setLegalHold, setLegalHoldWithResponse
 * Reason: These methods perform the same operation (setting legal hold tags) but differ only in whether they return a Response wrapper and accept a RequestContext. Wrapping them provides a single entry point for setting legal hold tags, with or without a context, improving convenience and discoverability.
 * 
 * Comment: Sets legal hold tags on a blob container. If a RequestContext is provided, returns a Response<LegalHold>; otherwise, returns the LegalHold directly.
 */
public Object setLegalHoldCombined(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, LegalHold legalHold, RequestContext requestContext) {
    if (requestContext == null) {
        return this.setLegalHold(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold);
    } else {
        return this.setLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold, requestContext);
    }
}

/**
 * Combined Methods: clearLegalHold, clearLegalHoldWithResponse
 * Reason: These methods both clear legal hold tags, differing only in whether they return a Response wrapper and accept a RequestContext. Wrapping them provides a single, convenient method for clearing legal hold tags, with or without a context.
 * 
 * Comment: Clears legal hold tags on a blob container. If a RequestContext is provided, returns a Response<LegalHold>; otherwise, returns the LegalHold directly.
 */
public Object clearLegalHoldCombined(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, LegalHold legalHold, RequestContext requestContext) {
    if (requestContext == null) {
        return this.clearLegalHold(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold);
    } else {
        return this.clearLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold, requestContext);
    }
}

/**
 * Combined Methods: create, createWithResponse
 * Reason: Both methods create a new container, differing only in whether they return a Response wrapper and accept a RequestContext. Wrapping them provides a single method for container creation, with or without a context, improving usability.
 * 
 * Comment: Creates a new container under the specified account. If a RequestContext is provided, returns a Response<BlobContainer>; otherwise, returns the BlobContainer directly.
 */
public Object createContainerCombined(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, BlobContainer blobContainer, RequestContext requestContext) {
    if (requestContext == null) {
        return this.create(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer);
    } else {
        return this.createWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer, requestContext);
    }
}

/**
 * Combined Methods: update, updateWithResponse
 * Reason: Both methods update container properties, differing only in whether they return a Response wrapper and accept a RequestContext. Wrapping them provides a single method for updating container properties, with or without a context, for developer convenience.
 * 
 * Comment: Updates container properties as specified in the request body. If a RequestContext is provided, returns a Response<BlobContainer>; otherwise, returns the BlobContainer directly.
 */
public Object updateContainerCombined(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, BlobContainer blobContainer, RequestContext requestContext) {
    if (requestContext == null) {
        return this.update(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer);
    } else {
        return this.updateWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer, requestContext);
    }
}

/**
 * Combined Methods: get, getWithResponse
 * Reason: Both methods retrieve properties of a specified container, differing only in whether they return a Response wrapper and accept a RequestContext. Wrapping them provides a single, convenient method for getting container properties, with or without a context.
 * 
 * Comment: Gets properties of a specified container. If a RequestContext is provided, returns a Response<BlobContainer>; otherwise, returns the BlobContainer directly.
 */
public Object getContainerCombined(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, RequestContext requestContext) {
    if (requestContext == null) {
        return this.get(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
    } else {
        return this.getWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, requestContext);
    }
}

/**
 * Combined Methods: delete, deleteWithResponse
 * Reason: Both methods delete a specified container, differing only in whether they return a Response wrapper and accept a RequestContext. Wrapping them provides a single, convenient method for deleting a container, with or without a context.
 * 
 * Comment: Deletes the specified container under its account. If a RequestContext is provided, returns a Response<Void>; otherwise, returns void.
 */
public Object deleteContainerCombined(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, RequestContext requestContext) {
    if (requestContext == null) {
        this.delete(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
        return null;
    } else {
        return this.deleteWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, requestContext);
    }
}

/**
 * Combined Methods: deleteImmutabilityPolicy, deleteImmutabilityPolicyWithResponse
 * Reason: Both methods abort an unlocked immutability policy, differing only in whether they return a Response wrapper and accept a RequestContext. Wrapping them provides a single, convenient method for deleting the immutability policy, with or without a context.
 * 
 * Comment: Aborts an unlocked immutability policy. If a RequestContext is provided, returns a Response<ImmutabilityPolicy>; otherwise, returns the ImmutabilityPolicy directly.
 */
public Object deleteImmutabilityPolicyCombined(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, String ifMatch, RequestContext requestContext) {
    if (requestContext == null) {
        return this.deleteImmutabilityPolicy(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, ifMatch);
    } else {
        return this.deleteImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, ifMatch, requestContext);
    }
}