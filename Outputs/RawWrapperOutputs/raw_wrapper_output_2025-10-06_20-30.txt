Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-06_20-30


/**
 * Combined Methods: setLegalHold, setLegalHoldWithResponse
 * Reason: Both methods set legal hold tags on a container, differing only by whether a Response wrapper and RequestContext are used. Wrapping them provides a single entry point for setting legal hold tags, with or without a context, improving discoverability and reducing overload confusion.
 *
 * Comment: Sets legal hold tags on a container, optionally accepting a RequestContext and returning a Response if desired.
 */
public Response<LegalHold> setLegalHoldCombined(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, LegalHold legalHold, RequestContext requestContext, boolean returnResponse) {
    if (returnResponse) {
        return this.serviceClient.setLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, legalHold, requestContext);
    } else {
        LegalHold result = this.serviceClient.setLegalHold(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, legalHold);
        return new SimpleResponse<>(null, 200, null, result);
    }
}

/**
 * Combined Methods: clearLegalHold, clearLegalHoldWithResponse
 * Reason: Both methods clear legal hold tags on a container, differing only by whether a Response wrapper and RequestContext are used. Wrapping them provides a single entry point for clearing legal hold tags, with or without a context, improving developer experience and reducing overload confusion.
 *
 * Comment: Clears legal hold tags on a container, optionally accepting a RequestContext and returning a Response if desired.
 */
public Response<LegalHold> clearLegalHoldCombined(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, LegalHold legalHold, RequestContext requestContext, boolean returnResponse) {
    if (returnResponse) {
        return this.serviceClient.clearLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, legalHold, requestContext);
    } else {
        LegalHold result = this.serviceClient.clearLegalHold(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, legalHold);
        return new SimpleResponse<>(null, 200, null, result);
    }
}

/**
 * Combined Methods: create, createWithResponse
 * Reason: Both methods create a new container, differing only by whether a Response wrapper and RequestContext are used. Wrapping them provides a unified way to create a container, with or without a context, reducing overload confusion and improving usability.
 *
 * Comment: Creates a new container, optionally accepting a RequestContext and returning a Response if desired.
 */
public Response<BlobContainer> createContainerCombined(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, BlobContainer blobContainer, RequestContext requestContext, boolean returnResponse) {
    if (returnResponse) {
        return this.serviceClient.createWithResponse(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, blobContainer, requestContext);
    } else {
        BlobContainer result = this.serviceClient.create(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, blobContainer);
        return new SimpleResponse<>(null, 200, null, result);
    }
}

/**
 * Combined Methods: update, updateWithResponse
 * Reason: Both methods update a container, differing only by whether a Response wrapper and RequestContext are used. Wrapping them provides a single entry point for updating a container, with or without a context, improving developer experience.
 *
 * Comment: Updates a container, optionally accepting a RequestContext and returning a Response if desired.
 */
public Response<BlobContainer> updateContainerCombined(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, BlobContainer blobContainer, RequestContext requestContext, boolean returnResponse) {
    if (returnResponse) {
        return this.serviceClient.updateWithResponse(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, blobContainer, requestContext);
    } else {
        BlobContainer result = this.serviceClient.update(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, blobContainer);
        return new SimpleResponse<>(null, 200, null, result);
    }
}

/**
 * Combined Methods: get, getWithResponse
 * Reason: Both methods get properties of a specified container, differing only by whether a Response wrapper and RequestContext are used. Wrapping them provides a unified way to get container properties, with or without a context, improving discoverability.
 *
 * Comment: Gets properties of a specified container, optionally accepting a RequestContext and returning a Response if desired.
 */
public Response<BlobContainer> getContainerCombined(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, RequestContext requestContext, boolean returnResponse) {
    if (returnResponse) {
        return this.serviceClient.getWithResponse(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, requestContext);
    } else {
        BlobContainer result = this.serviceClient.get(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion);
        return new SimpleResponse<>(null, 200, null, result);
    }
}

/**
 * Combined Methods: delete, deleteWithResponse
 * Reason: Both methods delete a container, differing only by whether a Response wrapper and RequestContext are used. Wrapping them provides a single entry point for deleting a container, with or without a context, improving developer experience.
 *
 * Comment: Deletes a specified container, optionally accepting a RequestContext and returning a Response if desired.
 */
public Response<Void> deleteContainerCombined(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, RequestContext requestContext, boolean returnResponse) {
    if (returnResponse) {
        return this.serviceClient.deleteWithResponse(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, requestContext);
    } else {
        this.serviceClient.delete(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
        return new SimpleResponse<>(null, 200, null, null);
    }
}

/**
 * Combined Methods: list, listWithResponse
 * Reason: Both methods list containers, differing only by whether a Response wrapper, RequestContext, and additional options are used. Wrapping them provides a unified way to list containers, with or without advanced options, improving usability and discoverability.
 *
 * Comment: Lists all containers, optionally accepting advanced options and a RequestContext, and returning a Response if desired.
 */
public Response<ListContainerItems> listContainersCombined(String subscriptionId, String resourceGroupName, String accountName,
    String apiVersion, String maxpagesize, String filter, ListContainersInclude include, RequestContext requestContext, boolean returnResponse) {
    if (returnResponse) {
        return this.serviceClient.listWithResponse(subscriptionId, resourceGroupName, accountName, apiVersion,
            maxpagesize, filter, include, requestContext);
    } else {
        ListContainerItems result = this.serviceClient.list(subscriptionId, resourceGroupName, accountName, apiVersion);
        return new SimpleResponse<>(null, 200, null, result);
    }
}

/**
 * Combined Methods: deleteImmutabilityPolicy, deleteImmutabilityPolicyWithResponse
 * Reason: Both methods delete an immutability policy, differing only by whether a Response wrapper and RequestContext are used. Wrapping them provides a single entry point for deleting an immutability policy, with or without a context, improving developer experience.
 *
 * Comment: Deletes an immutability policy, optionally accepting a RequestContext and returning a Response if desired.
 */
public Response<ImmutabilityPolicy> deleteImmutabilityPolicyCombined(String subscriptionId, String resourceGroupName,
    String accountName, String containerName, String apiVersion, String ifMatch, RequestContext requestContext, boolean returnResponse) {
    if (returnResponse) {
        return this.serviceClient.deleteImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName, accountName,
            containerName, apiVersion, ifMatch, requestContext);
    } else {
        ImmutabilityPolicy result = this.serviceClient.deleteImmutabilityPolicy(subscriptionId, resourceGroupName, accountName,
            containerName, apiVersion, ifMatch);
        return new SimpleResponse<>(null, 200, null, result);
    }
}

/**
 * Combined Methods: getImmutabilityPolicy, getImmutabilityPolicyWithResponse
 * Reason: Both methods get an immutability policy, differing only by whether a Response wrapper and RequestContext are used. Wrapping them provides a unified way to get an immutability policy, with or without a context, improving discoverability.
 *
 * Comment: Gets the immutability policy of a container, optionally accepting a RequestContext and returning a Response if desired.
 */
public Response<ImmutabilityPolicy> getImmutabilityPolicyCombined(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, String ifMatch, RequestContext requestContext, boolean returnResponse) {
    if (returnResponse) {
        return this.serviceClient.getImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName, accountName,
            containerName, apiVersion, ifMatch, requestContext);
    } else {
        ImmutabilityPolicy result = this.serviceClient.getImmutabilityPolicy(subscriptionId, resourceGroupName, accountName,
            containerName, apiVersion);
        return new SimpleResponse<>(null, 200, null, result);
    }
}

/**
 * Combined Methods: lockImmutabilityPolicy, lockImmutabilityPolicyWithResponse
 * Reason: Both methods lock an immutability policy, differing only by whether a Response wrapper and RequestContext are used. Wrapping them provides a single entry point for locking an immutability policy, with or without a context, improving developer experience.
 *
 * Comment: Locks the immutability policy of a container, optionally accepting a RequestContext and returning a Response if desired.
 */
public Response<ImmutabilityPolicy> lockImmutabilityPolicyCombined(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, String ifMatch, RequestContext requestContext, boolean returnResponse) {
    if (returnResponse) {
        return this.serviceClient.lockImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName, accountName,
            containerName, apiVersion, ifMatch, requestContext);
    } else {
        ImmutabilityPolicy result = this.serviceClient.lockImmutabilityPolicy(subscriptionId, resourceGroupName, accountName,
            containerName, apiVersion, ifMatch);
        return new SimpleResponse<>(null, 200, null, result);
    }
}