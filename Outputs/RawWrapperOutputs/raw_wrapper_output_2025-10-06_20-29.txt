Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-06_20-29


/**
 * Combined Methods: setLegalHold, setLegalHoldWithResponse
 * Reason: Both methods set legal hold tags, with one returning a simple result and the other returning a Response with additional metadata. Wrapping them provides a single entry point that allows the developer to choose whether to receive the full Response or just the result, improving convenience and discoverability.
 * 
 * Comment: Sets legal hold tags on a blob container, optionally returning the full HTTP response.
 */
public LegalHold setLegalHold(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    LegalHold legalHold,
    RequestContext requestContext,
    boolean withResponse
) {
    if (withResponse) {
        return this.serviceClient.setLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold, requestContext).getValue();
    } else {
        return this.serviceClient.setLegalHold(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold);
    }
}

/**
 * Combined Methods: clearLegalHold, clearLegalHoldWithResponse
 * Reason: Both methods clear legal hold tags, with one returning a simple result and the other returning a Response with additional metadata. Wrapping them provides a single entry point that allows the developer to choose whether to receive the full Response or just the result, improving convenience and discoverability.
 * 
 * Comment: Clears legal hold tags on a blob container, optionally returning the full HTTP response.
 */
public LegalHold clearLegalHold(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    LegalHold legalHold,
    RequestContext requestContext,
    boolean withResponse
) {
    if (withResponse) {
        return this.serviceClient.clearLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold, requestContext).getValue();
    } else {
        return this.serviceClient.clearLegalHold(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold);
    }
}

/**
 * Combined Methods: create, createWithResponse
 * Reason: Both methods create a new container, with one returning a simple result and the other returning a Response with additional metadata. Wrapping them provides a single entry point that allows the developer to choose whether to receive the full Response or just the result, improving convenience and discoverability.
 * 
 * Comment: Creates a new blob container, optionally returning the full HTTP response.
 */
public BlobContainer createContainer(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    BlobContainer blobContainer,
    RequestContext requestContext,
    boolean withResponse
) {
    if (withResponse) {
        return this.serviceClient.createWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer, requestContext).getValue();
    } else {
        return this.serviceClient.create(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer);
    }
}

/**
 * Combined Methods: update, updateWithResponse
 * Reason: Both methods update container properties, with one returning a simple result and the other returning a Response with additional metadata. Wrapping them provides a single entry point that allows the developer to choose whether to receive the full Response or just the result, improving convenience and discoverability.
 * 
 * Comment: Updates properties of a blob container, optionally returning the full HTTP response.
 */
public BlobContainer updateContainer(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    BlobContainer blobContainer,
    RequestContext requestContext,
    boolean withResponse
) {
    if (withResponse) {
        return this.serviceClient.updateWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer, requestContext).getValue();
    } else {
        return this.serviceClient.update(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer);
    }
}

/**
 * Combined Methods: get, getWithResponse
 * Reason: Both methods get properties of a container, with one returning a simple result and the other returning a Response with additional metadata. Wrapping them provides a single entry point that allows the developer to choose whether to receive the full Response or just the result, improving convenience and discoverability.
 * 
 * Comment: Gets properties of a blob container, optionally returning the full HTTP response.
 */
public BlobContainer getContainer(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    RequestContext requestContext,
    boolean withResponse
) {
    if (withResponse) {
        return this.serviceClient.getWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, requestContext).getValue();
    } else {
        return this.serviceClient.get(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
    }
}

/**
 * Combined Methods: delete, deleteWithResponse
 * Reason: Both methods delete a container, with one returning void and the other returning a Response with additional metadata. Wrapping them provides a single entry point that allows the developer to choose whether to receive the full Response or just perform the operation, improving convenience and discoverability.
 * 
 * Comment: Deletes a blob container, optionally returning the full HTTP response.
 */
public void deleteContainer(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    RequestContext requestContext,
    boolean withResponse
) {
    if (withResponse) {
        this.serviceClient.deleteWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, requestContext);
    } else {
        this.serviceClient.delete(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
    }
}