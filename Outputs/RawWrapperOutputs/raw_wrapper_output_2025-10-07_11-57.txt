Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-07_11-57


/**
 * Combined Methods: create, createWithResponse
 * Reason: Both methods create a new container, with one returning a simple result and the other returning a Response wrapper. Providing a single wrapper method that allows the developer to choose whether to get the raw result or the full response improves convenience and reduces overload confusion.
 * 
 * Comment: Creates a new container under the specified account, optionally returning the full HTTP response.
 */
public Response<BlobContainer> createContainer(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, BlobContainer blobContainer, RequestContext requestContext, boolean withResponse) {
    if (withResponse) {
        return this.serviceClient.createWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer, requestContext);
    } else {
        BlobContainer result = this.serviceClient.create(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer);
        return new SimpleResponse<>(null, 200, null, result);
    }
}

/**
 * Combined Methods: update, updateWithResponse
 * Reason: Both methods update a container, with one returning a simple result and the other returning a Response wrapper. Providing a single wrapper method that allows the developer to choose whether to get the raw result or the full response improves convenience and reduces overload confusion.
 * 
 * Comment: Updates container properties as specified in the request body, optionally returning the full HTTP response.
 */
public Response<BlobContainer> updateContainer(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, BlobContainer blobContainer, RequestContext requestContext, boolean withResponse) {
    if (withResponse) {
        return this.serviceClient.updateWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer, requestContext);
    } else {
        BlobContainer result = this.serviceClient.update(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer);
        return new SimpleResponse<>(null, 200, null, result);
    }
}

/**
 * Combined Methods: delete, deleteWithResponse
 * Reason: Both methods delete a container, with one returning void and the other returning a Response wrapper. Providing a single wrapper method that allows the developer to choose whether to get the raw result or the full response improves convenience and reduces overload confusion.
 * 
 * Comment: Deletes the specified container under its account, optionally returning the full HTTP response.
 */
public Response<Void> deleteContainer(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, RequestContext requestContext, boolean withResponse) {
    if (withResponse) {
        return this.serviceClient.deleteWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, requestContext);
    } else {
        this.serviceClient.delete(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
        return new SimpleResponse<>(null, 204, null, null);
    }
}

/**
 * Combined Methods: clearLegalHold, clearLegalHoldWithResponse
 * Reason: Both methods clear legal hold tags, with one returning a simple result and the other returning a Response wrapper. Providing a single wrapper method that allows the developer to choose whether to get the raw result or the full response improves convenience and reduces overload confusion.
 * 
 * Comment: Clears legal hold tags on the specified container, optionally returning the full HTTP response.
 */
public Response<LegalHold> clearLegalHoldOnContainer(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, LegalHold legalHold, RequestContext requestContext, boolean withResponse) {
    if (withResponse) {
        return this.serviceClient.clearLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold, requestContext);
    } else {
        LegalHold result = this.serviceClient.clearLegalHold(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold);
        return new SimpleResponse<>(null, 200, null, result);
    }
}

/**
 * Combined Methods: setLegalHold, setLegalHoldWithResponse
 * Reason: Both methods set legal hold tags, with one returning a simple result and the other returning a Response wrapper. Providing a single wrapper method that allows the developer to choose whether to get the raw result or the full response improves convenience and reduces overload confusion.
 * 
 * Comment: Sets legal hold tags on the specified container, optionally returning the full HTTP response.
 */
public Response<LegalHold> setLegalHoldOnContainer(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, LegalHold legalHold, RequestContext requestContext, boolean withResponse) {
    if (withResponse) {
        return this.serviceClient.setLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold, requestContext);
    } else {
        LegalHold result = this.serviceClient.setLegalHold(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold);
        return new SimpleResponse<>(null, 200, null, result);
    }
}

/**
 * Combined Methods: get, getWithResponse
 * Reason: Both methods get container properties, with one returning a simple result and the other returning a Response wrapper. Providing a single wrapper method that allows the developer to choose whether to get the raw result or the full response improves convenience and reduces overload confusion.
 * 
 * Comment: Gets properties of a specified container, optionally returning the full HTTP response.
 */
public Response<BlobContainer> getContainer(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, RequestContext requestContext, boolean withResponse) {
    if (withResponse) {
        return this.serviceClient.getWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, requestContext);
    } else {
        BlobContainer result = this.serviceClient.get(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
        return new SimpleResponse<>(null, 200, null, result);
    }
}