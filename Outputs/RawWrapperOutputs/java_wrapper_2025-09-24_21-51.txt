Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-09-24_21-51


// Wrapper for createWithResponse and updateWithResponse, providing a single upsertContainerWithResponse method.
// Reason: Both methods have nearly identical parameters and return types, differing only in whether the container exists.
// This wrapper improves developer experience by providing an "upsert" operation, reducing the need for clients to check existence and call create or update accordingly.
// Follows the "Option Parameters" guideline by accepting all parameters and returning the logical entity in a Response.

@ServiceMethod(returns = ReturnType.SINGLE)
public Response<BlobContainer> upsertContainerWithResponse(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    BlobContainer blobContainer,
    RequestContext requestContext
) {
    if (subscriptionId == null || subscriptionId.isEmpty()) {
        throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
    }
    if (resourceGroupName == null || resourceGroupName.isEmpty()) {
        throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
    }
    if (accountName == null || accountName.isEmpty()) {
        throw new IllegalArgumentException("accountName cannot be null or empty.");
    }
    if (containerName == null || containerName.isEmpty()) {
        throw new IllegalArgumentException("containerName cannot be null or empty.");
    }
    if (apiVersion == null || apiVersion.isEmpty()) {
        throw new IllegalArgumentException("apiVersion cannot be null or empty.");
    }
    if (blobContainer == null) {
        throw new IllegalArgumentException("blobContainer cannot be null.");
    }

    try {
        // Try to create the container. If it already exists, update it.
        return this.createWithResponse(
            subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer, requestContext
        );
    } catch (HttpResponseException ex) {
        // If the container already exists, update it instead.
        if (ex.getResponse() != null && ex.getResponse().getStatusCode() == 409) {
            // 409 Conflict - container exists
            return this.updateWithResponse(
                subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer, requestContext
            );
        }
        throw ex;
    }
}
// Wrapped methods: createWithResponse, updateWithResponse. Reason: Combine create and update logic for BlobContainer into a single upsert operation for developer convenience.