Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-06_22-09


/**
 * Combined Methods: setLegalHold, setLegalHoldWithResponse
 * Reason: Both methods perform the same operation of setting legal hold tags, differing only by whether a Response wrapper and RequestContext are used. Wrapping them provides a single entry point using the options pattern for convenience and future extensibility.
 * 
 * Comment: Sets legal hold tags on a blob container, with optional support for request context and response details.
 */
public Response<LegalHold> setLegalHold(SetLegalHoldOptions options, RequestContext requestContext) {
    if (requestContext != null) {
        return this.serviceClient.setLegalHoldWithResponse(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion(),
            options.getLegalHold(),
            requestContext
        );
    } else {
        LegalHold result = this.serviceClient.setLegalHold(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion(),
            options.getLegalHold()
        );
        return new SimpleResponse<>(null, 200, null, result);
    }
}

/**
 * Combined Methods: clearLegalHold, clearLegalHoldWithResponse
 * Reason: Both methods clear legal hold tags, with the only difference being the presence of a Response wrapper and RequestContext. Wrapping them into a single method using the options pattern simplifies usage and allows for future extensibility.
 * 
 * Comment: Clears legal hold tags on a blob container, with optional support for request context and response details.
 */
public Response<LegalHold> clearLegalHold(ClearLegalHoldOptions options, RequestContext requestContext) {
    if (requestContext != null) {
        return this.serviceClient.clearLegalHoldWithResponse(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion(),
            options.getLegalHold(),
            requestContext
        );
    } else {
        LegalHold result = this.serviceClient.clearLegalHold(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion(),
            options.getLegalHold()
        );
        return new SimpleResponse<>(null, 200, null, result);
    }
}

/**
 * Combined Methods: create, createWithResponse
 * Reason: Both methods create a new container, differing only by whether a Response wrapper and RequestContext are used. Wrapping them using the options pattern provides a single, extensible entry point for container creation.
 * 
 * Comment: Creates a new blob container, with optional support for request context and response details.
 */
public Response<BlobContainer> create(CreateContainerOptions options, RequestContext requestContext) {
    if (requestContext != null) {
        return this.serviceClient.createWithResponse(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion(),
            options.getBlobContainer(),
            requestContext
        );
    } else {
        BlobContainer result = this.serviceClient.create(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion(),
            options.getBlobContainer()
        );
        return new SimpleResponse<>(null, 200, null, result);
    }
}

/**
 * Combined Methods: update, updateWithResponse
 * Reason: Both methods update container properties, differing only by whether a Response wrapper and RequestContext are used. Wrapping them into a single method using the options pattern improves usability and extensibility.
 * 
 * Comment: Updates properties of a blob container, with optional support for request context and response details.
 */
public Response<BlobContainer> update(UpdateContainerOptions options, RequestContext requestContext) {
    if (requestContext != null) {
        return this.serviceClient.updateWithResponse(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion(),
            options.getBlobContainer(),
            requestContext
        );
    } else {
        BlobContainer result = this.serviceClient.update(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion(),
            options.getBlobContainer()
        );
        return new SimpleResponse<>(null, 200, null, result);
    }
}

/**
 * Combined Methods: get, getWithResponse
 * Reason: Both methods retrieve properties of a container, with the only difference being the presence of a Response wrapper and RequestContext. Wrapping them using the options pattern provides a unified and extensible API.
 * 
 * Comment: Gets properties of a specified blob container, with optional support for request context and response details.
 */
public Response<BlobContainer> get(GetContainerOptions options, RequestContext requestContext) {
    if (requestContext != null) {
        return this.serviceClient.getWithResponse(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion(),
            requestContext
        );
    } else {
        BlobContainer result = this.serviceClient.get(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion()
        );
        return new SimpleResponse<>(null, 200, null, result);
    }
}

/**
 * Combined Methods: delete, deleteWithResponse
 * Reason: Both methods delete a container, differing only by whether a Response wrapper and RequestContext are used. Wrapping them using the options pattern provides a single, extensible entry point for container deletion.
 * 
 * Comment: Deletes a specified blob container, with optional support for request context and response details.
 */
public Response<Void> delete(DeleteContainerOptions options, RequestContext requestContext) {
    if (requestContext != null) {
        return this.serviceClient.deleteWithResponse(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion(),
            requestContext
        );
    } else {
        this.serviceClient.delete(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion()
        );
        return new SimpleResponse<>(null, 204, null, null);
    }
}