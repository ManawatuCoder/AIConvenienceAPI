Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-06_20-44


/**
 * Combined Methods: create, createWithResponse
 * Reason: Both methods create a new container and have nearly identical parameters except for the optional RequestContext and return type. Wrapping them provides a single entry point that optionally accepts a RequestContext, reducing overload confusion and improving discoverability.
 * 
 * Comment: Creates a new container under the specified account. If requestContext is provided, returns a Response containing the BlobContainer and HTTP details; otherwise, returns just the BlobContainer.
 */
public Object createContainer(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, BlobContainer blobContainer, RequestContext requestContext) {
    if (requestContext != null) {
        return this.createWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer, requestContext);
    } else {
        return this.create(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer);
    }
}

/**
 * Combined Methods: get, getWithResponse
 * Reason: Both methods retrieve properties of a specified container with the only difference being the optional RequestContext and return type. This wrapper simplifies usage by allowing the developer to provide a RequestContext only if needed.
 * 
 * Comment: Gets properties of a specified container. If requestContext is provided, returns a Response containing the BlobContainer and HTTP details; otherwise, returns just the BlobContainer.
 */
public Object getContainer(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, RequestContext requestContext) {
    if (requestContext != null) {
        return this.getWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, requestContext);
    } else {
        return this.get(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
    }
}

/**
 * Combined Methods: update, updateWithResponse
 * Reason: Both methods update container properties with the only difference being the optional RequestContext and return type. This wrapper provides a single method for both scenarios, improving ease of use.
 * 
 * Comment: Updates container properties as specified in request body. If requestContext is provided, returns a Response containing the BlobContainer and HTTP details; otherwise, returns just the BlobContainer.
 */
public Object updateContainer(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, BlobContainer blobContainer, RequestContext requestContext) {
    if (requestContext != null) {
        return this.updateWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer, requestContext);
    } else {
        return this.update(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer);
    }
}

/**
 * Combined Methods: delete, deleteWithResponse
 * Reason: Both methods delete a specified container, differing only by the presence of an optional RequestContext and return type. This wrapper allows for a single method call, simplifying the API surface.
 * 
 * Comment: Deletes the specified container under its account. If requestContext is provided, returns a Response with HTTP details; otherwise, performs the delete operation without returning a value.
 */
public Object deleteContainer(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, RequestContext requestContext) {
    if (requestContext != null) {
        return this.deleteWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, requestContext);
    } else {
        this.delete(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
        return null;
    }
}

/**
 * Combined Methods: setLegalHold, setLegalHoldWithResponse
 * Reason: Both methods set legal hold tags, with the only difference being the optional RequestContext and return type. This wrapper provides a unified entry point for both use cases.
 * 
 * Comment: Sets legal hold tags for a container. If requestContext is provided, returns a Response containing the LegalHold and HTTP details; otherwise, returns just the LegalHold.
 */
public Object setContainerLegalHold(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, LegalHold legalHold, RequestContext requestContext) {
    if (requestContext != null) {
        return this.setLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold, requestContext);
    } else {
        return this.setLegalHold(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold);
    }
}

/**
 * Combined Methods: clearLegalHold, clearLegalHoldWithResponse
 * Reason: Both methods clear legal hold tags, differing only by the optional RequestContext and return type. This wrapper method streamlines usage for both scenarios.
 * 
 * Comment: Clears legal hold tags for a container. If requestContext is provided, returns a Response containing the LegalHold and HTTP details; otherwise, returns just the LegalHold.
 */
public Object clearContainerLegalHold(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, LegalHold legalHold, RequestContext requestContext) {
    if (requestContext != null) {
        return this.clearLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold, requestContext);
    } else {
        return this.clearLegalHold(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold);
    }
}

/**
 * Combined Methods: list, listWithResponse
 * Reason: Both methods list containers, with listWithResponse supporting additional optional parameters and returning a Response. This wrapper provides a single entry point that covers both simple and advanced listing scenarios.
 * 
 * Comment: Lists all containers under the specified account. If requestContext is provided, returns a Response containing ListContainerItems and HTTP details; otherwise, returns just the ListContainerItems.
 */
public Object listContainers(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String maxpagesize, String filter, ListContainersInclude include, RequestContext requestContext) {
    if (requestContext != null) {
        return this.listWithResponse(subscriptionId, resourceGroupName, accountName, apiVersion, maxpagesize, filter, include, requestContext);
    } else {
        return this.list(subscriptionId, resourceGroupName, accountName, apiVersion);
    }
}

/**
 * Combined Methods: deleteImmutabilityPolicy, deleteImmutabilityPolicyWithResponse
 * Reason: Both methods abort an unlocked immutability policy, differing only by the optional RequestContext and return type. This wrapper provides a unified entry point for both scenarios.
 * 
 * Comment: Aborts an unlocked immutability policy for a container. If requestContext is provided, returns a Response containing the ImmutabilityPolicy and HTTP details; otherwise, returns just the ImmutabilityPolicy.
 */
public Object deleteContainerImmutabilityPolicy(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, String ifMatch, RequestContext requestContext) {
    if (requestContext != null) {
        return this.deleteImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, ifMatch, requestContext);
    } else {
        return this.deleteImmutabilityPolicy(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, ifMatch);
    }
}