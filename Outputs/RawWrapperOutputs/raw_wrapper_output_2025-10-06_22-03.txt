Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-06_22-03


/**
 * Combined Methods: setLegalHold, setLegalHoldWithResponse
 * Reason: Both methods set legal hold tags, with one returning a simple result and the other returning a Response wrapper. Providing a single wrapper with an option to include the RequestContext parameter improves convenience and reduces overload confusion.
 * 
 * Comment: Sets legal hold tags on a blob container, optionally returning the full HTTP response if a RequestContext is provided.
 */
public Response<LegalHold> setLegalHoldCombined(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, LegalHold legalHold, RequestContext requestContext) {
    if (requestContext != null) {
        return this.serviceClient.setLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, legalHold, requestContext);
    } else {
        LegalHold result = this.serviceClient.setLegalHold(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, legalHold);
        return new SimpleResponse<>(null, 200, null, result);
    }
}

/**
 * Combined Methods: clearLegalHold, clearLegalHoldWithResponse
 * Reason: Both methods clear legal hold tags, with one returning a simple result and the other returning a Response wrapper. Providing a single wrapper with an option to include the RequestContext parameter improves convenience and reduces overload confusion.
 * 
 * Comment: Clears legal hold tags on a blob container, optionally returning the full HTTP response if a RequestContext is provided.
 */
public Response<LegalHold> clearLegalHoldCombined(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, LegalHold legalHold, RequestContext requestContext) {
    if (requestContext != null) {
        return this.serviceClient.clearLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, legalHold, requestContext);
    } else {
        LegalHold result = this.serviceClient.clearLegalHold(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, legalHold);
        return new SimpleResponse<>(null, 200, null, result);
    }
}

/**
 * Combined Methods: create, createWithResponse
 * Reason: Both methods create a new container, with one returning a simple result and the other returning a Response wrapper. Providing a single wrapper with an option to include the RequestContext parameter improves convenience and reduces overload confusion.
 * 
 * Comment: Creates a new blob container, optionally returning the full HTTP response if a RequestContext is provided.
 */
public Response<BlobContainer> createContainerCombined(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, BlobContainer blobContainer, RequestContext requestContext) {
    if (requestContext != null) {
        return this.serviceClient.createWithResponse(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, blobContainer, requestContext);
    } else {
        BlobContainer result = this.serviceClient.create(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, blobContainer);
        return new SimpleResponse<>(null, 200, null, result);
    }
}

/**
 * Combined Methods: update, updateWithResponse
 * Reason: Both methods update container properties, with one returning a simple result and the other returning a Response wrapper. Providing a single wrapper with an option to include the RequestContext parameter improves convenience and reduces overload confusion.
 * 
 * Comment: Updates blob container properties, optionally returning the full HTTP response if a RequestContext is provided.
 */
public Response<BlobContainer> updateContainerCombined(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, BlobContainer blobContainer, RequestContext requestContext) {
    if (requestContext != null) {
        return this.serviceClient.updateWithResponse(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, blobContainer, requestContext);
    } else {
        BlobContainer result = this.serviceClient.update(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, blobContainer);
        return new SimpleResponse<>(null, 200, null, result);
    }
}

/**
 * Combined Methods: get, getWithResponse
 * Reason: Both methods retrieve container properties, with one returning a simple result and the other returning a Response wrapper. Providing a single wrapper with an option to include the RequestContext parameter improves convenience and reduces overload confusion.
 * 
 * Comment: Gets properties of a blob container, optionally returning the full HTTP response if a RequestContext is provided.
 */
public Response<BlobContainer> getContainerCombined(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, RequestContext requestContext) {
    if (requestContext != null) {
        return this.serviceClient.getWithResponse(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, requestContext);
    } else {
        BlobContainer result = this.serviceClient.get(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion);
        return new SimpleResponse<>(null, 200, null, result);
    }
}

/**
 * Combined Methods: delete, deleteWithResponse
 * Reason: Both methods delete a container, with one returning void and the other returning a Response wrapper. Providing a single wrapper with an option to include the RequestContext parameter improves convenience and reduces overload confusion.
 * 
 * Comment: Deletes a blob container, optionally returning the full HTTP response if a RequestContext is provided.
 */
public Response<Void> deleteContainerCombined(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, RequestContext requestContext) {
    if (requestContext != null) {
        return this.serviceClient.deleteWithResponse(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, requestContext);
    } else {
        this.serviceClient.delete(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
        return new SimpleResponse<>(null, 204, null, null);
    }
}

/**
 * Combined Methods: deleteImmutabilityPolicy, deleteImmutabilityPolicyWithResponse
 * Reason: Both methods abort an unlocked immutability policy, with one returning a simple result and the other returning a Response wrapper. Providing a single wrapper with an option to include the RequestContext parameter improves convenience and reduces overload confusion.
 * 
 * Comment: Aborts an unlocked immutability policy, optionally returning the full HTTP response if a RequestContext is provided.
 */
public Response<ImmutabilityPolicy> deleteImmutabilityPolicyCombined(String subscriptionId, String resourceGroupName,
    String accountName, String containerName, String apiVersion, String ifMatch, RequestContext requestContext) {
    if (requestContext != null) {
        return this.serviceClient.deleteImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName, accountName,
            containerName, apiVersion, ifMatch, requestContext);
    } else {
        ImmutabilityPolicy result = this.serviceClient.deleteImmutabilityPolicy(subscriptionId, resourceGroupName,
            accountName, containerName, apiVersion, ifMatch);
        return new SimpleResponse<>(null, 200, null, result);
    }
}