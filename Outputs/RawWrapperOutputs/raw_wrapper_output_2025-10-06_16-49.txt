Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-06_16-49


// Wrapper for setLegalHold and setLegalHoldWithResponse
// Reason: These methods are identical except for the inclusion of RequestContext and Response<T> return type. 
// Following the options pattern, we introduce SetLegalHoldOptions to simplify overloads and provide a single entry point.
// This improves developer experience by reducing overload proliferation and aligning with the guidelines for option parameters.

public class SetLegalHoldOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private final String apiVersion;
    private final LegalHold legalHold;
    private RequestContext requestContext;

    public SetLegalHoldOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, LegalHold legalHold) {
        if (subscriptionId == null || resourceGroupName == null || accountName == null || containerName == null || apiVersion == null || legalHold == null) {
            throw new IllegalArgumentException("Required parameter is null.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
        this.apiVersion = apiVersion;
        this.legalHold = legalHold;
    }

    public String getSubscriptionId() { return subscriptionId; }
    public String getResourceGroupName() { return resourceGroupName; }
    public String getAccountName() { return accountName; }
    public String getContainerName() { return containerName; }
    public String getApiVersion() { return apiVersion; }
    public LegalHold getLegalHold() { return legalHold; }
    public RequestContext getRequestContext() { return requestContext; }
    public SetLegalHoldOptions setRequestContext(RequestContext requestContext) {
        this.requestContext = requestContext;
        return this;
    }
}

/**
 * Sets legal hold tags using options pattern.
 * Wraps setLegalHold and setLegalHoldWithResponse for improved developer experience.
 */
public Response<LegalHold> setLegalHold(SetLegalHoldOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    if (options.getRequestContext() != null) {
        return this.setLegalHoldWithResponse(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion(),
            options.getLegalHold(),
            options.getRequestContext()
        );
    } else {
        LegalHold result = this.setLegalHold(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion(),
            options.getLegalHold()
        );
        return new SimpleResponse<>(null, 200, null, result);
    }
}

// Wrapper for clearLegalHold and clearLegalHoldWithResponse
// Reason: These methods are identical except for the inclusion of RequestContext and Response<T> return type. 
// Following the options pattern, we introduce ClearLegalHoldOptions to simplify overloads and provide a single entry point.

public class ClearLegalHoldOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private final String apiVersion;
    private final LegalHold legalHold;
    private RequestContext requestContext;

    public ClearLegalHoldOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, LegalHold legalHold) {
        if (subscriptionId == null || resourceGroupName == null || accountName == null || containerName == null || apiVersion == null || legalHold == null) {
            throw new IllegalArgumentException("Required parameter is null.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
        this.apiVersion = apiVersion;
        this.legalHold = legalHold;
    }

    public String getSubscriptionId() { return subscriptionId; }
    public String getResourceGroupName() { return resourceGroupName; }
    public String getAccountName() { return accountName; }
    public String getContainerName() { return containerName; }
    public String getApiVersion() { return apiVersion; }
    public LegalHold getLegalHold() { return legalHold; }
    public RequestContext getRequestContext() { return requestContext; }
    public ClearLegalHoldOptions setRequestContext(RequestContext requestContext) {
        this.requestContext = requestContext;
        return this;
    }
}

/**
 * Clears legal hold tags using options pattern.
 * Wraps clearLegalHold and clearLegalHoldWithResponse for improved developer experience.
 */
public Response<LegalHold> clearLegalHold(ClearLegalHoldOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    if (options.getRequestContext() != null) {
        return this.clearLegalHoldWithResponse(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion(),
            options.getLegalHold(),
            options.getRequestContext()
        );
    } else {
        LegalHold result = this.clearLegalHold(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion(),
            options.getLegalHold()
        );
        return new SimpleResponse<>(null, 200, null, result);
    }
}

// Wrapper for create, createWithResponse, update, updateWithResponse, get, getWithResponse, delete, deleteWithResponse
// Reason: These method pairs differ only by the presence of RequestContext and Response<T> return type. 
// The options pattern reduces overloads and centralizes input validation.

public class BlobContainerOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private final String apiVersion;
    private BlobContainer blobContainer;
    private RequestContext requestContext;

    public BlobContainerOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion) {
        if (subscriptionId == null || resourceGroupName == null || accountName == null || containerName == null || apiVersion == null) {
            throw new IllegalArgumentException("Required parameter is null.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
        this.apiVersion = apiVersion;
    }

    public String getSubscriptionId() { return subscriptionId; }
    public String getResourceGroupName() { return resourceGroupName; }
    public String getAccountName() { return accountName; }
    public String getContainerName() { return containerName; }
    public String getApiVersion() { return apiVersion; }
    public BlobContainer getBlobContainer() { return blobContainer; }
    public BlobContainerOptions setBlobContainer(BlobContainer blobContainer) {
        this.blobContainer = blobContainer;
        return this;
    }
    public RequestContext getRequestContext() { return requestContext; }
    public BlobContainerOptions setRequestContext(RequestContext requestContext) {
        this.requestContext = requestContext;
        return this;
    }
}

/**
 * Creates or updates a blob container using options pattern.
 * Wraps create, createWithResponse, update, updateWithResponse for improved developer experience.
 */
public Response<BlobContainer> createOrUpdateBlobContainer(BlobContainerOptions options, boolean isUpdate) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    if (options.getBlobContainer() == null) {
        throw new IllegalArgumentException("blobContainer cannot be null.");
    }
    if (options.getRequestContext() != null) {
        if (isUpdate) {
            return this.updateWithResponse(
                options.getSubscriptionId(),
                options.getResourceGroupName(),
                options.getAccountName(),
                options.getContainerName(),
                options.getApiVersion(),
                options.getBlobContainer(),
                options.getRequestContext()
            );
        } else {
            return this.createWithResponse(
                options.getSubscriptionId(),
                options.getResourceGroupName(),
                options.getAccountName(),
                options.getContainerName(),
                options.getApiVersion(),
                options.getBlobContainer(),
                options.getRequestContext()
            );
        }
    } else {
        BlobContainer result;
        if (isUpdate) {
            result = this.update(
                options.getSubscriptionId(),
                options.getResourceGroupName(),
                options.getAccountName(),
                options.getContainerName(),
                options.getApiVersion(),
                options.getBlobContainer()
            );
        } else {
            result = this.create(
                options.getSubscriptionId(),
                options.getResourceGroupName(),
                options.getAccountName(),
                options.getContainerName(),
                options.getApiVersion(),
                options.getBlobContainer()
            );
        }
        return new SimpleResponse<>(null, 200, null, result);
    }
}

/**
 * Gets a blob container using options pattern.
 * Wraps get and getWithResponse for improved developer experience.
 */
public Response<BlobContainer> getBlobContainer(BlobContainerOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    if (options.getRequestContext() != null) {
        return this.getWithResponse(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion(),
            options.getRequestContext()
        );
    } else {
        BlobContainer result = this.get(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion()
        );
        return new SimpleResponse<>(null, 200, null, result);
    }
}

/**
 * Deletes a blob container using options pattern.
 * Wraps delete and deleteWithResponse for improved developer experience.
 */
public Response<Void> deleteBlobContainer(BlobContainerOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    if (options.getRequestContext() != null) {
        return this.deleteWithResponse(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion(),
            options.getRequestContext()
        );
    } else {
        this.delete(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion()
        );
        return new SimpleResponse<>(null, 200, null, null);
    }
}

// Note: SimpleResponse<T> is a utility class to wrap results for non-Response<T> methods. 
// In production code, use the Azure SDK's Response<T> implementation or equivalent.