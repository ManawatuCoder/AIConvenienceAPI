Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-07_00-34


/**
 * Combined Methods: create, createWithResponse
 * Reason: Both methods create a new container, with one returning only the logical entity and the other returning the full response. Wrapping them provides a single entry point for creating a container, with an option to retrieve the response if needed, improving discoverability and convenience.
 * 
 * Comment: Creates a new container under the specified account. If requestContext is provided, returns the full response; otherwise, returns the created BlobContainer entity.
 */
public BlobContainer createContainer(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, BlobContainer blobContainer, RequestContext requestContext) {
    if (requestContext != null) {
        return this.serviceClient.createWithResponse(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, blobContainer, requestContext).getValue();
    } else {
        return this.serviceClient.create(subscriptionId, resourceGroupName, accountName, containerName, apiVersion,
            blobContainer);
    }
}

/**
 * Combined Methods: update, updateWithResponse
 * Reason: Both methods update container properties, with one returning only the logical entity and the other returning the full response. Wrapping them provides a single entry point for updating a container, with an option to retrieve the response if needed, improving usability and consistency.
 * 
 * Comment: Updates container properties as specified in the request body. If requestContext is provided, returns the full response; otherwise, returns the updated BlobContainer entity.
 */
public BlobContainer updateContainer(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, BlobContainer blobContainer, RequestContext requestContext) {
    if (requestContext != null) {
        return this.serviceClient.updateWithResponse(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, blobContainer, requestContext).getValue();
    } else {
        return this.serviceClient.update(subscriptionId, resourceGroupName, accountName, containerName, apiVersion,
            blobContainer);
    }
}

/**
 * Combined Methods: delete, deleteWithResponse
 * Reason: Both methods delete a specified container, with one returning void and the other returning a full response. Wrapping them provides a single entry point for deleting a container, with an option to retrieve the response if needed, improving developer experience and reducing confusion.
 * 
 * Comment: Deletes the specified container under its account. If requestContext is provided, returns the full response; otherwise, performs the deletion without returning a value.
 */
public void deleteContainer(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, RequestContext requestContext) {
    if (requestContext != null) {
        this.serviceClient.deleteWithResponse(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, requestContext);
    } else {
        this.serviceClient.delete(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
    }
}

/**
 * Combined Methods: get, getWithResponse
 * Reason: Both methods retrieve properties of a specified container, with one returning only the logical entity and the other returning the full response. Wrapping them provides a single entry point for getting container properties, with an option to retrieve the response if needed.
 * 
 * Comment: Gets properties of a specified container. If requestContext is provided, returns the full response; otherwise, returns the BlobContainer entity.
 */
public BlobContainer getContainer(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, RequestContext requestContext) {
    if (requestContext != null) {
        return this.serviceClient.getWithResponse(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, requestContext).getValue();
    } else {
        return this.serviceClient.get(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
    }
}

/**
 * Combined Methods: list, listWithResponse
 * Reason: Both methods list all containers, with one returning only the logical entity and the other returning the full response. Wrapping them provides a single entry point for listing containers, with an option to retrieve the response if needed.
 * 
 * Comment: Lists all containers under the specified account. If requestContext is provided, returns the full response; otherwise, returns the ListContainerItems entity.
 */
public ListContainerItems listContainers(String subscriptionId, String resourceGroupName, String accountName,
    String apiVersion, String maxpagesize, String filter, ListContainersInclude include, RequestContext requestContext) {
    if (requestContext != null) {
        return this.serviceClient.listWithResponse(subscriptionId, resourceGroupName, accountName, apiVersion,
            maxpagesize, filter, include, requestContext).getValue();
    } else {
        return this.serviceClient.list(subscriptionId, resourceGroupName, accountName, apiVersion);
    }
}

/**
 * Combined Methods: setLegalHold, setLegalHoldWithResponse
 * Reason: Both methods set legal hold tags, with one returning only the logical entity and the other returning the full response. Wrapping them provides a single entry point for setting legal hold tags, with an option to retrieve the response if needed.
 * 
 * Comment: Sets legal hold tags on a blob container. If requestContext is provided, returns the full response; otherwise, returns the LegalHold entity.
 */
public LegalHold setLegalHoldTags(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, LegalHold legalHold, RequestContext requestContext) {
    if (requestContext != null) {
        return this.serviceClient.setLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, legalHold, requestContext).getValue();
    } else {
        return this.serviceClient.setLegalHold(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, legalHold);
    }
}

/**
 * Combined Methods: clearLegalHold, clearLegalHoldWithResponse
 * Reason: Both methods clear legal hold tags, with one returning only the logical entity and the other returning the full response. Wrapping them provides a single entry point for clearing legal hold tags, with an option to retrieve the response if needed.
 * 
 * Comment: Clears legal hold tags on a blob container. If requestContext is provided, returns the full response; otherwise, returns the LegalHold entity.
 */
public LegalHold clearLegalHoldTags(String subscriptionId, String resourceGroupName, String accountName,
    String containerName, String apiVersion, LegalHold legalHold, RequestContext requestContext) {
    if (requestContext != null) {
        return this.serviceClient.clearLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName,
            containerName, apiVersion, legalHold, requestContext).getValue();
    } else {
        return this.serviceClient.clearLegalHold(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, legalHold);
    }
}

/**
 * Combined Methods: getImmutabilityPolicy, getImmutabilityPolicyWithResponse
 * Reason: Both methods get the existing immutability policy, with one returning only the logical entity and the other returning the full response. Wrapping them provides a single entry point for getting the immutability policy, with an option to retrieve the response if needed.
 * 
 * Comment: Gets the existing immutability policy along with the corresponding ETag. If requestContext is provided, returns the full response; otherwise, returns the ImmutabilityPolicy entity.
 */
public ImmutabilityPolicy getImmutabilityPolicyDetails(String subscriptionId, String resourceGroupName,
    String accountName, String containerName, String apiVersion, String ifMatch, RequestContext requestContext) {
    if (requestContext != null) {
        return this.serviceClient.getImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName, accountName,
            containerName, apiVersion, ifMatch, requestContext).getValue();
    } else {
        return this.serviceClient.getImmutabilityPolicy(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion);
    }
}

/**
 * Combined Methods: lockImmutabilityPolicy, lockImmutabilityPolicyWithResponse
 * Reason: Both methods lock the immutability policy, with one returning only the logical entity and the other returning the full response. Wrapping them provides a single entry point for locking the immutability policy, with an option to retrieve the response if needed.
 * 
 * Comment: Sets the ImmutabilityPolicy to Locked state. If requestContext is provided, returns the full response; otherwise, returns the ImmutabilityPolicy entity.
 */
public ImmutabilityPolicy lockImmutabilityPolicyState(String subscriptionId, String resourceGroupName,
    String accountName, String containerName, String apiVersion, String ifMatch, RequestContext requestContext) {
    if (requestContext != null) {
        return this.serviceClient.lockImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName, accountName,
            containerName, apiVersion, ifMatch, requestContext).getValue();
    } else {
        return this.serviceClient.lockImmutabilityPolicy(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, ifMatch);
    }
}

/**
 * Combined Methods: deleteImmutabilityPolicy, deleteImmutabilityPolicyWithResponse
 * Reason: Both methods abort an unlocked immutability policy, with one returning only the logical entity and the other returning the full response. Wrapping them provides a single entry point for deleting the immutability policy, with an option to retrieve the response if needed.
 * 
 * Comment: Aborts an unlocked immutability policy. If requestContext is provided, returns the full response; otherwise, returns the ImmutabilityPolicy entity.
 */
public ImmutabilityPolicy deleteImmutabilityPolicyAction(String subscriptionId, String resourceGroupName,
    String accountName, String containerName, String apiVersion, String ifMatch, RequestContext requestContext) {
    if (requestContext != null) {
        return this.serviceClient.deleteImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName, accountName,
            containerName, apiVersion, ifMatch, requestContext).getValue();
    } else {
        return this.serviceClient.deleteImmutabilityPolicy(subscriptionId, resourceGroupName, accountName,
            containerName, apiVersion, ifMatch);
    }
}

/**
 * Combined Methods: createOrUpdateImmutabilityPolicy, createOrUpdateImmutabilityPolicyWithResponse
 * Reason: Both methods create or update an unlocked immutability policy, with one returning only the logical entity and the other returning the full response. Wrapping them provides a single entry point for creating or updating the immutability policy, with an option to retrieve the response if needed.
 * 
 * Comment: Creates or updates an unlocked immutability policy. If requestContext is provided, returns the full response; otherwise, returns the ImmutabilityPolicy entity.
 */
public ImmutabilityPolicy createOrUpdateImmutabilityPolicyAction(String subscriptionId, String resourceGroupName,
    String accountName, String containerName, String apiVersion, String ifMatch, ImmutabilityPolicy parameters,
    RequestContext requestContext) {
    if (requestContext != null) {
        return this.serviceClient.createOrUpdateImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName,
            accountName, containerName, apiVersion, ifMatch, parameters, requestContext).getValue();
    } else {
        return this.serviceClient.createOrUpdateImmutabilityPolicy(subscriptionId, resourceGroupName, accountName,
            containerName, apiVersion);
    }
}

/**
 * Combined Methods: extendImmutabilityPolicy, extendImmutabilityPolicyWithResponse
 * Reason: Both methods extend the immutability period of a locked immutability policy, with one returning only the logical entity and the other returning the full response. Wrapping them provides a single entry point for extending the immutability policy, with an option to retrieve the response if needed.
 * 
 * Comment: Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. If requestContext is provided, returns the full response; otherwise, returns the ImmutabilityPolicy entity.
 */
public ImmutabilityPolicy extendImmutabilityPolicyPeriod(String subscriptionId, String resourceGroupName,
    String accountName, String containerName, String apiVersion, String ifMatch, ImmutabilityPolicy parameters,
    RequestContext requestContext) {
    if (requestContext != null) {
        return this.serviceClient.extendImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName, accountName,
            containerName, apiVersion, ifMatch, parameters, requestContext).getValue();
    } else {
        return this.serviceClient.extendImmutabilityPolicy(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, ifMatch);
    }
}