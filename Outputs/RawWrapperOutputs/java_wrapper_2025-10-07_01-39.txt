Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-07_01-39


// Wrapper for setLegalHold and setLegalHoldWithResponse
// Reason: Both methods perform the same operation (set legal hold tags) with the only difference being whether a Response<T> is returned and whether a RequestContext is provided. This wrapper provides a single entry point with sensible defaults and optional context, improving developer experience and following the options pattern.

public Response<LegalHold> setLegalHold(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    LegalHold legalHold,
    RequestContext requestContext
) {
    if (subscriptionId == null || subscriptionId.isEmpty()) {
        throw new IllegalArgumentException("'subscriptionId' cannot be null or empty.");
    }
    if (resourceGroupName == null || resourceGroupName.isEmpty()) {
        throw new IllegalArgumentException("'resourceGroupName' cannot be null or empty.");
    }
    if (accountName == null || accountName.isEmpty()) {
        throw new IllegalArgumentException("'accountName' cannot be null or empty.");
    }
    if (containerName == null || containerName.isEmpty()) {
        throw new IllegalArgumentException("'containerName' cannot be null or empty.");
    }
    if (apiVersion == null || apiVersion.isEmpty()) {
        throw new IllegalArgumentException("'apiVersion' cannot be null or empty.");
    }
    if (legalHold == null) {
        throw new IllegalArgumentException("'legalHold' cannot be null.");
    }
    if (requestContext != null) {
        return this.setLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold, requestContext);
    } else {
        // Provide a default context if not supplied
        return this.setLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold, new RequestContext());
    }
}

// Wrapper for clearLegalHold and clearLegalHoldWithResponse
// Reason: Both methods clear legal hold tags with only the return type and context as differences. This wrapper unifies the experience and simplifies usage.

public Response<LegalHold> clearLegalHold(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    LegalHold legalHold,
    RequestContext requestContext
) {
    if (subscriptionId == null || subscriptionId.isEmpty()) {
        throw new IllegalArgumentException("'subscriptionId' cannot be null or empty.");
    }
    if (resourceGroupName == null || resourceGroupName.isEmpty()) {
        throw new IllegalArgumentException("'resourceGroupName' cannot be null or empty.");
    }
    if (accountName == null || accountName.isEmpty()) {
        throw new IllegalArgumentException("'accountName' cannot be null or empty.");
    }
    if (containerName == null || containerName.isEmpty()) {
        throw new IllegalArgumentException("'containerName' cannot be null or empty.");
    }
    if (apiVersion == null || apiVersion.isEmpty()) {
        throw new IllegalArgumentException("'apiVersion' cannot be null or empty.");
    }
    if (legalHold == null) {
        throw new IllegalArgumentException("'legalHold' cannot be null.");
    }
    if (requestContext != null) {
        return this.clearLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold, requestContext);
    } else {
        // Provide a default context if not supplied
        return this.clearLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold, new RequestContext());
    }
}

// Wrapper for create, createWithResponse, update, updateWithResponse, get, getWithResponse, delete, deleteWithResponse
// Reason: These methods follow a pattern of <operation> and <operation>WithResponse, with the only difference being the presence of RequestContext and the return type. This wrapper provides a unified method for each operation, with input validation and sensible defaults.

public Response<BlobContainer> createOrUpdateContainer(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    BlobContainer blobContainer,
    RequestContext requestContext,
    boolean isUpdate
) {
    if (subscriptionId == null || subscriptionId.isEmpty()) {
        throw new IllegalArgumentException("'subscriptionId' cannot be null or empty.");
    }
    if (resourceGroupName == null || resourceGroupName.isEmpty()) {
        throw new IllegalArgumentException("'resourceGroupName' cannot be null or empty.");
    }
    if (accountName == null || accountName.isEmpty()) {
        throw new IllegalArgumentException("'accountName' cannot be null or empty.");
    }
    if (containerName == null || containerName.isEmpty()) {
        throw new IllegalArgumentException("'containerName' cannot be null or empty.");
    }
    if (apiVersion == null || apiVersion.isEmpty()) {
        throw new IllegalArgumentException("'apiVersion' cannot be null or empty.");
    }
    if (blobContainer == null) {
        throw new IllegalArgumentException("'blobContainer' cannot be null.");
    }
    if (isUpdate) {
        if (requestContext != null) {
            return this.updateWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer, requestContext);
        } else {
            return this.updateWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer, new RequestContext());
        }
    } else {
        if (requestContext != null) {
            return this.createWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer, requestContext);
        } else {
            return this.createWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer, new RequestContext());
        }
    }
}

public Response<BlobContainer> getContainer(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    RequestContext requestContext
) {
    if (subscriptionId == null || subscriptionId.isEmpty()) {
        throw new IllegalArgumentException("'subscriptionId' cannot be null or empty.");
    }
    if (resourceGroupName == null || resourceGroupName.isEmpty()) {
        throw new IllegalArgumentException("'resourceGroupName' cannot be null or empty.");
    }
    if (accountName == null || accountName.isEmpty()) {
        throw new IllegalArgumentException("'accountName' cannot be null or empty.");
    }
    if (containerName == null || containerName.isEmpty()) {
        throw new IllegalArgumentException("'containerName' cannot be null or empty.");
    }
    if (apiVersion == null || apiVersion.isEmpty()) {
        throw new IllegalArgumentException("'apiVersion' cannot be null or empty.");
    }
    if (requestContext != null) {
        return this.getWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, requestContext);
    } else {
        return this.getWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, new RequestContext());
    }
}

public Response<Void> deleteContainer(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    RequestContext requestContext
) {
    if (subscriptionId == null || subscriptionId.isEmpty()) {
        throw new IllegalArgumentException("'subscriptionId' cannot be null or empty.");
    }
    if (resourceGroupName == null || resourceGroupName.isEmpty()) {
        throw new IllegalArgumentException("'resourceGroupName' cannot be null or empty.");
    }
    if (accountName == null || accountName.isEmpty()) {
        throw new IllegalArgumentException("'accountName' cannot be null or empty.");
    }
    if (containerName == null || containerName.isEmpty()) {
        throw new IllegalArgumentException("'containerName' cannot be null or empty.");
    }
    if (apiVersion == null || apiVersion.isEmpty()) {
        throw new IllegalArgumentException("'apiVersion' cannot be null or empty.");
    }
    if (requestContext != null) {
        return this.deleteWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, requestContext);
    } else {
        return this.deleteWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, new RequestContext());
    }
}