Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-07_00-16


/**
 * Combined Methods: create, createWithResponse
 * Reason: These methods perform the same operation (creating a new container), one returning a simple result and the other returning a Response wrapper. Providing a single overload with an options parameter and optional context improves developer experience by reducing parameter overloads and following the options pattern.
 * 
 * Comment: Creates a new container under the specified account, supporting both simple and advanced scenarios via options and optional context.
 */
public Response<BlobContainer> createContainer(CreateContainerOptions options, RequestContext context) {
    return this.serviceClient.createWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getBlobContainer(),
        context
    );
}

/**
 * Combined Methods: update, updateWithResponse
 * Reason: Both methods update container properties, differing only by whether a Response wrapper is returned. Wrapping them into a single method using an options parameter and optional context simplifies usage and aligns with the options pattern.
 * 
 * Comment: Updates container properties as specified in the request body, supporting both simple and advanced scenarios via options and optional context.
 */
public Response<BlobContainer> updateContainer(UpdateContainerOptions options, RequestContext context) {
    return this.serviceClient.updateWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getBlobContainer(),
        context
    );
}

/**
 * Combined Methods: delete, deleteWithResponse
 * Reason: Both methods delete a specified container, differing only by whether a Response wrapper is returned. Providing a single overload with an options parameter and optional context streamlines the API and follows the options pattern.
 * 
 * Comment: Deletes the specified container under its account, supporting both simple and advanced scenarios via options and optional context.
 */
public Response<Void> deleteContainer(DeleteContainerOptions options, RequestContext context) {
    return this.serviceClient.deleteWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        context
    );
}

/**
 * Combined Methods: list, listWithResponse
 * Reason: Both methods list all containers, with one returning a simple result and the other a Response wrapper. Wrapping them into a single method using an options parameter and optional context provides a more convenient and extensible API surface.
 * 
 * Comment: Lists all containers under the specified account, supporting both simple and advanced scenarios via options and optional context.
 */
public Response<ListContainerItems> listContainers(ListContainersOptions options, RequestContext context) {
    return this.serviceClient.listWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getApiVersion(),
        options.getMaxpagesize(),
        options.getFilter(),
        options.getInclude(),
        context
    );
}

/**
 * Combined Methods: clearLegalHold, clearLegalHoldWithResponse
 * Reason: Both methods clear legal hold tags, with one returning a simple result and the other a Response wrapper. Providing a single overload with an options parameter and optional context improves usability and follows the options pattern.
 * 
 * Comment: Clears legal hold tags on the specified container, supporting both simple and advanced scenarios via options and optional context.
 */
public Response<LegalHold> clearLegalHold(ClearLegalHoldOptions options, RequestContext context) {
    return this.serviceClient.clearLegalHoldWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getLegalHold(),
        context
    );
}

/**
 * Combined Methods: setLegalHold, setLegalHoldWithResponse
 * Reason: Both methods set legal hold tags, with one returning a simple result and the other a Response wrapper. Wrapping them into a single method using an options parameter and optional context streamlines the API.
 * 
 * Comment: Sets legal hold tags on the specified container, supporting both simple and advanced scenarios via options and optional context.
 */
public Response<LegalHold> setLegalHold(SetLegalHoldOptions options, RequestContext context) {
    return this.serviceClient.setLegalHoldWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getLegalHold(),
        context
    );
}

/**
 * Combined Methods: get, getWithResponse
 * Reason: Both methods get properties of a specified container, with one returning a simple result and the other a Response wrapper. Wrapping them into a single method using an options parameter and optional context simplifies usage.
 * 
 * Comment: Gets properties of a specified container, supporting both simple and advanced scenarios via options and optional context.
 */
public Response<BlobContainer> getContainer(GetContainerOptions options, RequestContext context) {
    return this.serviceClient.getWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        context
    );
}

/**
 * Combined Methods: getImmutabilityPolicy, getImmutabilityPolicyWithResponse
 * Reason: Both methods get the existing immutability policy, with one returning a simple result and the other a Response wrapper. Wrapping them into a single method using an options parameter and optional context improves developer experience.
 * 
 * Comment: Gets the existing immutability policy along with the corresponding ETag, supporting both simple and advanced scenarios via options and optional context.
 */
public Response<ImmutabilityPolicy> getImmutabilityPolicy(GetImmutabilityPolicyOptions options, RequestContext context) {
    return this.serviceClient.getImmutabilityPolicyWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch(),
        context
    );
}

/**
 * Combined Methods: deleteImmutabilityPolicy, deleteImmutabilityPolicyWithResponse
 * Reason: Both methods abort an unlocked immutability policy, with one returning a simple result and the other a Response wrapper. Wrapping them into a single method using an options parameter and optional context streamlines the API.
 * 
 * Comment: Aborts an unlocked immutability policy, supporting both simple and advanced scenarios via options and optional context.
 */
public Response<ImmutabilityPolicy> deleteImmutabilityPolicy(DeleteImmutabilityPolicyOptions options, RequestContext context) {
    return this.serviceClient.deleteImmutabilityPolicyWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch(),
        context
    );
}

/**
 * Combined Methods: lockImmutabilityPolicy, lockImmutabilityPolicyWithResponse
 * Reason: Both methods set the ImmutabilityPolicy to Locked state, with one returning a simple result and the other a Response wrapper. Wrapping them into a single method using an options parameter and optional context improves usability.
 * 
 * Comment: Sets the ImmutabilityPolicy to Locked state, supporting both simple and advanced scenarios via options and optional context.
 */
public Response<ImmutabilityPolicy> lockImmutabilityPolicy(LockImmutabilityPolicyOptions options, RequestContext context) {
    return this.serviceClient.lockImmutabilityPolicyWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch(),
        context
    );
}

/**
 * Combined Methods: createOrUpdateImmutabilityPolicy, createOrUpdateImmutabilityPolicyWithResponse
 * Reason: Both methods create or update an unlocked immutability policy, with one returning a simple result and the other a Response wrapper. Wrapping them into a single method using an options parameter and optional context improves developer experience.
 * 
 * Comment: Creates or updates an unlocked immutability policy, supporting both simple and advanced scenarios via options and optional context.
 */
public Response<ImmutabilityPolicy> createOrUpdateImmutabilityPolicy(CreateOrUpdateImmutabilityPolicyOptions options, RequestContext context) {
    return this.serviceClient.createOrUpdateImmutabilityPolicyWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch(),
        options.getParameters(),
        context
    );
}

/**
 * Combined Methods: extendImmutabilityPolicy, extendImmutabilityPolicyWithResponse
 * Reason: Both methods extend the immutability period of a locked immutability policy, with one returning a simple result and the other a Response wrapper. Wrapping them into a single method using an options parameter and optional context streamlines the API.
 * 
 * Comment: Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy, supporting both simple and advanced scenarios via options and optional context.
 */
public Response<ImmutabilityPolicy> extendImmutabilityPolicy(ExtendImmutabilityPolicyOptions options, RequestContext context) {
    return this.serviceClient.extendImmutabilityPolicyWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch(),
        options.getParameters(),
        context
    );
}