Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-07_00-59


// Wrapper for setLegalHold and setLegalHoldWithResponse
// Reason: These methods are identical in functionality except for whether they return a Response<T> or just T, and whether they accept a RequestContext. To improve developer experience and follow the options pattern, provide a single wrapper with optional context and a boolean to select response type.

public LegalHold setLegalHold(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    LegalHold legalHold,
    RequestContext requestContext,
    boolean returnResponse
) {
    if (subscriptionId == null || resourceGroupName == null || accountName == null || containerName == null || apiVersion == null || legalHold == null) {
        throw new IllegalArgumentException("Required parameters must not be null.");
    }
    if (returnResponse) {
        Response<LegalHold> response = this.setLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold, requestContext);
        return response.getValue();
    } else {
        return this.setLegalHold(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold);
    }
}

// Wrapper for clearLegalHold and clearLegalHoldWithResponse
// Reason: These methods are identical in functionality except for whether they return a Response<T> or just T, and whether they accept a RequestContext. To improve developer experience and follow the options pattern, provide a single wrapper with optional context and a boolean to select response type.

public LegalHold clearLegalHold(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    LegalHold legalHold,
    RequestContext requestContext,
    boolean returnResponse
) {
    if (subscriptionId == null || resourceGroupName == null || accountName == null || containerName == null || apiVersion == null || legalHold == null) {
        throw new IllegalArgumentException("Required parameters must not be null.");
    }
    if (returnResponse) {
        Response<LegalHold> response = this.clearLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold, requestContext);
        return response.getValue();
    } else {
        return this.clearLegalHold(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold);
    }
}

// Wrapper for create, createWithResponse, update, updateWithResponse, get, getWithResponse, delete, deleteWithResponse
// Reason: These method pairs differ only by whether they return Response<T> and accept RequestContext. Provide a single wrapper for each operation with optional context and a boolean to select response type.

public BlobContainer createOrUpdateContainer(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    BlobContainer blobContainer,
    RequestContext requestContext,
    boolean returnResponse,
    boolean isUpdate
) {
    if (subscriptionId == null || resourceGroupName == null || accountName == null || containerName == null || apiVersion == null || blobContainer == null) {
        throw new IllegalArgumentException("Required parameters must not be null.");
    }
    if (isUpdate) {
        if (returnResponse) {
            Response<BlobContainer> response = this.updateWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer, requestContext);
            return response.getValue();
        } else {
            return this.update(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer);
        }
    } else {
        if (returnResponse) {
            Response<BlobContainer> response = this.createWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer, requestContext);
            return response.getValue();
        } else {
            return this.create(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer);
        }
    }
}

public BlobContainer getContainer(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    RequestContext requestContext,
    boolean returnResponse
) {
    if (subscriptionId == null || resourceGroupName == null || accountName == null || containerName == null || apiVersion == null) {
        throw new IllegalArgumentException("Required parameters must not be null.");
    }
    if (returnResponse) {
        Response<BlobContainer> response = this.getWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, requestContext);
        return response.getValue();
    } else {
        return this.get(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
    }
}

public void deleteContainer(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    RequestContext requestContext,
    boolean useResponse
) {
    if (subscriptionId == null || resourceGroupName == null || accountName == null || containerName == null || apiVersion == null) {
        throw new IllegalArgumentException("Required parameters must not be null.");
    }
    if (useResponse) {
        this.deleteWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, requestContext);
    } else {
        this.delete(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
    }
}