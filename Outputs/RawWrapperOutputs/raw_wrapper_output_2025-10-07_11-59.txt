Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-07_11-59


/**
 * Combined Methods: create, createWithResponse
 * Reason: These methods perform the same operation (creating a container) but differ in whether they return a Response wrapper and accept a RequestContext. Wrapping them provides a single entry point that allows the developer to choose whether to provide a RequestContext and whether to receive the full Response, improving convenience and discoverability.
 * 
 * Comment: Creates a new container under the specified account. If a RequestContext is provided, returns the full Response; otherwise, returns the BlobContainer directly.
 */
public Object createContainer(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, BlobContainer blobContainer, RequestContext requestContext, boolean returnResponse) {
    if (returnResponse) {
        return this.serviceClient.createWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer, requestContext);
    } else {
        return this.serviceClient.create(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer);
    }
}

/**
 * Combined Methods: update, updateWithResponse
 * Reason: These methods both update container properties, with the difference being whether a Response wrapper and RequestContext are used. Wrapping them provides a single method for both scenarios, reducing confusion and API surface area.
 * 
 * Comment: Updates container properties as specified in the request body. If a RequestContext is provided, returns the full Response; otherwise, returns the BlobContainer directly.
 */
public Object updateContainer(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, BlobContainer blobContainer, RequestContext requestContext, boolean returnResponse) {
    if (returnResponse) {
        return this.serviceClient.updateWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer, requestContext);
    } else {
        return this.serviceClient.update(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer);
    }
}

/**
 * Combined Methods: delete, deleteWithResponse
 * Reason: Both methods delete a specified container, differing only in whether they return a Response and accept a RequestContext. Wrapping them provides a unified and convenient way to delete a container with or without additional context or response metadata.
 * 
 * Comment: Deletes the specified container under its account. If a RequestContext is provided, returns the full Response; otherwise, returns void.
 */
public Object deleteContainer(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, RequestContext requestContext, boolean returnResponse) {
    if (returnResponse) {
        return this.serviceClient.deleteWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, requestContext);
    } else {
        this.serviceClient.delete(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
        return null;
    }
}

/**
 * Combined Methods: get, getWithResponse
 * Reason: Both methods retrieve container properties, with the difference being whether a Response wrapper and RequestContext are used. Wrapping them provides a single method for both scenarios, improving usability.
 * 
 * Comment: Gets properties of a specified container. If a RequestContext is provided, returns the full Response; otherwise, returns the BlobContainer directly.
 */
public Object getContainer(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, RequestContext requestContext, boolean returnResponse) {
    if (returnResponse) {
        return this.serviceClient.getWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, requestContext);
    } else {
        return this.serviceClient.get(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
    }
}

/**
 * Combined Methods: list, listWithResponse
 * Reason: Both methods list containers, with the difference being whether a Response wrapper and additional filtering/paging parameters are used. Wrapping them provides a single, convenient entry point for listing containers with or without advanced options.
 * 
 * Comment: Lists all containers under the specified account. If advanced options are provided, returns the full Response; otherwise, returns the ListContainerItems directly.
 */
public Object listContainers(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String maxpagesize, String filter, ListContainersInclude include, RequestContext requestContext, boolean returnResponse) {
    if (returnResponse) {
        return this.serviceClient.listWithResponse(subscriptionId, resourceGroupName, accountName, apiVersion, maxpagesize, filter, include, requestContext);
    } else {
        return this.serviceClient.list(subscriptionId, resourceGroupName, accountName, apiVersion);
    }
}

/**
 * Combined Methods: clearLegalHold, clearLegalHoldWithResponse
 * Reason: Both methods clear legal hold tags, differing in whether they return a Response and accept a RequestContext. Wrapping them provides a unified and convenient way to clear legal holds with or without additional context or response metadata.
 * 
 * Comment: Clears legal hold tags on a container. If a RequestContext is provided, returns the full Response; otherwise, returns the LegalHold directly.
 */
public Object clearLegalHoldOnContainer(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, LegalHold legalHold, RequestContext requestContext, boolean returnResponse) {
    if (returnResponse) {
        return this.serviceClient.clearLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold, requestContext);
    } else {
        return this.serviceClient.clearLegalHold(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold);
    }
}

/**
 * Combined Methods: setLegalHold, setLegalHoldWithResponse
 * Reason: Both methods set legal hold tags, differing in whether they return a Response and accept a RequestContext. Wrapping them provides a unified and convenient way to set legal holds with or without additional context or response metadata.
 * 
 * Comment: Sets legal hold tags on a container. If a RequestContext is provided, returns the full Response; otherwise, returns the LegalHold directly.
 */
public Object setLegalHoldOnContainer(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, LegalHold legalHold, RequestContext requestContext, boolean returnResponse) {
    if (returnResponse) {
        return this.serviceClient.setLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold, requestContext);
    } else {
        return this.serviceClient.setLegalHold(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold);
    }
}

/**
 * Combined Methods: getImmutabilityPolicy, getImmutabilityPolicyWithResponse
 * Reason: Both methods retrieve the immutability policy, differing in whether they return a Response and accept a RequestContext. Wrapping them provides a single, convenient entry point for retrieving the immutability policy with or without additional context or response metadata.
 * 
 * Comment: Gets the existing immutability policy along with the corresponding ETag. If a RequestContext is provided, returns the full Response; otherwise, returns the ImmutabilityPolicy directly.
 */
public Object getImmutabilityPolicyForContainer(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, String ifMatch, RequestContext requestContext, boolean returnResponse) {
    if (returnResponse) {
        return this.serviceClient.getImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, ifMatch, requestContext);
    } else {
        return this.serviceClient.getImmutabilityPolicy(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
    }
}

/**
 * Combined Methods: deleteImmutabilityPolicy, deleteImmutabilityPolicyWithResponse
 * Reason: Both methods abort an unlocked immutability policy, differing in whether they return a Response and accept a RequestContext. Wrapping them provides a unified and convenient way to delete immutability policies with or without additional context or response metadata.
 * 
 * Comment: Aborts an unlocked immutability policy. If a RequestContext is provided, returns the full Response; otherwise, returns the ImmutabilityPolicy directly.
 */
public Object deleteImmutabilityPolicyForContainer(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, String ifMatch, RequestContext requestContext, boolean returnResponse) {
    if (returnResponse) {
        return this.serviceClient.deleteImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, ifMatch, requestContext);
    } else {
        return this.serviceClient.deleteImmutabilityPolicy(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, ifMatch);
    }
}

/**
 * Combined Methods: lockImmutabilityPolicy, lockImmutabilityPolicyWithResponse
 * Reason: Both methods lock the immutability policy, differing in whether they return a Response and accept a RequestContext. Wrapping them provides a unified and convenient way to lock immutability policies with or without additional context or response metadata.
 * 
 * Comment: Sets the ImmutabilityPolicy to Locked state. If a RequestContext is provided, returns the full Response; otherwise, returns the ImmutabilityPolicy directly.
 */
public Object lockImmutabilityPolicyForContainer(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, String ifMatch, RequestContext requestContext, boolean returnResponse) {
    if (returnResponse) {
        return this.serviceClient.lockImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, ifMatch, requestContext);
    } else {
        return this.serviceClient.lockImmutabilityPolicy(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, ifMatch);
    }
}

/**
 * Combined Methods: createOrUpdateImmutabilityPolicy, createOrUpdateImmutabilityPolicyWithResponse
 * Reason: Both methods create or update an unlocked immutability policy, differing in whether they return a Response and accept a RequestContext. Wrapping them provides a unified and convenient way to create or update immutability policies with or without additional context or response metadata.
 * 
 * Comment: Creates or updates an unlocked immutability policy. If a RequestContext is provided, returns the full Response; otherwise, returns the ImmutabilityPolicy directly.
 */
public Object createOrUpdateImmutabilityPolicyForContainer(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, String ifMatch, ImmutabilityPolicy parameters, RequestContext requestContext, boolean returnResponse) {
    if (returnResponse) {
        return this.serviceClient.createOrUpdateImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, ifMatch, parameters, requestContext);
    } else {
        return this.serviceClient.createOrUpdateImmutabilityPolicy(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
    }
}

/**
 * Combined Methods: extendImmutabilityPolicy, extendImmutabilityPolicyWithResponse
 * Reason: Both methods extend the immutability period, differing in whether they return a Response and accept a RequestContext. Wrapping them provides a unified and convenient way to extend immutability policies with or without additional context or response metadata.
 * 
 * Comment: Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. If a RequestContext is provided, returns the full Response; otherwise, returns the ImmutabilityPolicy directly.
 */
public Object extendImmutabilityPolicyForContainer(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, String ifMatch, ImmutabilityPolicy parameters, RequestContext requestContext, boolean returnResponse) {
    if (returnResponse) {
        return this.serviceClient.extendImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, ifMatch, parameters, requestContext);
    } else {
        return this.serviceClient.extendImmutabilityPolicy(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, ifMatch);
    }
}