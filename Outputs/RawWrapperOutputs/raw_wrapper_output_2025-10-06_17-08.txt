Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-06_17-08


```
/**
 * Combined Methods: create, createWithResponse
 * Reason: Both methods create a new container with the same parameters, differing only in whether they return a Response<T> or just T. Wrapping them with an options parameter pattern provides a single entry point for creation, improving discoverability and reducing overload clutter.
 * 
 * Comment: Creates a new container under the specified account using the provided options. Returns the created BlobContainer.
 */
public BlobContainer createContainer(CreateContainerOptions options) {
    return this.serviceClient.create(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getBlobContainer()
    );
}

/**
 * Combined Methods: createWithResponse
 * Reason: Provides a maximal overload for container creation using the options parameter pattern and supporting RequestContext, following the guidelines for complex service methods.
 * 
 * Comment: Creates a new container under the specified account using the provided options and request context. Returns the full HTTP response.
 */
public Response<BlobContainer> createContainerWithResponse(CreateContainerOptions options, RequestContext requestContext) {
    return this.serviceClient.createWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getBlobContainer(),
        requestContext
    );
}

/**
 * Combined Methods: update, updateWithResponse
 * Reason: Both methods update container properties, differing only by return type. Wrapping with an options parameter pattern simplifies usage and aligns with guidelines for complex methods.
 * 
 * Comment: Updates container properties as specified in the options. Returns the updated BlobContainer.
 */
public BlobContainer updateContainer(UpdateContainerOptions options) {
    return this.serviceClient.update(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getBlobContainer()
    );
}

/**
 * Combined Methods: updateWithResponse
 * Reason: Provides a maximal overload for updating container properties using the options parameter pattern and supporting RequestContext.
 * 
 * Comment: Updates container properties as specified in the options and request context. Returns the full HTTP response.
 */
public Response<BlobContainer> updateContainerWithResponse(UpdateContainerOptions options, RequestContext requestContext) {
    return this.serviceClient.updateWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getBlobContainer(),
        requestContext
    );
}

/**
 * Combined Methods: get, getWithResponse
 * Reason: Both methods retrieve container properties with the same parameters, differing only in return type. Wrapping with an options parameter pattern improves usability and consistency.
 * 
 * Comment: Gets properties of a specified container using the provided options.
 */
public BlobContainer getContainer(GetContainerOptions options) {
    return this.serviceClient.get(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion()
    );
}

/**
 * Combined Methods: getWithResponse
 * Reason: Provides a maximal overload for retrieving container properties using the options parameter pattern and supporting RequestContext.
 * 
 * Comment: Gets properties of a specified container using the provided options and request context. Returns the full HTTP response.
 */
public Response<BlobContainer> getContainerWithResponse(GetContainerOptions options, RequestContext requestContext) {
    return this.serviceClient.getWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        requestContext
    );
}

/**
 * Combined Methods: setLegalHold, setLegalHoldWithResponse
 * Reason: Both methods set legal hold tags, differing only by return type. Wrapping with an options parameter pattern streamlines the API and follows the options pattern for complex inputs.
 * 
 * Comment: Sets legal hold tags on a container using the provided options.
 */
public LegalHold setLegalHold(SetLegalHoldOptions options) {
    return this.serviceClient.setLegalHold(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getLegalHold()
    );
}

/**
 * Combined Methods: setLegalHoldWithResponse
 * Reason: Provides a maximal overload for setting legal hold tags using the options parameter pattern and supporting RequestContext.
 * 
 * Comment: Sets legal hold tags on a container using the provided options and request context. Returns the full HTTP response.
 */
public Response<LegalHold> setLegalHoldWithResponse(SetLegalHoldOptions options, RequestContext requestContext) {
    return this.serviceClient.setLegalHoldWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getLegalHold(),
        requestContext
    );
}

/**
 * Combined Methods: clearLegalHold, clearLegalHoldWithResponse
 * Reason: Both methods clear legal hold tags, differing only by return type. Wrapping with an options parameter pattern improves developer experience and consistency.
 * 
 * Comment: Clears legal hold tags on a container using the provided options.
 */
public LegalHold clearLegalHold(ClearLegalHoldOptions options) {
    return this.serviceClient.clearLegalHold(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getLegalHold()
    );
}

/**
 * Combined Methods: clearLegalHoldWithResponse
 * Reason: Provides a maximal overload for clearing legal hold tags using the options parameter pattern and supporting RequestContext.
 * 
 * Comment: Clears legal hold tags on a container using the provided options and request context. Returns the full HTTP response.
 */
public Response<LegalHold> clearLegalHoldWithResponse(ClearLegalHoldOptions options, RequestContext requestContext) {
    return this.serviceClient.clearLegalHoldWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getLegalHold(),
        requestContext
    );
}
```