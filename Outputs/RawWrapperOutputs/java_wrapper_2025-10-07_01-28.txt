Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-07_01-28


// Wrapper for setLegalHold and setLegalHoldWithResponse
// Reason: Both methods perform the same operation (setting legal hold tags) with and without a RequestContext. 
// This wrapper provides a single entry point with sensible defaults and input validation, improving developer experience and aligning with the options pattern guideline.

public LegalHold setLegalHold(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    LegalHold legalHold,
    RequestContext requestContext,
    boolean withResponse
) {
    if (subscriptionId == null || subscriptionId.isEmpty()) {
        throw new IllegalArgumentException("subscriptionId cannot be null or empty");
    }
    if (resourceGroupName == null || resourceGroupName.isEmpty()) {
        throw new IllegalArgumentException("resourceGroupName cannot be null or empty");
    }
    if (accountName == null || accountName.isEmpty()) {
        throw new IllegalArgumentException("accountName cannot be null or empty");
    }
    if (containerName == null || containerName.isEmpty()) {
        throw new IllegalArgumentException("containerName cannot be null or empty");
    }
    if (apiVersion == null || apiVersion.isEmpty()) {
        throw new IllegalArgumentException("apiVersion cannot be null or empty");
    }
    if (legalHold == null) {
        throw new IllegalArgumentException("legalHold cannot be null");
    }

    if (withResponse) {
        Response<LegalHold> response = this.setLegalHoldWithResponse(
            subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold,
            requestContext != null ? requestContext : new RequestContext()
        );
        return response.getValue();
    } else {
        return this.setLegalHold(
            subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold
        );
    }
}

// Wrapper for clearLegalHold and clearLegalHoldWithResponse
// Reason: Both methods clear legal hold tags, with and without a RequestContext. This wrapper unifies usage and validates input.

public LegalHold clearLegalHold(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    LegalHold legalHold,
    RequestContext requestContext,
    boolean withResponse
) {
    if (subscriptionId == null || subscriptionId.isEmpty()) {
        throw new IllegalArgumentException("subscriptionId cannot be null or empty");
    }
    if (resourceGroupName == null || resourceGroupName.isEmpty()) {
        throw new IllegalArgumentException("resourceGroupName cannot be null or empty");
    }
    if (accountName == null || accountName.isEmpty()) {
        throw new IllegalArgumentException("accountName cannot be null or empty");
    }
    if (containerName == null || containerName.isEmpty()) {
        throw new IllegalArgumentException("containerName cannot be null or empty");
    }
    if (apiVersion == null || apiVersion.isEmpty()) {
        throw new IllegalArgumentException("apiVersion cannot be null or empty");
    }
    if (legalHold == null) {
        throw new IllegalArgumentException("legalHold cannot be null");
    }

    if (withResponse) {
        Response<LegalHold> response = this.clearLegalHoldWithResponse(
            subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold,
            requestContext != null ? requestContext : new RequestContext()
        );
        return response.getValue();
    } else {
        return this.clearLegalHold(
            subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold
        );
    }
}

// Wrapper for create, createWithResponse, update, updateWithResponse, get, getWithResponse
// Reason: These methods perform similar CRUD operations on BlobContainer with and without RequestContext and with/without Response<T>.
// This wrapper provides a unified, validated entry point for these operations.

public BlobContainer manageContainer(
    String operation, // "create", "update", "get"
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    BlobContainer blobContainer, // required for create/update, ignored for get
    RequestContext requestContext,
    boolean withResponse
) {
    if (subscriptionId == null || subscriptionId.isEmpty()) {
        throw new IllegalArgumentException("subscriptionId cannot be null or empty");
    }
    if (resourceGroupName == null || resourceGroupName.isEmpty()) {
        throw new IllegalArgumentException("resourceGroupName cannot be null or empty");
    }
    if (accountName == null || accountName.isEmpty()) {
        throw new IllegalArgumentException("accountName cannot be null or empty");
    }
    if (containerName == null || containerName.isEmpty()) {
        throw new IllegalArgumentException("containerName cannot be null or empty");
    }
    if (apiVersion == null || apiVersion.isEmpty()) {
        throw new IllegalArgumentException("apiVersion cannot be null or empty");
    }
    if ((operation.equals("create") || operation.equals("update")) && blobContainer == null) {
        throw new IllegalArgumentException("blobContainer cannot be null for create or update operations");
    }

    switch (operation) {
        case "create":
            if (withResponse) {
                Response<BlobContainer> response = this.createWithResponse(
                    subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer,
                    requestContext != null ? requestContext : new RequestContext()
                );
                return response.getValue();
            } else {
                return this.create(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer);
            }
        case "update":
            if (withResponse) {
                Response<BlobContainer> response = this.updateWithResponse(
                    subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer,
                    requestContext != null ? requestContext : new RequestContext()
                );
                return response.getValue();
            } else {
                return this.update(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer);
            }
        case "get":
            if (withResponse) {
                Response<BlobContainer> response = this.getWithResponse(
                    subscriptionId, resourceGroupName, accountName, containerName, apiVersion,
                    requestContext != null ? requestContext : new RequestContext()
                );
                return response.getValue();
            } else {
                return this.get(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
            }
        default:
            throw new IllegalArgumentException("Unsupported operation: " + operation);
    }
}