Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-07_11-55


/**
 * Combined Methods: create, createWithResponse
 * Reason: Both methods create a new container and differ only by whether they return a Response wrapper and accept a RequestContext. Wrapping them provides a single entry point for container creation with or without context, improving discoverability and reducing overload confusion.
 * 
 * Comment: Creates a new container under the specified account. If a RequestContext is provided, returns a Response<BlobContainer>; otherwise, returns BlobContainer directly.
 */
public Object createContainer(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, BlobContainer blobContainer, RequestContext... requestContext) {
    if (requestContext != null && requestContext.length > 0 && requestContext[0] != null) {
        return this.serviceClient.createWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer, requestContext[0]);
    } else {
        return this.serviceClient.create(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer);
    }
}

/**
 * Combined Methods: update, updateWithResponse
 * Reason: Both methods update container properties and differ only by whether they return a Response wrapper and accept a RequestContext. Wrapping them provides a unified update method, simplifying the API surface.
 * 
 * Comment: Updates container properties as specified in the request body. If a RequestContext is provided, returns a Response<BlobContainer>; otherwise, returns BlobContainer directly.
 */
public Object updateContainer(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, BlobContainer blobContainer, RequestContext... requestContext) {
    if (requestContext != null && requestContext.length > 0 && requestContext[0] != null) {
        return this.serviceClient.updateWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer, requestContext[0]);
    } else {
        return this.serviceClient.update(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer);
    }
}

/**
 * Combined Methods: delete, deleteWithResponse
 * Reason: Both methods delete a specified container and differ only by whether they return a Response wrapper and accept a RequestContext. Wrapping them provides a single entry point for deletion with or without context, improving usability.
 * 
 * Comment: Deletes the specified container under its account. If a RequestContext is provided, returns a Response<Void>; otherwise, returns void.
 */
public Object deleteContainer(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, RequestContext... requestContext) {
    if (requestContext != null && requestContext.length > 0 && requestContext[0] != null) {
        return this.serviceClient.deleteWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, requestContext[0]);
    } else {
        this.serviceClient.delete(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
        return null;
    }
}

/**
 * Combined Methods: get, getWithResponse
 * Reason: Both methods get properties of a specified container and differ only by whether they return a Response wrapper and accept a RequestContext. Wrapping them provides a unified getter, reducing overload confusion.
 * 
 * Comment: Gets properties of a specified container. If a RequestContext is provided, returns a Response<BlobContainer>; otherwise, returns BlobContainer directly.
 */
public Object getContainer(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, RequestContext... requestContext) {
    if (requestContext != null && requestContext.length > 0 && requestContext[0] != null) {
        return this.serviceClient.getWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, requestContext[0]);
    } else {
        return this.serviceClient.get(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
    }
}

/**
 * Combined Methods: list, listWithResponse
 * Reason: Both methods list containers but differ by the presence of additional filtering and context parameters and by whether they return a Response wrapper. Wrapping them provides a single entry point for listing containers with or without advanced options.
 * 
 * Comment: Lists all containers. If additional parameters and a RequestContext are provided, returns a Response<ListContainerItems>; otherwise, returns ListContainerItems directly.
 */
public Object listContainers(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String maxpagesize, String filter, ListContainersInclude include, RequestContext... requestContext) {
    if ((maxpagesize != null || filter != null || include != null) && requestContext != null && requestContext.length > 0 && requestContext[0] != null) {
        return this.serviceClient.listWithResponse(subscriptionId, resourceGroupName, accountName, apiVersion, maxpagesize, filter, include, requestContext[0]);
    } else {
        return this.serviceClient.list(subscriptionId, resourceGroupName, accountName, apiVersion);
    }
}

/**
 * Combined Methods: clearLegalHold, clearLegalHoldWithResponse
 * Reason: Both methods clear legal hold tags and differ only by whether they return a Response wrapper and accept a RequestContext. Wrapping them provides a single entry point for clearing legal holds, improving convenience.
 * 
 * Comment: Clears legal hold tags. If a RequestContext is provided, returns a Response<LegalHold>; otherwise, returns LegalHold directly.
 */
public Object clearContainerLegalHold(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, LegalHold legalHold, RequestContext... requestContext) {
    if (requestContext != null && requestContext.length > 0 && requestContext[0] != null) {
        return this.serviceClient.clearLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold, requestContext[0]);
    } else {
        return this.serviceClient.clearLegalHold(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold);
    }
}

/**
 * Combined Methods: setLegalHold, setLegalHoldWithResponse
 * Reason: Both methods set legal hold tags and differ only by whether they return a Response wrapper and accept a RequestContext. Wrapping them provides a single entry point for setting legal holds, improving usability.
 * 
 * Comment: Sets legal hold tags. If a RequestContext is provided, returns a Response<LegalHold>; otherwise, returns LegalHold directly.
 */
public Object setContainerLegalHold(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, LegalHold legalHold, RequestContext... requestContext) {
    if (requestContext != null && requestContext.length > 0 && requestContext[0] != null) {
        return this.serviceClient.setLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold, requestContext[0]);
    } else {
        return this.serviceClient.setLegalHold(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold);
    }
}

/**
 * Combined Methods: getImmutabilityPolicy, getImmutabilityPolicyWithResponse
 * Reason: Both methods get the immutability policy and differ only by whether they return a Response wrapper and accept a RequestContext. Wrapping them provides a unified getter, reducing overload confusion.
 * 
 * Comment: Gets the existing immutability policy along with the corresponding ETag. If a RequestContext is provided, returns a Response<ImmutabilityPolicy>; otherwise, returns ImmutabilityPolicy directly.
 */
public Object getContainerImmutabilityPolicy(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, String ifMatch, RequestContext... requestContext) {
    if (requestContext != null && requestContext.length > 0 && requestContext[0] != null) {
        return this.serviceClient.getImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, ifMatch, requestContext[0]);
    } else {
        return this.serviceClient.getImmutabilityPolicy(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
    }
}

/**
 * Combined Methods: lockImmutabilityPolicy, lockImmutabilityPolicyWithResponse
 * Reason: Both methods lock the immutability policy and differ only by whether they return a Response wrapper and accept a RequestContext. Wrapping them provides a single entry point for locking, improving developer experience.
 * 
 * Comment: Sets the ImmutabilityPolicy to Locked state. If a RequestContext is provided, returns a Response<ImmutabilityPolicy>; otherwise, returns ImmutabilityPolicy directly.
 */
public Object lockContainerImmutabilityPolicy(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, String ifMatch, RequestContext... requestContext) {
    if (requestContext != null && requestContext.length > 0 && requestContext[0] != null) {
        return this.serviceClient.lockImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, ifMatch, requestContext[0]);
    } else {
        return this.serviceClient.lockImmutabilityPolicy(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, ifMatch);
    }
}

/**
 * Combined Methods: deleteImmutabilityPolicy, deleteImmutabilityPolicyWithResponse
 * Reason: Both methods delete the immutability policy and differ only by whether they return a Response wrapper and accept a RequestContext. Wrapping them provides a single entry point for deletion, improving usability.
 * 
 * Comment: Aborts an unlocked immutability policy. If a RequestContext is provided, returns a Response<ImmutabilityPolicy>; otherwise, returns ImmutabilityPolicy directly.
 */
public Object deleteContainerImmutabilityPolicy(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, String ifMatch, RequestContext... requestContext) {
    if (requestContext != null && requestContext.length > 0 && requestContext[0] != null) {
        return this.serviceClient.deleteImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, ifMatch, requestContext[0]);
    } else {
        return this.serviceClient.deleteImmutabilityPolicy(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, ifMatch);
    }
}

/**
 * Combined Methods: createOrUpdateImmutabilityPolicy, createOrUpdateImmutabilityPolicyWithResponse
 * Reason: Both methods create or update an unlocked immutability policy and differ only by whether they return a Response wrapper and accept a RequestContext. Wrapping them provides a single entry point for creation or update, improving usability.
 * 
 * Comment: Creates or updates an unlocked immutability policy. If a RequestContext is provided, returns a Response<ImmutabilityPolicy>; otherwise, returns ImmutabilityPolicy directly.
 */
public Object createOrUpdateContainerImmutabilityPolicy(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, String ifMatch, ImmutabilityPolicy parameters, RequestContext... requestContext) {
    if (requestContext != null && requestContext.length > 0 && requestContext[0] != null) {
        return this.serviceClient.createOrUpdateImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, ifMatch, parameters, requestContext[0]);
    } else {
        return this.serviceClient.createOrUpdateImmutabilityPolicy(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
    }
}

/**
 * Combined Methods: extendImmutabilityPolicy, extendImmutabilityPolicyWithResponse
 * Reason: Both methods extend the immutability policy and differ only by whether they return a Response wrapper and accept a RequestContext. Wrapping them provides a single entry point for extension, improving usability.
 * 
 * Comment: Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. If a RequestContext is provided, returns a Response<ImmutabilityPolicy>; otherwise, returns ImmutabilityPolicy directly.
 */
public Object extendContainerImmutabilityPolicy(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, String ifMatch, ImmutabilityPolicy parameters, RequestContext... requestContext) {
    if (requestContext != null && requestContext.length > 0 && requestContext[0] != null) {
        return this.serviceClient.extendImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, ifMatch, parameters, requestContext[0]);
    } else {
        return this.serviceClient.extendImmutabilityPolicy(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, ifMatch);
    }
}