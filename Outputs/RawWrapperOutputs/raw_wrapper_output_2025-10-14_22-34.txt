Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-14_22-34


/**
 * Returns the latest version of the specified dataset, or null if no versions exist.
 *
 * <p>This method simplifies the common workflow of retrieving the most recent version of a dataset,
 * eliminating the need for the developer to manually list, sort, or filter versions.</p>
 *
 * @param name The name of the dataset resource.
 * @return The latest {@link DatasetVersion} for the given dataset, or null if none exist.
 * @throws IllegalArgumentException thrown if parameters fail the validation.
 * @throws HttpResponseException thrown if the request is rejected by server.
 * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
 * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
 * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
 * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
 */
public DatasetVersion getLatestDatasetVersion(String name) {
    /*
      Combined Methods: listDatasetVersions
      Reason: Developers frequently need the latest version of a dataset. This wrapper hides the paging and manual selection logic, returning the latest version directly and reducing boilerplate.
    */
    PagedIterable<DatasetVersion> versions = listDatasetVersions(name);
    DatasetVersion latest = null;
    for (DatasetVersion version : versions) {
        if (latest == null || version.getVersion().compareTo(latest.getVersion()) > 0) {
            latest = version;
        }
    }
    return latest;
}

/**
 * Returns a map of dataset names to their latest version.
 *
 * <p>This method streamlines the process of retrieving the latest version for each dataset,
 * allowing developers to work directly with a convenient mapping, rather than iterating and filtering themselves.</p>
 *
 * @return A map where the key is the dataset name and the value is the latest {@link DatasetVersion}.
 * @throws HttpResponseException thrown if the request is rejected by server.
 * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
 * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
 * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
 * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
 */
public Map<String, DatasetVersion> listLatestDatasetVersionsAsMap() {
    /*
      Combined Methods: listLatestDatasetVersions
      Reason: Developers often need a quick lookup of the latest version per dataset. This wrapper provides a ready-to-use map, eliminating the need for manual iteration and mapping.
    */
    Map<String, DatasetVersion> result = new HashMap<>();
    for (DatasetVersion version : listLatestDatasetVersions()) {
        result.put(version.getName(), version);
    }
    return result;
}/**
 * Retrieves the latest version of a DatasetVersion by name.
 *
 * <p>This convenience method abstracts the process of determining the latest version of a dataset,
 * which typically requires listing all versions and selecting the most recent. This method assumes
 * that the service provides a way to determine or retrieve the latest version, or that the client
 * can infer it from available metadata. If not, this method can be extended to perform the necessary
 * logic using available APIs.</p>
 *
 * @param name The name of the dataset resource.
 * @return The latest version of the DatasetVersion, or null if none exist.
 */
public DatasetVersion getLatestDatasetVersion(String name) {
    /*
      Combined Methods: getDatasetVersion, (assumed) listDatasetVersions
      Reason: Developers commonly want to retrieve the latest version of a dataset without manually enumerating all versions,
      sorting, and selecting the latest. This wrapper encapsulates that workflow, reducing boilerplate and potential errors.
    */
    // Pseudocode: Replace with actual listDatasetVersions API if available
    List<DatasetVersion> versions = listDatasetVersions(name); // Assumed existing method
    if (versions == null || versions.isEmpty()) {
        return null;
    }
    // Assume versions are sorted by version string or timestamp descending; otherwise, sort here.
    DatasetVersion latest = versions.get(0);
    return getDatasetVersion(name, latest.getVersion());
}

/**
 * Retrieves a DatasetVersion by name and version, returning null if not found instead of throwing.
 *
 * <p>This convenience method wraps getDatasetVersion and handles ResourceNotFoundException,
 * returning null when the dataset version does not exist. This pattern is common in Java and
 * reduces the need for repetitive try/catch blocks in client code.</p>
 *
 * @param name The name of the dataset resource.
 * @param version The specific version id of the DatasetVersion to retrieve.
 * @return The DatasetVersion if found, or null if it does not exist.
 */
public DatasetVersion tryGetDatasetVersion(String name, String version) {
    /*
      Combined Methods: getDatasetVersion
      Reason: Developers often want to check for existence without handling exceptions for control flow.
      This wrapper provides a more idiomatic Java experience by returning null when not found.
    */
    try {
        return getDatasetVersion(name, version);
    } catch (ResourceNotFoundException ex) {
        return null;
    }
}

/**
 * Retrieves a DatasetVersion by name and version, with optional request options.
 *
 * <p>This overload provides a simplified way to call getDatasetVersionWithResponse without
 * requiring the caller to always construct a RequestOptions instance. If requestOptions is null,
 * sensible defaults are applied.</p>
 *
 * @param name The name of the dataset resource.
 * @param version The specific version id of the DatasetVersion to retrieve.
 * @param requestOptions Optional request options; may be null.
 * @return The DatasetVersion if found, or null if it does not exist.
 */
public DatasetVersion getDatasetVersionOrNull(String name, String version, RequestOptions requestOptions) {
    /*
      Combined Methods: getDatasetVersionWithResponse
      Reason: Simplifies the pattern of calling getDatasetVersionWithResponse and handling not-found cases,
      while allowing optional request customization. This reduces boilerplate for common "get or null" scenarios.
    */
    try {
        RequestOptions opts = (requestOptions != null) ? requestOptions : new RequestOptions();
        Response<BinaryData> response = getDatasetVersionWithResponse(name, version, opts);
        return response.getValue().toObject(DatasetVersion.class);
    } catch (ResourceNotFoundException ex) {
        return null;
    }
}/**
 * Creates or updates a dataset version from a file or folder path, automatically detecting the type.
 * <p>
 * If the provided path is a regular file, creates a FileDatasetVersion. If the path is a directory, creates a FolderDatasetVersion.
 * </p>
 * @param name The name of the dataset resource.
 * @param version The version id of the DatasetVersion to create or update.
 * @param path The file or folder path to upload.
 * @return The created or updated dataset version, as FileDatasetVersion or FolderDatasetVersion.
 * @throws IllegalArgumentException If the provided path is neither a file nor a directory.
 * @throws IOException If an I/O error occurs while accessing the file system.
 */
public Object createDatasetFromPath(String name, String version, Path path) throws IOException {
    /*
      Combined Methods: createDatasetWithFile, createDatasetWithFolder
      Reason: Developers often want to upload either a file or a folder as a dataset without worrying about which method to call. This wrapper detects the path type and delegates to the appropriate method, reducing boilerplate and improving clarity.
    */
    if (Files.isRegularFile(path)) {
        return createDatasetWithFile(name, version, path);
    } else if (Files.isDirectory(path)) {
        return createDatasetWithFolder(name, version, path);
    } else {
        throw new IllegalArgumentException("The provided path is neither a file nor a directory: " + path);
    }
}

/**
 * Creates or updates a dataset version from a file, using sensible defaults for optional parameters.
 * <p>
 * This overload allows developers to quickly upload a file as a dataset version with minimal required parameters.
 * </p>
 * @param name The name of the dataset resource.
 * @param version The version id of the DatasetVersion to create or update.
 * @param filePath The path to the file to upload.
 * @return The created FileDatasetVersion.
 * @throws IllegalArgumentException If the provided path is not a file.
 */
public FileDatasetVersion createDatasetFromFile(String name, String version, Path filePath) {
    /*
      Combined Methods: createDatasetWithFile
      Reason: Provides a more discoverable and idiomatic overload for uploading a file as a dataset, using a name that matches common developer intent and aligns with Azure SDK naming patterns.
    */
    return createDatasetWithFile(name, version, filePath);
}

/**
 * Creates or updates a dataset version from a folder, using sensible defaults for optional parameters.
 * <p>
 * This overload allows developers to quickly upload a folder as a dataset version with minimal required parameters.
 * </p>
 * @param name The name of the dataset resource.
 * @param version The version id of the DatasetVersion to create or update.
 * @param folderPath The path to the folder to upload.
 * @return The created FolderDatasetVersion.
 * @throws IllegalArgumentException If the provided path is not a directory.
 * @throws IOException If an I/O error occurs while accessing the file system.
 */
public FolderDatasetVersion createDatasetFromFolder(String name, String version, Path folderPath) throws IOException {
    /*
      Combined Methods: createDatasetWithFolder
      Reason: Provides a more discoverable and idiomatic overload for uploading a folder as a dataset, using a name that matches common developer intent and aligns with Azure SDK naming patterns.
    */
    return createDatasetWithFolder(name, version, folderPath);
}

/**
 * Creates or updates a dataset version from a file or folder path, with optional description and tags.
 * <p>
 * This method provides a high-level workflow for uploading a file or folder as a dataset version, allowing the caller to specify optional metadata.
 * </p>
 * @param name The name of the dataset resource.
 * @param version The version id of the DatasetVersion to create or update.
 * @param path The file or folder path to upload.
 * @param description Optional description for the dataset version.
 * @param tags Optional tags to associate with the dataset version.
 * @return The created or updated dataset version, as FileDatasetVersion or FolderDatasetVersion.
 * @throws IllegalArgumentException If the provided path is neither a file nor a directory.
 * @throws IOException If an I/O error occurs while accessing the file system.
 */
public Object createDatasetFromPath(String name, String version, Path path, String description, Map<String, String> tags) throws IOException {
    /*
      Combined Methods: createDatasetWithFile, createDatasetWithFolder, createOrUpdateDatasetVersionWithResponse
      Reason: Developers often want to upload a file or folder as a dataset and set optional metadata (description, tags) in a single call. This wrapper streamlines the workflow, reducing the need for manual construction of model objects and repetitive calls.
    */
    if (Files.isRegularFile(path)) {
        FileDatasetVersion datasetVersion = (FileDatasetVersion) createDatasetWithFile(name, version, path);
        if (description != null) {
            datasetVersion.setDescription(description);
        }
        if (tags != null) {
            datasetVersion.setTags(tags);
        }
        RequestOptions requestOptions = new RequestOptions();
        return createOrUpdateDatasetVersionWithResponse(
            name,
            version,
            BinaryData.fromObject(datasetVersion),
            requestOptions
        ).getValue().toObject(FileDatasetVersion.class);
    } else if (Files.isDirectory(path)) {
        FolderDatasetVersion datasetVersion = (FolderDatasetVersion) createDatasetWithFolder(name, version, path);
        if (description != null) {
            datasetVersion.setDescription(description);
        }
        if (tags != null) {
            datasetVersion.setTags(tags);
        }
        RequestOptions requestOptions = new RequestOptions();
        return createOrUpdateDatasetVersionWithResponse(
            name,
            version,
            BinaryData.fromObject(datasetVersion),
            requestOptions
        ).getValue().toObject(FolderDatasetVersion.class);
    } else {
        throw new IllegalArgumentException("The provided path is neither a file nor a directory: " + path);
    }
}/**
 * Starts or retrieves a pending upload for a dataset version with minimal required parameters.
 * <p>
 * This convenience method allows developers to initiate a pending upload by only specifying the dataset name, version, and required pending upload type.
 * Optional parameters such as connection name and pending upload ID are omitted for simplicity.
 * </p>
 */
public PendingUploadResponse startPendingUpload(String name, String version, PendingUploadType pendingUploadType) {
    /*
      Combined Methods: pendingUpload
      Reason: Simplifies the most common workflow by allowing users to start a pending upload with only the required parameters,
      reducing boilerplate for the typical case where optional fields are not needed.
    */
    PendingUploadRequest request = new PendingUploadRequest()
        .setPendingUploadType(pendingUploadType);
    return pendingUpload(name, version, request);
}

/**
 * Starts or retrieves a pending upload for a dataset version with optional connection name.
 * <p>
 * This convenience method allows developers to specify a connection name in addition to the required parameters,
 * streamlining the process for scenarios where a connection is needed.
 * </p>
 */
public PendingUploadResponse startPendingUpload(String name, String version, PendingUploadType pendingUploadType, String connectionName) {
    /*
      Combined Methods: pendingUpload
      Reason: Reduces friction for the common scenario where a connection name is specified, without requiring the user to construct the full request object.
    */
    PendingUploadRequest request = new PendingUploadRequest()
        .setPendingUploadType(pendingUploadType)
        .setConnectionName(connectionName);
    return pendingUpload(name, version, request);
}

/**
 * Starts or retrieves a pending upload for a dataset version with all possible parameters.
 * <p>
 * This convenience method allows developers to specify all parameters directly, including optional pending upload ID and connection name,
 * avoiding manual construction of the request object for advanced scenarios.
 * </p>
 */
public PendingUploadResponse startPendingUpload(String name, String version, PendingUploadType pendingUploadType, String connectionName, String pendingUploadId) {
    /*
      Combined Methods: pendingUpload
      Reason: Provides a streamlined way to specify all parameters for advanced scenarios, improving clarity and reducing manual setup.
    */
    PendingUploadRequest request = new PendingUploadRequest()
        .setPendingUploadType(pendingUploadType)
        .setConnectionName(connectionName)
        .setPendingUploadId(pendingUploadId);
    return pendingUpload(name, version, request);
}/**
 * Deletes all versions of a Dataset, handling non-existent versions gracefully.
 *
 * This method retrieves all available versions for the given Dataset name and deletes each one.
 * If a version is already deleted or not found, it continues deleting the rest.
 */
public void deleteAllDatasetVersions(String name) {
    /*
      Combined Methods: listDatasetVersions, deleteDatasetVersion
      Reason: Developers often want to delete all versions of a dataset as a single operation. This wrapper automates the repetitive workflow of enumerating all versions and deleting them individually, handling not-found errors gracefully to avoid interruption.
    */
    List<String> versions = listDatasetVersions(name); // Assumes this method exists and returns version strings
    for (String version : versions) {
        try {
            deleteDatasetVersion(name, version);
        } catch (ResourceNotFoundException ex) {
            // Ignore and continue; version already deleted
        }
    }
}

/**
 * Deletes a DatasetVersion if it exists, suppressing 'not found' errors.
 *
 * This method attempts to delete the specified DatasetVersion, but if it does not exist,
 * it will not throw an exception.
 *
 * @param name The name of the resource.
 * @param version The version of the DatasetVersion to delete.
 */
public void deleteDatasetVersionIfExists(String name, String version) {
    /*
      Combined Methods: deleteDatasetVersion
      Reason: Developers may want to ensure a dataset version is deleted without having to handle 'not found' exceptions. This wrapper eliminates boilerplate try/catch for common idempotent delete scenarios.
    */
    try {
        deleteDatasetVersion(name, version);
    } catch (ResourceNotFoundException ex) {
        // Suppress exception if version does not exist
    }
}

/**
 * Deletes a DatasetVersion and returns true if the version was deleted, false if it did not exist.
 *
 * This method attempts to delete the specified DatasetVersion, returning a boolean to indicate
 * whether the deletion actually occurred.
 *
 * @param name The name of the resource.
 * @param version The version of the DatasetVersion to delete.
 * @return true if the version was deleted, false if it did not exist.
 */
public boolean deleteDatasetVersionIfPresent(String name, String version) {
    /*
      Combined Methods: deleteDatasetVersion
      Reason: Provides a simple, intent-revealing API for idempotent deletes, allowing developers to check if a version was actually present and deleted, rather than handling exceptions.
    */
    try {
        deleteDatasetVersion(name, version);
        return true;
    } catch (ResourceNotFoundException ex) {
        return false;
    }
}/**
 * Creates or updates a DatasetVersion with the specified name and version, using only the required parameters.
 * <p>
 * This convenience method streamlines the creation or update of a DatasetVersion by requiring only the most essential parameters:
 * <ul>
 *   <li>name (dataset name)</li>
 *   <li>version (dataset version)</li>
 *   <li>type (uri_file or uri_folder)</li>
 *   <li>dataUri (location of the data)</li>
 * </ul>
 * Optional parameters (description, tags, connectionName, isReference, etc.) are omitted for simplicity.
 * </p>
 * <p>
 * Use this method for the most common scenario where only the minimal information is needed to create or update a DatasetVersion.
 * </p>
 *
 * @param name The name of the dataset.
 * @param version The version identifier.
 * @param type The type of the dataset version ("uri_file" or "uri_folder").
 * @param dataUri The URI to the data.
 * @return The created or updated DatasetVersion.
 */
public DatasetVersion createOrUpdateDatasetVersion(String name, String version, String type, String dataUri) {
    /*
      Combined Methods: createOrUpdateDatasetVersion(String name, String version, DatasetVersion datasetVersion)
      Reason: This wrapper simplifies the creation/update workflow for the most common case by requiring only the minimal set of required parameters, reducing boilerplate and cognitive load for developers who do not need to specify optional fields.
    */
    DatasetVersion datasetVersion = new DatasetVersion()
        .setName(name)
        .setVersion(version)
        .setType(type)
        .setDataUri(dataUri);
    return createOrUpdateDatasetVersion(name, version, datasetVersion);
}

/**
 * Creates or updates a DatasetVersion with all commonly-used parameters, including optional description and tags.
 * <p>
 * This convenience method allows developers to specify the most frequently-used parameters for a DatasetVersion, including:
 * <ul>
 *   <li>name (dataset name)</li>
 *   <li>version (dataset version)</li>
 *   <li>type (uri_file or uri_folder)</li>
 *   <li>dataUri (location of the data)</li>
 *   <li>description (optional)</li>
 *   <li>tags (optional)</li>
 * </ul>
 * </p>
 * <p>
 * Use this method when you want to set a description or tags in addition to the required fields.
 * </p>
 *
 * @param name The name of the dataset.
 * @param version The version identifier.
 * @param type The type of the dataset version ("uri_file" or "uri_folder").
 * @param dataUri The URI to the data.
 * @param description The description for the dataset version (optional).
 * @param tags The tags for the dataset version (optional).
 * @return The created or updated DatasetVersion.
 */
public DatasetVersion createOrUpdateDatasetVersion(
    String name,
    String version,
    String type,
    String dataUri,
    String description,
    Map<String, String> tags
) {
    /*
      Combined Methods: createOrUpdateDatasetVersion(String name, String version, DatasetVersion datasetVersion)
      Reason: This wrapper targets the common scenario where developers want to specify a description and tags, reducing the need to manually construct and populate a DatasetVersion model for these frequent use cases.
    */
    DatasetVersion datasetVersion = new DatasetVersion()
        .setName(name)
        .setVersion(version)
        .setType(type)
        .setDataUri(dataUri)
        .setDescription(description)
        .setTags(tags);
    return createOrUpdateDatasetVersion(name, version, datasetVersion);
}/**
 * Obtains a SAS credential and blob URI for a dataset version, returning a strongly-typed result.
 * <p>
 * This method simplifies the process of retrieving the storage access credential and blob URI for a given dataset version,
 * handling request options, deserialization, and error propagation. It is intended for the common case where only the
 * resource name and version are needed, and the developer wants a typed result.
 * </p>
 */
public AssetCredentialResult getDatasetVersionStorageCredential(String datasetName, String versionId) {
    /*
      Combined Methods: getCredentialsWithResponse, deserialization logic from getCredentials
      Reason: Developers commonly want to retrieve a SAS credential and blob URI for a dataset version as a strongly-typed object,
      without managing request options or manual deserialization. This wrapper streamlines the workflow, reduces boilerplate,
      and provides a clear, intent-driven API for the most common scenario.
    */
    RequestOptions requestOptions = new RequestOptions();
    Response<BinaryData> response = getCredentialsWithResponse(datasetName, versionId, requestOptions);
    return response.getValue().toObject(AssetCredentialResult.class);
}

/**
 * Obtains a SAS credential and blob URI for a dataset version, returning the strongly-typed result and full HTTP response.
 * <p>
 * This method is intended for advanced scenarios where the developer needs access to HTTP response metadata (such as status code or headers)
 * in addition to the deserialized credential result.
 * </p>
 */
public Response<AssetCredentialResult> getDatasetVersionStorageCredentialWithResponse(String datasetName, String versionId, RequestOptions requestOptions) {
    /*
      Combined Methods: getCredentialsWithResponse, deserialization logic from getCredentials
      Reason: Developers may need both the strongly-typed credential result and HTTP response metadata (headers, status, etc.).
      This wrapper provides a clear, intent-driven API for this advanced scenario, reducing the need for manual deserialization.
    */
    Response<BinaryData> response = getCredentialsWithResponse(datasetName, versionId, requestOptions);
    AssetCredentialResult result = response.getValue().toObject(AssetCredentialResult.class);
    return new SimpleResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), result);
}