Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-09-24_20-17


// Wrapper for setLegalHold and setLegalHoldWithResponse
// Reason: Both methods perform the same operation, differing only in whether they return a Response<T> or just T, and whether they accept a RequestContext. 
// This wrapper provides a single entry point that allows the user to specify if they want the full response and/or provide a RequestContext, improving convenience and reducing overload confusion.

public LegalHold setLegalHold(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    LegalHold legalHold,
    RequestContext requestContext,
    boolean withResponse) {

    if (subscriptionId == null || subscriptionId.isEmpty()) {
        throw new IllegalArgumentException("subscriptionId cannot be null or empty");
    }
    if (resourceGroupName == null || resourceGroupName.isEmpty()) {
        throw new IllegalArgumentException("resourceGroupName cannot be null or empty");
    }
    if (accountName == null || accountName.isEmpty()) {
        throw new IllegalArgumentException("accountName cannot be null or empty");
    }
    if (containerName == null || containerName.isEmpty()) {
        throw new IllegalArgumentException("containerName cannot be null or empty");
    }
    if (apiVersion == null || apiVersion.isEmpty()) {
        throw new IllegalArgumentException("apiVersion cannot be null or empty");
    }
    if (legalHold == null) {
        throw new IllegalArgumentException("legalHold cannot be null");
    }

    if (withResponse) {
        Response<LegalHold> response = setLegalHoldWithResponse(
            subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold, requestContext);
        return response.getValue();
    } else {
        return setLegalHold(
            subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold);
    }
}

// Wrapper for clearLegalHold and clearLegalHoldWithResponse
// Reason: Both methods clear legal hold tags, differing only in whether they return a Response<T> or just T, and whether they accept a RequestContext.
// This wrapper unifies the entry point for clearing legal hold tags.

public LegalHold clearLegalHold(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    LegalHold legalHold,
    RequestContext requestContext,
    boolean withResponse) {

    if (subscriptionId == null || subscriptionId.isEmpty()) {
        throw new IllegalArgumentException("subscriptionId cannot be null or empty");
    }
    if (resourceGroupName == null || resourceGroupName.isEmpty()) {
        throw new IllegalArgumentException("resourceGroupName cannot be null or empty");
    }
    if (accountName == null || accountName.isEmpty()) {
        throw new IllegalArgumentException("accountName cannot be null or empty");
    }
    if (containerName == null || containerName.isEmpty()) {
        throw new IllegalArgumentException("containerName cannot be null or empty");
    }
    if (apiVersion == null || apiVersion.isEmpty()) {
        throw new IllegalArgumentException("apiVersion cannot be null or empty");
    }
    if (legalHold == null) {
        throw new IllegalArgumentException("legalHold cannot be null");
    }

    if (withResponse) {
        Response<LegalHold> response = clearLegalHoldWithResponse(
            subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold, requestContext);
        return response.getValue();
    } else {
        return clearLegalHold(
            subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold);
    }
}

// Wrapper for create, createWithResponse, update, updateWithResponse, get, getWithResponse, delete, deleteWithResponse
// Reason: These methods follow a pattern of having both simple and maximal overloads (with/without RequestContext, with/without Response<T>).
// This wrapper allows the user to specify operation type ("create", "update", "get", "delete"), whether to use the maximal overload, and provides input validation.

public Object containerOperation(
    String operation,
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    BlobContainer blobContainer,
    RequestContext requestContext,
    boolean withResponse) {

    if (operation == null || operation.isEmpty()) {
        throw new IllegalArgumentException("operation cannot be null or empty");
    }
    if (subscriptionId == null || subscriptionId.isEmpty()) {
        throw new IllegalArgumentException("subscriptionId cannot be null or empty");
    }
    if (resourceGroupName == null || resourceGroupName.isEmpty()) {
        throw new IllegalArgumentException("resourceGroupName cannot be null or empty");
    }
    if (accountName == null || accountName.isEmpty()) {
        throw new IllegalArgumentException("accountName cannot be null or empty");
    }
    if (containerName == null || containerName.isEmpty()) {
        throw new IllegalArgumentException("containerName cannot be null or empty");
    }
    if (apiVersion == null || apiVersion.isEmpty()) {
        throw new IllegalArgumentException("apiVersion cannot be null or empty");
    }

    switch (operation.toLowerCase()) {
        case "create":
            if (blobContainer == null) {
                throw new IllegalArgumentException("blobContainer cannot be null for create operation");
            }
            if (withResponse) {
                Response<BlobContainer> response = createWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer, requestContext);
                return response.getValue();
            } else {
                return create(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer);
            }
        case "update":
            if (blobContainer == null) {
                throw new IllegalArgumentException("blobContainer cannot be null for update operation");
            }
            if (withResponse) {
                Response<BlobContainer> response = updateWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer, requestContext);
                return response.getValue();
            } else {
                return update(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer);
            }
        case "get":
            if (withResponse) {
                Response<BlobContainer> response = getWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, requestContext);
                return response.getValue();
            } else {
                return get(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
            }
        case "delete":
            if (withResponse) {
                Response<Void> response = deleteWithResponse(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, requestContext);
                return response;
            } else {
                delete(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
                return null;
            }
        default:
            throw new IllegalArgumentException("Unsupported operation: " + operation);
    }
}