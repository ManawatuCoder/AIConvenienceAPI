Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-19 16:04:13



================================================================================
Prompt 1: Method and Guideline Analysis
================================================================================

Context: You are analyzing the attached codegen methods from a client class, along with a list of Java Azure SDK Design Guidelines headers.

Your tasks:
1. Identify potential patterns across these methods that could be optimized to improve developer experience 
   (e.g. similar operations that could be combined, consistent parameter patterns, repetitive return processing, 
   avoiding low-level data types like byte streams).
2. From the list of guideline headers, select which guidelines are most relevant to the identified methods.

Instructions:
- Only consider patterns relevant to developer convenience. Ignore low-level protocol details.
- Evaluate whether there is any true convenience to be added.
- You will generate wrappers over multiple requests, so any methods you wish to wrap together should be grouped together in your response.
- Each group will be sent as its own prompt alongside the entire list of requested guidelines; Large grouping is acceptable, and can be desireable for reduced LLM costs.
- Duplicates methods through groups are undesireable; Coallescing of groups is preferred to duplicate methods.
- Duplicate guidelines are completely acceptable, it is desired that you have what you need to output quality.
- If no patterns are found, return only the string "no".
- If patterns are found, return a JSON object in the format:

[
  {
    "methods": ["foo", "bar", ...],
    "guidelines": ["Header 1", "Header 3", ...]
  },
  {
    "methods": ["foobar", "baz", ...],
    "guidelines": ["Header 2", "Header 3", ...]
  },
  ...
]

Notes:
- Do NOT include any explanations or commentary.
- Do not put generated code into a class. You must only return the names as requested.
- If there is no real convenience to be added, ignore all steps and return only the word "no".

Method names:
```
[listDatasetVersions(, pendingUploadWithResponse(, getDatasetVersion(, getDatasetVersionWithResponse(, pendingUpload(, createDatasetWithFile(, createDatasetWithFolder(, deleteDatasetVersionWithResponse(, createOrUpdateDatasetVersionWithResponse(, deleteDatasetVersion(, listLatestDatasetVersions(, createOrUpdateDatasetVersion(, getCredentialsWithResponse(, getCredentials(]
```

Guideline headers:
"""
Introduction
Design Principles
General Guidelines
Support for non-HTTP Protocols
Azure SDK API Design
Service Client
Sync Service Clients
Async Service Clients
Service Client Creation
Service Versions
Service Methods
Non-Service Methods
Cancellation
Return Types
Option Parameters
Parameter Validation
Methods Returning Collections (Paging)
Methods Invoking Long-Running Operations
Conditional Request Methods
Hierarchical Clients
Model Types
Enumerations
Using Azure Core Types
Using Primitive Types
Exceptions
Authentication
Namespaces
Example Namespaces
Support for Mocking
Maven
Service-Specific Common Libraries
Java 9 Modules
Versioning
Client Version Numbers
Dependencies
Native code
Documentation
General guidelines
Samples
Java API Best Practices
Naming Patterns

"""
--------------------------------------------------------------------------------

Step 1 Output:
[
  {
    "methods": [
      "getDatasetVersion",
      "getDatasetVersionWithResponse",
      "deleteDatasetVersion",
      "deleteDatasetVersionWithResponse",
      "createOrUpdateDatasetVersion",
      "createOrUpdateDatasetVersionWithResponse"
    ],
    "guidelines": [
      "Service Methods",
      "Return Types",
      "Option Parameters",
      "Parameter Validation",
      "Java API Best Practices",
      "Naming Patterns"
    ]
  },
  {
    "methods": [
      "listDatasetVersions",
      "listLatestDatasetVersions"
    ],
    "guidelines": [
      "Methods Returning Collections (Paging)",
      "Service Methods",
      "Return Types",
      "Java API Best Practices"
    ]
  },
  {
    "methods": [
      "pendingUpload",
      "pendingUploadWithResponse"
    ],
    "guidelines": [
      "Service Methods",
      "Return Types",
      "Option Parameters",
      "Java API Best Practices"
    ]
  },
  {
    "methods": [
      "createDatasetWithFile",
      "createDatasetWithFolder"
    ],
    "guidelines": [
      "Service Methods",
      "Return Types",
      "Parameter Validation",
      "Java API Best Practices"
    ]
  },
  {
    "methods": [
      "getCredentials",
      "getCredentialsWithResponse"
    ],
    "guidelines": [
      "Service Methods",
      "Return Types",
      "Option Parameters",
      "Authentication",
      "Java API Best Practices"
    ]
  }
]
================================================================================


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The following Java SDK methods were flagged as potential candidates for generating convenience wrappers. The accompanying design guidelines outline desired principles for improving developer experience.

Your task:
Your goal is to think like an SDK designer, not a refactorer.
Analyse the methods and guidelines to identify high-level developer goals or workflows that are currently too low-level or fragmented.

Follow these steps:
1. Understand developer intent:
- What real-world task or developer workflow does this SDK enable?
- What steps would a developer typically need to perform manually?
2. Identify friction points:
- Are there repetitive setup steps, parameter redundancies, or multi-call workflows that could be hidden or automated?
3. Design potential convenience wrappers that:
- Represent meaningful user tasks.
- Eliminate multiple low-level method calls or configuration steps.
- Provide sensible defaults or intelligent handling for common cases.
4. Reject shallow wrappers.
- Do NOT propose wrappers that only merge 2-3 existing methods, unless they significantly improve clarity or hide complex logic.
5.  Return the generated wrapper methods, along with comments stating which methods were wrapped, and the reason for wrapping.

Output format:
/**
 * {Brief JavaDoc summary of code.}
 */
public void exampleWrapper() {
    /*
      Combined Methods: methodOne, methodTwo, etc.
      Reason: Explain why this wrapper improves developer experience
    */
    // Code here
}


Extra Notes:
- Do NOT create any classes. Your output code should only be wrapper methods.
- Do NOT include any extra commentary, aside from that in the wrapper method comments.
- Make sure that the 'Combined Methods' and 'Reason' comments are in block comments inside of the method, NOT in the Javadocs comment.
- Preserve existing functionality of the combined methods.
- Quality over quantity. Avoid creating wrapper methods for the sake of it. All wrappers must be justified
- Output the code as raw text. Do NOT put it in a code block with backticks

Methods:
```

    /**
     * Get the specific version of the DatasetVersion.
     *
     * @param name The name of the resource.
     * @param version The specific version id of the DatasetVersion to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specific version of the DatasetVersion.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DatasetVersion getDatasetVersion(String name, String version) {
        // Generated convenience method for getDatasetVersionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDatasetVersionWithResponse(name, version, requestOptions).getValue().toObject(DatasetVersion.class);
    }


    /**
     * Get the specific version of the DatasetVersion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(uri_file/uri_folder) (Required)
     *     dataUri: String (Optional, Required on create)
     *     isReference: Boolean (Optional)
     *     connectionName: String (Optional)
     *     id: String (Optional)
     *     name: String (Required)
     *     version: String (Required)
     *     description: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param name The name of the resource.
     * @param version The specific version id of the DatasetVersion to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the specific version of the DatasetVersion along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDatasetVersionWithResponse(String name, String version,
        RequestOptions requestOptions) {
        return this.serviceClient.getDatasetVersionWithResponse(name, version, requestOptions);
    }



    /**
     * Delete the specific version of the DatasetVersion.
     *
     * @param name The name of the resource.
     * @param version The version of the DatasetVersion to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteDatasetVersion(String name, String version) {
        // Generated convenience method for deleteDatasetVersionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteDatasetVersionWithResponse(name, version, requestOptions).getValue();
    }


    /**
     * Delete the specific version of the DatasetVersion.
     *
     * @param name The name of the resource.
     * @param version The version of the DatasetVersion to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteDatasetVersionWithResponse(String name, String version, RequestOptions requestOptions) {
        return this.serviceClient.deleteDatasetVersionWithResponse(name, version, requestOptions);
    }



    /**
     * Create a new or update an existing DatasetVersion with the given version id.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(uri_file/uri_folder) (Required)
     *     dataUri: String (Optional, Required on create)
     *     isReference: Boolean (Optional)
     *     connectionName: String (Optional)
     *     id: String (Optional)
     *     name: String (Required)
     *     version: String (Required)
     *     description: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(uri_file/uri_folder) (Required)
     *     dataUri: String (Optional, Required on create)
     *     isReference: Boolean (Optional)
     *     connectionName: String (Optional)
     *     id: String (Optional)
     *     name: String (Required)
     *     version: String (Required)
     *     description: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param name The name of the resource.
     * @param version The specific version id of the DatasetVersion to create or update.
     * @param datasetVersion The DatasetVersion to create or update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return datasetVersion Definition along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateDatasetVersionWithResponse(String name, String version,
        BinaryData datasetVersion, RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateDatasetVersionWithResponse(name, version, datasetVersion,
            requestOptions);
    }



    /**
     * Get the specific version of the DatasetVersion.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(uri_file/uri_folder) (Required)
     *     dataUri: String (Optional, Required on create)
     *     isReference: Boolean (Optional)
     *     connectionName: String (Optional)
     *     id: String (Optional)
     *     name: String (Required)
     *     version: String (Required)
     *     description: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param name The name of the resource.
     * @param version The specific version id of the DatasetVersion to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the specific version of the DatasetVersion along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDatasetVersionWithResponse(String name, String version,
        RequestOptions requestOptions) {
        return this.serviceClient.getDatasetVersionWithResponse(name, version, requestOptions);
    }



    /**
     * Delete the specific version of the DatasetVersion.
     *
     * @param name The name of the resource.
     * @param version The version of the DatasetVersion to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteDatasetVersionWithResponse(String name, String version, RequestOptions requestOptions) {
        return this.serviceClient.deleteDatasetVersionWithResponse(name, version, requestOptions);
    }



    /**
     * Create a new or update an existing DatasetVersion with the given version id.
     *
     * @param name The name of the resource.
     * @param version The specific version id of the DatasetVersion to create or update.
     * @param datasetVersion The DatasetVersion to create or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return datasetVersion Definition.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DatasetVersion createOrUpdateDatasetVersion(String name, String version, DatasetVersion datasetVersion) {
        // Generated convenience method for createOrUpdateDatasetVersionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        JsonMergePatchHelper.getDatasetVersionAccessor().prepareModelForJsonMergePatch(datasetVersion, true);
        BinaryData datasetVersionInBinaryData = BinaryData.fromObject(datasetVersion);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        datasetVersionInBinaryData.getLength();
        JsonMergePatchHelper.getDatasetVersionAccessor().prepareModelForJsonMergePatch(datasetVersion, false);
        return createOrUpdateDatasetVersionWithResponse(name, version, datasetVersionInBinaryData, requestOptions)
            .getValue()
            .toObject(DatasetVersion.class);
    }
}

    /**
     * Create a new or update an existing DatasetVersion with the given version id.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(uri_file/uri_folder) (Required)
     *     dataUri: String (Optional, Required on create)
     *     isReference: Boolean (Optional)
     *     connectionName: String (Optional)
     *     id: String (Optional)
     *     name: String (Required)
     *     version: String (Required)
     *     description: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(uri_file/uri_folder) (Required)
     *     dataUri: String (Optional, Required on create)
     *     isReference: Boolean (Optional)
     *     connectionName: String (Optional)
     *     id: String (Optional)
     *     name: String (Required)
     *     version: String (Required)
     *     description: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param name The name of the resource.
     * @param version The specific version id of the DatasetVersion to create or update.
     * @param datasetVersion The DatasetVersion to create or update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return datasetVersion Definition along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateDatasetVersionWithResponse(String name, String version,
        BinaryData datasetVersion, RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateDatasetVersionWithResponse(name, version, datasetVersion,
            requestOptions);
    }



```
Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Naming Patterns
Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.
✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:
A class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.
⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().
✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.
✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.
⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.
⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case.

Java API Best Practices
This section introduces guidelines for fundamental Java development design decisions that are used throughout the Azure SDK for Java. For further guidance, consider reviewing presentations and documentation on Java API design best practices.

Parameter Validation
The service client will have methods that send requests to the service. These methods take two kinds of parameters: service parameters and client parameters. Service parameters are sent across the wire to the service as URL segments, query parameters, request header values, and request bodies (typically JSON or XML). Client parameters are used solely within the client library and are not sent to the service; examples are path parameters, Context or file paths. If, for example, a path parameter is not validated, it could result in sending a request to a malformed URL, which could prevent the service from having the opportunity to do validation on it.
✅ DO validate client parameters. This includes checks for null values for required path parameters, and checks for empty string values if a required path parameter declares a minLength greater than zero.
⛔️ DO NOT validate service parameters. This includes null checks, empty strings, and other common validating conditions. Let the service validate any request parameters.
✅ DO test the developer experience when invalid service parameters are passed in. Ensure clear error messages are generated by the service. If the developer experience is inadequate, work with the service team to correct the problem.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""

--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The following Java SDK methods were flagged as potential candidates for generating convenience wrappers. The accompanying design guidelines outline desired principles for improving developer experience.

Your task:
Your goal is to think like an SDK designer, not a refactorer.
Analyse the methods and guidelines to identify high-level developer goals or workflows that are currently too low-level or fragmented.

Follow these steps:
1. Understand developer intent:
- What real-world task or developer workflow does this SDK enable?
- What steps would a developer typically need to perform manually?
2. Identify friction points:
- Are there repetitive setup steps, parameter redundancies, or multi-call workflows that could be hidden or automated?
3. Design potential convenience wrappers that:
- Represent meaningful user tasks.
- Eliminate multiple low-level method calls or configuration steps.
- Provide sensible defaults or intelligent handling for common cases.
4. Reject shallow wrappers.
- Do NOT propose wrappers that only merge 2-3 existing methods, unless they significantly improve clarity or hide complex logic.
5.  Return the generated wrapper methods, along with comments stating which methods were wrapped, and the reason for wrapping.

Output format:
/**
 * {Brief JavaDoc summary of code.}
 */
public void exampleWrapper() {
    /*
      Combined Methods: methodOne, methodTwo, etc.
      Reason: Explain why this wrapper improves developer experience
    */
    // Code here
}


Extra Notes:
- Do NOT create any classes. Your output code should only be wrapper methods.
- Do NOT include any extra commentary, aside from that in the wrapper method comments.
- Make sure that the 'Combined Methods' and 'Reason' comments are in block comments inside of the method, NOT in the Javadocs comment.
- Preserve existing functionality of the combined methods.
- Quality over quantity. Avoid creating wrapper methods for the sake of it. All wrappers must be justified
- Output the code as raw text. Do NOT put it in a code block with backticks

Methods:
```

    /**
     * List all versions of the given DatasetVersion.
     *
     * @param name The name of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DatasetVersion items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DatasetVersion> listDatasetVersions(String name) {
        // Generated convenience method for listDatasetVersions
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listDatasetVersions(name, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(DatasetVersion.class));
    }



    /**
     * List the latest version of each DatasetVersion.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DatasetVersion items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DatasetVersion> listLatestDatasetVersions() {
        // Generated convenience method for listLatestDatasetVersions
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listLatestDatasetVersions(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(DatasetVersion.class));
    }



```
Design Guidelines:
"""
Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Methods Returning Collections (Paging)
Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable<T> or PagedFlux<T> (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.
✅ DO return PagedIterable<T> from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:
public final class ConfigurationClient {
    // synchronous API returning a PagedIterable of ConfigurationSetting instances
    public PagedIterable<ConfigurationSetting> listSettings(...) {
        ...
    }
}
PagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern <serviceName>PagedIterable or <operation>PagedFlux.
⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).
✅ DO return PagedFlux<T> (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux<T>, as it allows for consumers to retrieve response information in a consistent manner.
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
Consumers of this API can consume individual items by treating the response as a Flux<T>:
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
The consumer may process items page-by-page instead:
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists:
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
The PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.
✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package.

Java API Best Practices
This section introduces guidelines for fundamental Java development design decisions that are used throughout the Azure SDK for Java. For further guidance, consider reviewing presentations and documentation on Java API design best practices.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""

--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The following Java SDK methods were flagged as potential candidates for generating convenience wrappers. The accompanying design guidelines outline desired principles for improving developer experience.

Your task:
Your goal is to think like an SDK designer, not a refactorer.
Analyse the methods and guidelines to identify high-level developer goals or workflows that are currently too low-level or fragmented.

Follow these steps:
1. Understand developer intent:
- What real-world task or developer workflow does this SDK enable?
- What steps would a developer typically need to perform manually?
2. Identify friction points:
- Are there repetitive setup steps, parameter redundancies, or multi-call workflows that could be hidden or automated?
3. Design potential convenience wrappers that:
- Represent meaningful user tasks.
- Eliminate multiple low-level method calls or configuration steps.
- Provide sensible defaults or intelligent handling for common cases.
4. Reject shallow wrappers.
- Do NOT propose wrappers that only merge 2-3 existing methods, unless they significantly improve clarity or hide complex logic.
5.  Return the generated wrapper methods, along with comments stating which methods were wrapped, and the reason for wrapping.

Output format:
/**
 * {Brief JavaDoc summary of code.}
 */
public void exampleWrapper() {
    /*
      Combined Methods: methodOne, methodTwo, etc.
      Reason: Explain why this wrapper improves developer experience
    */
    // Code here
}


Extra Notes:
- Do NOT create any classes. Your output code should only be wrapper methods.
- Do NOT include any extra commentary, aside from that in the wrapper method comments.
- Make sure that the 'Combined Methods' and 'Reason' comments are in block comments inside of the method, NOT in the Javadocs comment.
- Preserve existing functionality of the combined methods.
- Quality over quantity. Avoid creating wrapper methods for the sake of it. All wrappers must be justified
- Output the code as raw text. Do NOT put it in a code block with backticks

Methods:
```

    /**
     * Start a new or get an existing pending upload of a dataset for a specific version.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     pendingUploadId: String (Optional)
     *     connectionName: String (Optional)
     *     pendingUploadType: String(None/BlobReference) (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     blobReference (Required): {
     *         blobUri: String (Required)
     *         storageAccountArmId: String (Required)
     *         credential (Required): {
     *             sasUri: String (Required)
     *             type: String (Required)
     *         }
     *     }
     *     pendingUploadId: String (Required)
     *     version: String (Optional)
     *     pendingUploadType: String(None/BlobReference) (Required)
     * }
     * }
     * </pre>
     *
     * @param name The name of the resource.
     * @param version The specific version id of the DatasetVersion to operate on.
     * @param pendingUploadRequest The pending upload request parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the response for a pending upload request along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> pendingUploadWithResponse(String name, String version, BinaryData pendingUploadRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.pendingUploadWithResponse(name, version, pendingUploadRequest, requestOptions);
    }



    /**
     * Start a new or get an existing pending upload of a dataset for a specific version.
     *
     * @param name The name of the resource.
     * @param version The specific version id of the DatasetVersion to operate on.
     * @param pendingUploadRequest The pending upload request parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the response for a pending upload request.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PendingUploadResponse pendingUpload(String name, String version, PendingUploadRequest pendingUploadRequest) {
        // Generated convenience method for pendingUploadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return pendingUploadWithResponse(name, version, BinaryData.fromObject(pendingUploadRequest), requestOptions)
            .getValue()
            .toObject(PendingUploadResponse.class);
    }


    /**
     * Start a new or get an existing pending upload of a dataset for a specific version.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     pendingUploadId: String (Optional)
     *     connectionName: String (Optional)
     *     pendingUploadType: String(None/BlobReference) (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     blobReference (Required): {
     *         blobUri: String (Required)
     *         storageAccountArmId: String (Required)
     *         credential (Required): {
     *             sasUri: String (Required)
     *             type: String (Required)
     *         }
     *     }
     *     pendingUploadId: String (Required)
     *     version: String (Optional)
     *     pendingUploadType: String(None/BlobReference) (Required)
     * }
     * }
     * </pre>
     *
     * @param name The name of the resource.
     * @param version The specific version id of the DatasetVersion to operate on.
     * @param pendingUploadRequest The pending upload request parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the response for a pending upload request along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> pendingUploadWithResponse(String name, String version, BinaryData pendingUploadRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.pendingUploadWithResponse(name, version, pendingUploadRequest, requestOptions);
    }



```
Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Java API Best Practices
This section introduces guidelines for fundamental Java development design decisions that are used throughout the Azure SDK for Java. For further guidance, consider reviewing presentations and documentation on Java API design best practices.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""

--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The following Java SDK methods were flagged as potential candidates for generating convenience wrappers. The accompanying design guidelines outline desired principles for improving developer experience.

Your task:
Your goal is to think like an SDK designer, not a refactorer.
Analyse the methods and guidelines to identify high-level developer goals or workflows that are currently too low-level or fragmented.

Follow these steps:
1. Understand developer intent:
- What real-world task or developer workflow does this SDK enable?
- What steps would a developer typically need to perform manually?
2. Identify friction points:
- Are there repetitive setup steps, parameter redundancies, or multi-call workflows that could be hidden or automated?
3. Design potential convenience wrappers that:
- Represent meaningful user tasks.
- Eliminate multiple low-level method calls or configuration steps.
- Provide sensible defaults or intelligent handling for common cases.
4. Reject shallow wrappers.
- Do NOT propose wrappers that only merge 2-3 existing methods, unless they significantly improve clarity or hide complex logic.
5.  Return the generated wrapper methods, along with comments stating which methods were wrapped, and the reason for wrapping.

Output format:
/**
 * {Brief JavaDoc summary of code.}
 */
public void exampleWrapper() {
    /*
      Combined Methods: methodOne, methodTwo, etc.
      Reason: Explain why this wrapper improves developer experience
    */
    // Code here
}


Extra Notes:
- Do NOT create any classes. Your output code should only be wrapper methods.
- Do NOT include any extra commentary, aside from that in the wrapper method comments.
- Make sure that the 'Combined Methods' and 'Reason' comments are in block comments inside of the method, NOT in the Javadocs comment.
- Preserve existing functionality of the combined methods.
- Quality over quantity. Avoid creating wrapper methods for the sake of it. All wrappers must be justified
- Output the code as raw text. Do NOT put it in a code block with backticks

Methods:
```

    /**
     * Creates a dataset from a folder.
     *
     * @param name The name of the resource.
     * @param version The specific version id of the DatasetVersion to create or replace.
     * @param filePath The path to the folder containing files to upload.
     * @return A FileDatasetVersion representing the created dataset.
     * @throws IllegalArgumentException If the provided path is not a file
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FileDatasetVersion createDatasetWithFile(String name, String version, Path filePath) {
        if (!Files.isRegularFile(filePath)) {
            throw logger
                .logExceptionAsError(new IllegalArgumentException("The provided path is not a file: " + filePath));
        }
        PendingUploadRequest body = new PendingUploadRequest();
        PendingUploadResponse pendingUploadResponse = this.pendingUpload(name, version, body);
        SasCredential credential = pendingUploadResponse.getBlobReference().getCredential();
        String blobUri = pendingUploadResponse.getBlobReference().getBlobUri();
        BlobClient blobClient = new BlobClientBuilder().endpoint(credential.getSasUri()).blobName(name).buildClient();
        blobClient.upload(BinaryData.fromFile(filePath));
        RequestOptions requestOptions = new RequestOptions();
        FileDatasetVersion datasetVersion = this
            .createOrUpdateDatasetVersionWithResponse(name, version,
                BinaryData.fromObject(new FileDatasetVersion().setDataUri(blobClient.getBlobUrl())), requestOptions)
            .getValue()
            .toObject(FileDatasetVersion.class);
        return datasetVersion;
    }


    /**
     * Start a new or get an existing pending upload of a dataset for a specific version.
     *
     * @param name The name of the resource.
     * @param version The specific version id of the DatasetVersion to operate on.
     * @param pendingUploadRequest The pending upload request parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the response for a pending upload request.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PendingUploadResponse pendingUpload(String name, String version, PendingUploadRequest pendingUploadRequest) {
        // Generated convenience method for pendingUploadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return pendingUploadWithResponse(name, version, BinaryData.fromObject(pendingUploadRequest), requestOptions)
            .getValue()
            .toObject(PendingUploadResponse.class);
    }


    /**
     * Create a new or update an existing DatasetVersion with the given version id.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(uri_file/uri_folder) (Required)
     *     dataUri: String (Optional, Required on create)
     *     isReference: Boolean (Optional)
     *     connectionName: String (Optional)
     *     id: String (Optional)
     *     name: String (Required)
     *     version: String (Required)
     *     description: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(uri_file/uri_folder) (Required)
     *     dataUri: String (Optional, Required on create)
     *     isReference: Boolean (Optional)
     *     connectionName: String (Optional)
     *     id: String (Optional)
     *     name: String (Required)
     *     version: String (Required)
     *     description: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param name The name of the resource.
     * @param version The specific version id of the DatasetVersion to create or update.
     * @param datasetVersion The DatasetVersion to create or update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return datasetVersion Definition along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateDatasetVersionWithResponse(String name, String version,
        BinaryData datasetVersion, RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateDatasetVersionWithResponse(name, version, datasetVersion,
            requestOptions);
    }



    /**
     * Creates a dataset from a folder.
     *
     * @param name The name of the resource.
     * @param version The specific version id of the DatasetVersion to create or replace.
     * @param folderPath The path to the folder containing files to upload.
     * @return A FolderDatasetVersion representing the created dataset.
     * @throws IllegalArgumentException If the provided path is not a directory.
     * @throws IOException if an I/ O error is thrown when accessing the starting file
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FolderDatasetVersion createDatasetWithFolder(String name, String version, Path folderPath)
        throws IOException {
        if (!Files.isDirectory(folderPath)) {
            throw logger
                .logExceptionAsError(new IllegalArgumentException("The provided path is not a folder: " + folderPath));
        }
        // Request a pending upload for the folder
        PendingUploadRequest request = new PendingUploadRequest();
        PendingUploadResponse pendingUploadResponse = this.pendingUpload(name, version, request);
        String blobContainerUri = pendingUploadResponse.getBlobReference().getBlobUri();
        SasCredential credential = pendingUploadResponse.getBlobReference().getCredential();
        String containerUrl = blobContainerUri.substring(0, blobContainerUri.lastIndexOf('/'));
        // Upload all files in the directory
        Files.walk(folderPath).filter(Files::isRegularFile).forEach(filePath -> {
            // Calculate relative path from the base folder
            String relativePath = folderPath.relativize(filePath).toString().replace('\\', '/');
            // Create blob client for each file
            BlobClient blobClient
                = new BlobClientBuilder().endpoint(credential.getSasUri()).blobName(relativePath).buildClient();
            // Upload the file
            blobClient.upload(BinaryData.fromFile(filePath), true);
        });
        // Create a FolderDatasetVersion with the container URL
        RequestOptions requestOptions = new RequestOptions();
        FolderDatasetVersion datasetVersion = this
            .createOrUpdateDatasetVersionWithResponse(name, version,
                BinaryData.fromObject(new FolderDatasetVersion().setDataUri(containerUrl)), requestOptions)
            .getValue()
            .toObject(FolderDatasetVersion.class);
        return datasetVersion;
    }


    /**
     * Start a new or get an existing pending upload of a dataset for a specific version.
     *
     * @param name The name of the resource.
     * @param version The specific version id of the DatasetVersion to operate on.
     * @param pendingUploadRequest The pending upload request parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the response for a pending upload request.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PendingUploadResponse pendingUpload(String name, String version, PendingUploadRequest pendingUploadRequest) {
        // Generated convenience method for pendingUploadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return pendingUploadWithResponse(name, version, BinaryData.fromObject(pendingUploadRequest), requestOptions)
            .getValue()
            .toObject(PendingUploadResponse.class);
    }


    /**
     * Create a new or update an existing DatasetVersion with the given version id.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(uri_file/uri_folder) (Required)
     *     dataUri: String (Optional, Required on create)
     *     isReference: Boolean (Optional)
     *     connectionName: String (Optional)
     *     id: String (Optional)
     *     name: String (Required)
     *     version: String (Required)
     *     description: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String(uri_file/uri_folder) (Required)
     *     dataUri: String (Optional, Required on create)
     *     isReference: Boolean (Optional)
     *     connectionName: String (Optional)
     *     id: String (Optional)
     *     name: String (Required)
     *     version: String (Required)
     *     description: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param name The name of the resource.
     * @param version The specific version id of the DatasetVersion to create or update.
     * @param datasetVersion The DatasetVersion to create or update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return datasetVersion Definition along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateDatasetVersionWithResponse(String name, String version,
        BinaryData datasetVersion, RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateDatasetVersionWithResponse(name, version, datasetVersion,
            requestOptions);
    }



```
Design Guidelines:
"""
Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Java API Best Practices
This section introduces guidelines for fundamental Java development design decisions that are used throughout the Azure SDK for Java. For further guidance, consider reviewing presentations and documentation on Java API design best practices.

Parameter Validation
The service client will have methods that send requests to the service. These methods take two kinds of parameters: service parameters and client parameters. Service parameters are sent across the wire to the service as URL segments, query parameters, request header values, and request bodies (typically JSON or XML). Client parameters are used solely within the client library and are not sent to the service; examples are path parameters, Context or file paths. If, for example, a path parameter is not validated, it could result in sending a request to a malformed URL, which could prevent the service from having the opportunity to do validation on it.
✅ DO validate client parameters. This includes checks for null values for required path parameters, and checks for empty string values if a required path parameter declares a minLength greater than zero.
⛔️ DO NOT validate service parameters. This includes null checks, empty strings, and other common validating conditions. Let the service validate any request parameters.
✅ DO test the developer experience when invalid service parameters are passed in. Ensure clear error messages are generated by the service. If the developer experience is inadequate, work with the service team to correct the problem.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""

--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The following Java SDK methods were flagged as potential candidates for generating convenience wrappers. The accompanying design guidelines outline desired principles for improving developer experience.

Your task:
Your goal is to think like an SDK designer, not a refactorer.
Analyse the methods and guidelines to identify high-level developer goals or workflows that are currently too low-level or fragmented.

Follow these steps:
1. Understand developer intent:
- What real-world task or developer workflow does this SDK enable?
- What steps would a developer typically need to perform manually?
2. Identify friction points:
- Are there repetitive setup steps, parameter redundancies, or multi-call workflows that could be hidden or automated?
3. Design potential convenience wrappers that:
- Represent meaningful user tasks.
- Eliminate multiple low-level method calls or configuration steps.
- Provide sensible defaults or intelligent handling for common cases.
4. Reject shallow wrappers.
- Do NOT propose wrappers that only merge 2-3 existing methods, unless they significantly improve clarity or hide complex logic.
5.  Return the generated wrapper methods, along with comments stating which methods were wrapped, and the reason for wrapping.

Output format:
/**
 * {Brief JavaDoc summary of code.}
 */
public void exampleWrapper() {
    /*
      Combined Methods: methodOne, methodTwo, etc.
      Reason: Explain why this wrapper improves developer experience
    */
    // Code here
}


Extra Notes:
- Do NOT create any classes. Your output code should only be wrapper methods.
- Do NOT include any extra commentary, aside from that in the wrapper method comments.
- Make sure that the 'Combined Methods' and 'Reason' comments are in block comments inside of the method, NOT in the Javadocs comment.
- Preserve existing functionality of the combined methods.
- Quality over quantity. Avoid creating wrapper methods for the sake of it. All wrappers must be justified
- Output the code as raw text. Do NOT put it in a code block with backticks

Methods:
```

    /**
     * Get the SAS credential to access the storage account associated with a Dataset version.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     blobReference (Required): {
     *         blobUri: String (Required)
     *         storageAccountArmId: String (Required)
     *         credential (Required): {
     *             sasUri: String (Required)
     *             type: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     *
     * @param name The name of the resource.
     * @param version The specific version id of the DatasetVersion to operate on.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the SAS credential to access the storage account associated with a Dataset version along with
     * {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getCredentialsWithResponse(String name, String version, RequestOptions requestOptions) {
        return this.serviceClient.getCredentialsWithResponse(name, version, requestOptions);
    }



    /**
     * Get the SAS credential to access the storage account associated with a Dataset version.
     *
     * @param name The name of the resource.
     * @param version The specific version id of the DatasetVersion to operate on.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SAS credential to access the storage account associated with a Dataset version.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssetCredentialResult getCredentials(String name, String version) {
        // Generated convenience method for getCredentialsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCredentialsWithResponse(name, version, requestOptions).getValue()
            .toObject(AssetCredentialResult.class);
    }


    /**
     * Get the SAS credential to access the storage account associated with a Dataset version.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     blobReference (Required): {
     *         blobUri: String (Required)
     *         storageAccountArmId: String (Required)
     *         credential (Required): {
     *             sasUri: String (Required)
     *             type: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     *
     * @param name The name of the resource.
     * @param version The specific version id of the DatasetVersion to operate on.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the SAS credential to access the storage account associated with a Dataset version along with
     * {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getCredentialsWithResponse(String name, String version, RequestOptions requestOptions) {
        return this.serviceClient.getCredentialsWithResponse(name, version, requestOptions);
    }



```
Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Authentication
Azure services use a variety of different authentication schemes to allow clients to access the service. Conceptually, there are two entities responsible in this process: a credential and an authentication policy. Credentials provide confidential authentication data. Authentication policies use the data provided by a credential to authenticate requests to the service.
Primarily, all Azure services should support Azure Active Directory OAuth token authentication, and all clients of services that support Azure Active Directory OAuth token authentication must support authenticating requests in this manner.
✅ DO provide service client fluent builder APIs that accepts an instance of the appropriate azure-core credential abstraction, namely TokenCredential, BasicAuthenticationCredential, or AzureKeyCredential.
⛔️ DO NOT persist, cache, or reuse tokens beyond the validity period of the given token. If any caching is implemented, the token credential must be given the opportunity to refresh before it expires.
✅ DO use authentication policy implementations from the Azure Core library where available.
✅ DO reserve the API surface needed for TokenCredential authentication, in the rare case that a service does not yet support Azure Active Directory authentication.
In addition to Azure Active Directory OAuth, services may provide custom authentication schemes. In this case the following guidelines apply.
✅ DO support all authentication schemes that the service supports.
✅ DO define a public custom credential type which enables clients to authenticate requests using the custom scheme.
⚠️ YOU SHOULD NOT define custom credential types extending or implementing the TokenCredential abstraction from Azure Core. This is especially true in type safe languages where extending or implementing this abstraction would break the type safety of other service clients, allowing users to instantiate them with the custom credential of the wrong service.
✅ DO define custom credential types in the same namespace and package as the client, or in a service group namespace and shared package, not in Azure Core or Azure Identity.
⛔️ DO NOT take compile-scope dependency on azure-identity library.
✅ DO prepend custom credential type names with the service name or service group name to provide clear context to its intended scope and usage.
✅ DO append Credential to the end of the custom credential type name. Note this must be singular not plural.
✅ DO define a constructor or factory for the custom credential type which takes in ALL data needed for the custom authentication protocol.
✅ DO define an update method which accepts all mutable credential data, and updates the credential in an atomic, thread safe manner.
⛔️ DO NOT define public settable properties or fields which allow users to update the authentication data directly in a non-atomic manner.
⚠️ YOU SHOULD NOT define public properties or fields which allow users to access the authentication data directly. They are most often not needed by end users, and are difficult to use in a thread safe manner. In the case that exposing the authentication data is necessary, all the data needed to authenticate requests should be returned from a single API which guarantees the data returned is in a consistent state.
✅ DO provide service client constructors or factories that accept all supported credential types.
Client libraries may support providing credential data via a connection string ONLY IF the service provides a connection string to users via the portal or other tooling. Connection strings are generally good for getting started as they are easily integrated into an application by copy/paste from the portal. However, connection strings are considered a lesser form of authentication because the credentials cannot be rotated within a running process.
⛔️ DO NOT support constructing a service client with a connection string unless such connection string is available within the Azure portal or Azure CLI.

Java API Best Practices
This section introduces guidelines for fundamental Java development design decisions that are used throughout the Azure SDK for Java. For further guidance, consider reviewing presentations and documentation on Java API design best practices.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""

--------------------------------------------------------------------------------

Step 2 Output: Generated Convenience Wrapper

--------------------------------------------------------------------------------
/**
 * Creates or updates a DatasetVersion and immediately retrieves the resulting DatasetVersion.
 * <p>
 * This wrapper streamlines the common workflow of upserting a DatasetVersion and then fetching its latest state,
 * ensuring the returned object reflects any server-side transformations or defaults applied during creation or update.
 * </p>
 */
public DatasetVersion upsertAndFetchDatasetVersion(String name, String version, DatasetVersion datasetVersion) {
    /*
      Combined Methods: createOrUpdateDatasetVersion, getDatasetVersion
      Reason: Developers frequently want to confirm the persisted state of a DatasetVersion after upsert, including any server-generated fields or normalization. This wrapper eliminates the need for two separate calls and reduces boilerplate, while preserving all underlying functionality.
    */
    createOrUpdateDatasetVersion(name, version, datasetVersion);
    return getDatasetVersion(name, version);
}

/**
 * Deletes a specific DatasetVersion if it exists, and returns whether the version was present and deleted.
 * <p>
 * This wrapper streamlines the common workflow of attempting to delete a DatasetVersion, 
 * and learning if the resource previously existed, without requiring manual exception handling for 404.
 * </p>
 */
public boolean deleteDatasetVersionIfExists(String name, String version) {
    /*
      Combined Methods: deleteDatasetVersion, getDatasetVersion
      Reason: Deleting a resource often requires first checking for existence or handling 404 exceptions. This wrapper provides a safe, intent-revealing pattern that returns true if the resource was deleted, or false if it did not exist, reducing error-prone boilerplate and improving clarity.
    */
    try {
        getDatasetVersion(name, version);
        deleteDatasetVersion(name, version);
        return true;
    } catch (ResourceNotFoundException ex) {
        return false;
    }
}

/**
 * Creates a new DatasetVersion with only required parameters.
 * <p>
 * This wrapper provides a streamlined way to create a DatasetVersion when only the required fields are known,
 * applying sensible defaults for optional parameters.
 * </p>
 */
public DatasetVersion createDatasetVersion(String name, String version, String type, String dataUri) {
    /*
      Combined Methods: createOrUpdateDatasetVersion
      Reason: Creating a DatasetVersion often only requires a few fields, but the model has many optional properties. This wrapper reduces friction by allowing creation with only the required fields, encouraging best practices and reducing boilerplate.
    */
    DatasetVersion datasetVersion = new DatasetVersion()
        .setName(name)
        .setVersion(version)
        .setType(type)
        .setDataUri(dataUri);
    return createOrUpdateDatasetVersion(name, version, datasetVersion);
}/**
 * Returns the latest version of a DatasetVersion for a given dataset name.
 *
 * <p>This method simplifies the common workflow of retrieving the most recent version of a dataset, 
 * which would otherwise require listing all versions and then manually determining the latest.</p>
 *
 * @param name The name of the dataset.
 * @return The latest DatasetVersion for the specified dataset, or null if none exist.
 */
public DatasetVersion getLatestDatasetVersion(String name) {
    /*
      Combined Methods: listDatasetVersions
      Reason: Developers often want the latest version of a dataset. This wrapper encapsulates the common pattern of retrieving all versions and selecting the latest, reducing boilerplate and potential errors in sorting/filtering.
    */
    PagedIterable<DatasetVersion> versions = listDatasetVersions(name);
    DatasetVersion latest = null;
    for (DatasetVersion version : versions) {
        if (latest == null || version.getVersion().compareTo(latest.getVersion()) > 0) {
            latest = version;
        }
    }
    return latest;
}

/**
 * Returns a mapping from dataset name to its latest DatasetVersion for all datasets.
 *
 * <p>This method streamlines the workflow of retrieving the latest version for every dataset, 
 * which would otherwise require listing all latest versions and grouping them manually.</p>
 *
 * @return A map where the key is the dataset name and the value is its latest DatasetVersion.
 */
public Map<String, DatasetVersion> listLatestDatasetVersionsByName() {
    /*
      Combined Methods: listLatestDatasetVersions
      Reason: Developers frequently need to work with the latest version of each dataset. This wrapper provides a ready-to-use mapping, reducing the need for manual iteration and grouping.
    */
    Map<String, DatasetVersion> result = new HashMap<>();
    for (DatasetVersion version : listLatestDatasetVersions()) {
        result.put(version.getName(), version);
    }
    return result;
}/**
 * Starts or retrieves a pending upload for a dataset version, using only the required parameters.
 * Provides sensible defaults for optional parameters and request options, streamlining the common case.
 */
public PendingUploadResponse startPendingUpload(String datasetName, String version) {
    /*
      Combined Methods: pendingUpload
      Reason: Developers often want to initiate a dataset upload with minimal configuration. This wrapper allows starting a pending upload with only the required dataset name and version, automatically constructing a PendingUploadRequest with default type "BlobReference" and omitting optional fields. This eliminates the need for manual request object construction and reduces boilerplate for the most common scenario.
    */
    PendingUploadRequest request = new PendingUploadRequest()
        .setPendingUploadType("BlobReference");
    return pendingUpload(datasetName, version, request);
}

/**
 * Starts or retrieves a pending upload for a dataset version, specifying a connection name.
 * Simplifies the process by allowing the developer to provide only the connection name in addition to required parameters.
 */
public PendingUploadResponse startPendingUpload(String datasetName, String version, String connectionName) {
    /*
      Combined Methods: pendingUpload
      Reason: Many users need to specify a connection name for storage, but don't want to manually build the request object. This wrapper allows specifying the connection name directly, sets the required pendingUploadType to "BlobReference", and omits other optional fields, reducing repetitive code and clarifying intent.
    */
    PendingUploadRequest request = new PendingUploadRequest()
        .setPendingUploadType("BlobReference")
        .setConnectionName(connectionName);
    return pendingUpload(datasetName, version, request);
}

/**
 * Starts or retrieves a pending upload for a dataset version, optionally specifying a connection name and a pending upload ID.
 * This overload is useful for resuming or referencing an existing pending upload, while still minimizing boilerplate.
 */
public PendingUploadResponse startPendingUpload(String datasetName, String version, String connectionName, String pendingUploadId) {
    /*
      Combined Methods: pendingUpload
      Reason: When resuming or referencing an existing pending upload, developers need to specify both connection name and pending upload ID. This wrapper enables that scenario directly, without requiring manual construction of the request object, streamlining a common workflow.
    */
    PendingUploadRequest request = new PendingUploadRequest()
        .setPendingUploadType("BlobReference")
        .setConnectionName(connectionName)
        .setPendingUploadId(pendingUploadId);
    return pendingUpload(datasetName, version, request);
}/**
 * Creates or updates a dataset version from a local file or folder path.
 * <p>
 * This method intelligently determines whether the provided path is a file or directory,
 * uploads the content to the service, and creates or updates the corresponding dataset version.
 * It eliminates the need for the developer to manually distinguish between file and folder uploads,
 * and handles all necessary upload and registration steps.
 * </p>
 *
 * @param name The name of the dataset resource.
 * @param version The version identifier for the dataset.
 * @param path The local file or folder path to upload.
 * @return The created or updated dataset version (FileDatasetVersion or FolderDatasetVersion).
 * @throws IllegalArgumentException If the path is neither a file nor a directory.
 * @throws IOException If an I/O error occurs during folder traversal.
 */
public Object upsertDatasetVersionFromPath(String name, String version, Path path) throws IOException {
    /*
      Combined Methods: createDatasetWithFile, createDatasetWithFolder, pendingUpload, createOrUpdateDatasetVersionWithResponse
      Reason: Developers often want to register a dataset version from a local path, but must currently distinguish between file and folder uploads and manually invoke different methods. This wrapper streamlines the workflow by automatically handling both cases, reducing cognitive load and boilerplate, and aligning with the intent of "register this path as a dataset version".
    */
    if (Files.isRegularFile(path)) {
        // Delegate to file upload logic
        return createDatasetWithFile(name, version, path);
    } else if (Files.isDirectory(path)) {
        // Delegate to folder upload logic
        return createDatasetWithFolder(name, version, path);
    } else {
        throw new IllegalArgumentException("The provided path is neither a file nor a directory: " + path);
    }
}

/**
 * Creates or updates a dataset version from a local file, with optional metadata.
 * <p>
 * This method uploads a file and registers it as a dataset version, allowing the caller to specify
 * description and tags in a single call. It provides sensible defaults for optional metadata, reducing
 * the number of steps required for common scenarios.
 * </p>
 *
 * @param name The name of the dataset resource.
 * @param version The version identifier for the dataset.
 * @param filePath The local file path to upload.
 * @param description Optional description for the dataset version.
 * @param tags Optional tags to associate with the dataset version.
 * @return The created or updated FileDatasetVersion.
 * @throws IllegalArgumentException If the provided path is not a file.
 */
public FileDatasetVersion upsertFileDatasetVersion(String name, String version, Path filePath, String description, Map<String, String> tags) {
    /*
      Combined Methods: createDatasetWithFile, createOrUpdateDatasetVersionWithResponse
      Reason: Developers often want to upload a file as a dataset version and set metadata (description, tags) in one step. The low-level API requires multiple calls and manual object construction. This wrapper streamlines the workflow, providing a single entry point for the common scenario of file-based dataset registration with metadata.
    */
    if (!Files.isRegularFile(filePath)) {
        throw new IllegalArgumentException("The provided path is not a file: " + filePath);
    }
    PendingUploadRequest body = new PendingUploadRequest();
    PendingUploadResponse pendingUploadResponse = this.pendingUpload(name, version, body);
    SasCredential credential = pendingUploadResponse.getBlobReference().getCredential();
    String blobUri = pendingUploadResponse.getBlobReference().getBlobUri();
    BlobClient blobClient = new BlobClientBuilder().endpoint(credential.getSasUri()).blobName(name).buildClient();
    blobClient.upload(BinaryData.fromFile(filePath));
    RequestOptions requestOptions = new RequestOptions();
    FileDatasetVersion datasetVersion = new FileDatasetVersion()
        .setDataUri(blobClient.getBlobUrl())
        .setName(name)
        .setVersion(version)
        .setDescription(description)
        .setTags(tags);
    FileDatasetVersion result = this
        .createOrUpdateDatasetVersionWithResponse(name, version, BinaryData.fromObject(datasetVersion), requestOptions)
        .getValue()
        .toObject(FileDatasetVersion.class);
    return result;
}

/**
 * Creates or updates a dataset version from a local folder, with optional metadata.
 * <p>
 * This method uploads all files in the specified folder (recursively) and registers them as a folder dataset version,
 * allowing the caller to specify description and tags in a single call. It handles all upload and registration steps,
 * reducing boilerplate for common folder-based dataset registration scenarios.
 * </p>
 *
 * @param name The name of the dataset resource.
 * @param version The version identifier for the dataset.
 * @param folderPath The local folder path to upload.
 * @param description Optional description for the dataset version.
 * @param tags Optional tags to associate with the dataset version.
 * @return The created or updated FolderDatasetVersion.
 * @throws IllegalArgumentException If the provided path is not a directory.
 * @throws IOException If an I/O error occurs during folder traversal.
 */
public FolderDatasetVersion upsertFolderDatasetVersion(String name, String version, Path folderPath, String description, Map<String, String> tags) throws IOException {
    /*
      Combined Methods: createDatasetWithFolder, createOrUpdateDatasetVersionWithResponse
      Reason: Developers often want to upload a folder as a dataset version and set metadata (description, tags) in one step. The low-level API requires multiple calls and manual object construction. This wrapper streamlines the workflow, providing a single entry point for the common scenario of folder-based dataset registration with metadata.
    */
    if (!Files.isDirectory(folderPath)) {
        throw new IllegalArgumentException("The provided path is not a folder: " + folderPath);
    }
    PendingUploadRequest request = new PendingUploadRequest();
    PendingUploadResponse pendingUploadResponse = this.pendingUpload(name, version, request);
    String blobContainerUri = pendingUploadResponse.getBlobReference().getBlobUri();
    SasCredential credential = pendingUploadResponse.getBlobReference().getCredential();
    String containerUrl = blobContainerUri.substring(0, blobContainerUri.lastIndexOf('/'));
    Files.walk(folderPath).filter(Files::isRegularFile).forEach(filePath -> {
        String relativePath = folderPath.relativize(filePath).toString().replace('\\', '/');
        BlobClient blobClient = new BlobClientBuilder().endpoint(credential.getSasUri()).blobName(relativePath).buildClient();
        blobClient.upload(BinaryData.fromFile(filePath), true);
    });
    RequestOptions requestOptions = new RequestOptions();
    FolderDatasetVersion datasetVersion = new FolderDatasetVersion()
        .setDataUri(containerUrl)
        .setName(name)
        .setVersion(version)
        .setDescription(description)
        .setTags(tags);
    FolderDatasetVersion result = this
        .createOrUpdateDatasetVersionWithResponse(name, version, BinaryData.fromObject(datasetVersion), requestOptions)
        .getValue()
        .toObject(FolderDatasetVersion.class);
    return result;
}/**
 * Obtains a SAS URI for the dataset version's blob, ready for direct use in storage operations.
 * <p>
 * This method streamlines the process of retrieving a SAS URI for a dataset version's blob, abstracting away
 * the need to manually extract and parse the credential details from the response model.
 * </p>
 *
 * @param name The name of the dataset resource.
 * @param version The specific version id of the DatasetVersion to operate on.
 * @return The SAS URI string for the dataset version's blob.
 */
public String getDatasetVersionBlobSasUri(String name, String version) {
    /*
      Combined Methods: getCredentials
      Reason: Developers commonly want to access the SAS URI directly for blob operations, but the low-level API
              requires navigating through nested model properties. This wrapper provides a direct, intent-revealing
              method to retrieve the SAS URI, reducing boilerplate and improving clarity for the most common use case.
    */
    AssetCredentialResult result = getCredentials(name, version);
    if (result == null || result.getBlobReference() == null || result.getBlobReference().getCredential() == null) {
        throw new IllegalStateException("Unable to retrieve SAS URI: missing credential information.");
    }
    return result.getBlobReference().getCredential().getSasUri();
}

/**
 * Obtains the storage account ARM resource ID associated with a dataset version's blob.
 * <p>
 * This method simplifies access to the storage account ARM ID, which is often needed for resource management
 * or auditing, by extracting it from the nested credential result model.
 * </p>
 *
 * @param name The name of the dataset resource.
 * @param version The specific version id of the DatasetVersion to operate on.
 * @return The storage account ARM resource ID string.
 */
public String getDatasetVersionStorageAccountArmId(String name, String version) {
    /*
      Combined Methods: getCredentials
      Reason: Accessing the storage account ARM ID is a common scenario for resource tracking or permissions.
              The raw API requires manual traversal of nested models. This wrapper provides a direct, intent-based
              method to retrieve the ARM ID, reducing repetitive code and clarifying developer intent.
    */
    AssetCredentialResult result = getCredentials(name, version);
    if (result == null || result.getBlobReference() == null) {
        throw new IllegalStateException("Unable to retrieve storage account ARM ID: missing blob reference.");
    }
    return result.getBlobReference().getStorageAccountArmId();
}

/**
 * Retrieves all credential details for a dataset version's blob in a strongly-typed result.
 * <p>
 * This method provides a streamlined way to obtain all relevant credential information (blob URI, storage account ARM ID,
 * SAS URI, and credential type) in a single call, returning a strongly-typed result for immediate use.
 * </p>
 *
 * @param name The name of the dataset resource.
 * @param version The specific version id of the DatasetVersion to operate on.
 * @return An object containing blobUri, storageAccountArmId, sasUri, and credentialType.
 */
public DatasetBlobAccessInfo getDatasetVersionBlobAccessInfo(String name, String version) {
    /*
      Combined Methods: getCredentials
      Reason: Developers often need all relevant access details for a dataset version's blob for downstream operations.
              The low-level API returns a nested model, requiring manual extraction of each property. This wrapper
              returns a simple, purpose-built POJO containing all relevant fields, reducing boilerplate and clarifying intent.
    */
    AssetCredentialResult result = getCredentials(name, version);
    if (result == null || result.getBlobReference() == null || result.getBlobReference().getCredential() == null) {
        throw new IllegalStateException("Unable to retrieve blob access info: missing credential information.");
    }
    return new DatasetBlobAccessInfo(
        result.getBlobReference().getBlobUri(),
        result.getBlobReference().getStorageAccountArmId(),
        result.getBlobReference().getCredential().getSasUri(),
        result.getBlobReference().getCredential().getType()
    );
}

/**
 * POJO representing all relevant access information for a dataset version's blob.
 */
public static class DatasetBlobAccessInfo {
    private final String blobUri;
    private final String storageAccountArmId;
    private final String sasUri;
    private final String credentialType;

    public DatasetBlobAccessInfo(String blobUri, String storageAccountArmId, String sasUri, String credentialType) {
        this.blobUri = blobUri;
        this.storageAccountArmId = storageAccountArmId;
        this.sasUri = sasUri;
        this.credentialType = credentialType;
    }

    public String getBlobUri() {
        return blobUri;
    }

    public String getStorageAccountArmId() {
        return storageAccountArmId;
    }

    public String getSasUri() {
        return sasUri;
    }

    public String getCredentialType() {
        return credentialType;
    }
}
================================================================================
