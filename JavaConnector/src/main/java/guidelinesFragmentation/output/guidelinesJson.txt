[
  {
    "heading": "Introduction",
    "content": "The following document describes Java specific guidelines for designing Azure SDK client libraries. These guidelines also expand on and simplify language-independent General Azure SDK Guidelines. More specific guidelines take precedence over more general guidelines.\nThe Java guidelines are for the benefit of client library designers targeting service applications written in Java. If you are a client library designer that is targeting Android mobile apps, refer to the Android Guidelines instead."
  },
  {
    "heading": "Design Principles",
    "content": "The main value of the Azure SDK is productivity. Other qualities, such as completeness, extensibility, and performance are important but secondary. We ensure our customers can be highly productive when using our libraries by ensuring these libraries are:\nIdiomatic\nThe SDK should follow the general design guidelines and conventions of Java. It should feel natural to a Java developer. We embrace the ecosystem with its strengths and its flaws. We work with the ecosystem to improve it for all developers. Azure SDK libraries version just like standard Java libraries.\nWe are not trying to fix bad parts of the language ecosystem; we embrace the ecosystem with its strengths and its flaws.\nConsistent\nThe Azure SDK feels like a single product of a single team, not a set of Maven libraries. Users learn common concepts once; apply the knowledge across all SDK components. All differences from the guidelines must have good reasons.\nApproachable\nSmall number of steps to get started; power knobs for advanced users Small number of concepts; small number of types; small number of members Approachable by our users, not by engineers designing the SDK components Easy to find great getting started guides and samples Easy to acquire\nDependable\n100% backward compatible Great logging, tracing, and error messages Predictable support lifecycle, feature coverage, and quality"
  },
  {
    "heading": "General Guidelines",
    "content": "✅ DO follow the General Azure SDK Guidelines.\n✅ DO locate all source code in the azure/azure-sdk-for-java GitHub repository."
  },
  {
    "heading": "Support for non-HTTP Protocols",
    "content": "Currently, this document describes guidelines for client libraries exposing HTTP services, with a small amount of guidance for AMQP-based services. If your service is not HTTP-based, please contact the Azure SDK Architecture Board for guidance."
  },
  {
    "heading": "Azure SDK API Design",
    "content": "Azure services are exposed to Java developers as one or more service client types and a set of supporting types."
  },
  {
    "heading": "Service Client",
    "content": "Service clients are the main starting points for developers calling Azure services with the Azure SDK. Each client library should have at least one client in its main namespace, so it’s easy to discover. The guidelines in this section describe patterns for the design of a service client. Because in Java both synchronous and asynchronous service clients are required, the sections below are organized into general service client guidance, followed by sync- and async-specific guidance.\nThere exists a distinction that must be made clear with service clients: not all classes that perform HTTP (or otherwise) requests to a service are automatically designated as a service client. A service client designation is only applied to classes that are able to be directly constructed because they are uniquely represented on the service. Additionally, a service client designation is only applied if there is a specific scenario that applies where the direct creation of the client is appropriate. If a resource can not be uniquely identified or there is no need for direct creation of the type, then the service client designation should not apply.\n✅ DO name service client types with the Client suffix (for example, ConfigurationClient).\n✅ DO annotate all service clients with the @ServiceClient annotation.\n✅ DO place service client types that the consumer is most likely to interact with in the root package of the client library (for example, com.azure.\u003cgroup\u003e.servicebus). Specialized service clients should be placed in sub-packages.\n✅ DO ensure that all service client classes are immutable and stateless upon instantiation.\n✅ DO have separate service clients for sync and async APIs."
  },
  {
    "heading": "Sync Service Clients",
    "content": "✅ DO offer a sync service client named \u003cServiceName\u003eClient. More than one service client may be offered for a single service. An example of a sync client is shown below:\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\npackage com.azure.\u003cgroup\u003e.\u003cservice_name\u003e;\n\n@ServiceClient(\n    builder \u003d \u003cservice_name\u003eClientBuilder.class,\n    serviceInterfaces \u003d \u003cservice_name\u003eService.class)\npublic final class \u003cservice_name\u003eClient {\n\n    // internally, sync API can defer to async API with sync-over-async\n    private final \u003cservice_name\u003eAsyncClient client;\n\n    // package-private constructors only - all instantiation is done with builders\n    \u003cservice_name\u003eClient(\u003cservice_name\u003eAsyncClient client) {\n        this.client \u003d client;\n    }\n\n    // service methods...\n\n    // A single response API\n    public Response\u003c\u003cmodel\u003e\u003e \u003cservice_operation\u003e(\u003cparameters\u003e) {\n        // deferring to async client internally\n        return client.\u003cservice_operation\u003e(\u003cparameters\u003e).block();\n    }\n\n    // A non-paginated sync list API (refer to pagination section for more details)\n    public IterableStream\u003c\u003cmodel\u003e\u003e list\u003cservice_operation\u003e(\u003cparameters\u003e) {\n        // ...\n    }\n\n    // A paginated sync list API (refer to pagination section for more details)\n    public PagedIterable\u003c\u003cmodel\u003e\u003e list\u003cservice_operation\u003e(\u003cparameters\u003e) {\n        // ...\n    }\n\n    // other members\n    …\n}\nRefer to the ConfigurationClient class for a fully built-out example of how a sync client should be constructed."
  },
  {
    "heading": "Async Service Clients",
    "content": "✅ DO offer an async service client named \u003cServiceName\u003eAsyncClient. More than one service client may be offered for a single service. An example of an async client is shown below:\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\npackage com.azure.\u003cgroup\u003e.\u003cservice_name\u003e;\n\n@ServiceClient(\n    builder \u003d \u003cservice_name\u003eClientBuilder.class,\n    serviceInterfaces \u003d \u003cservice_name\u003eService.class,\n    isAsync \u003d true)\npublic final class \u003cservice_name\u003eAsyncClient {\n\n    // package-private constructors only - all instantiation is done with builders\n    \u003cservice_name\u003eClient(\u003cparameters\u003e) {\n        // ...\n    }\n\n    // service methods...\n\n    // A single response API\n    public Mono\u003cResponse\u003c\u003cmodel\u003e\u003e\u003e \u003cservice_operation\u003e(\u003cparameters\u003e) {\n        // ...\n    }\n\n    // A paginated response API\n    public PagedFlux\u003c\u003cmodel\u003e\u003e list\u003cservice_operation\u003e(\u003cparameters\u003e) {\n        // ...\n    }\n\n    // other members\n    ...\n}\nRefer to the ConfigurationAsyncClient class for a fully built-out example of how an async client should be constructed.\n✅ DO use Project Reactor to provide consumers with a high-quality async API.\n⛔️ DO NOT use any other async APIs, such as CompletableFuture or RxJava.\n⛔️ DO NOT write custom APIs for streaming or async operations. Make use of the existing functionality offered in the Azure core library. Discuss proposed changes to the Azure core library with the Architecture Board. Refer to the Azure Core Types section for more information."
  },
  {
    "heading": "Service Client Creation",
    "content": "⛔️ DO NOT provide any public or protected constructors in the service client. Keep visibility to a minimum by using package-private constructors that may only be called by types in the same package, and then enable instantiation of the service client through the use of service client builders, detailed below.\n✅ DO offer a fluent builder API for constructing service clients named \u003cservice_name\u003eClientBuilder, which must support building a sync service client instance and an async service client instance (where appropriate). It must offer buildClient() and buildAsyncClient() API to create a synchronous and asynchronous service client instance, respectively. Shown in the first code sample below is a generalized template, and following that is a stripped-down example builder.\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\npackage com.azure.\u003cgroup\u003e.\u003cservice_name\u003e;\n\n// Template of how a builder should look\n@ServiceClientBuilder(serviceClients \u003d {\u003cservice_name\u003eClient.class, \u003cservice_name\u003eAsyncClient.class})\npublic final class \u003cservice_name\u003eClientBuilder {\n\n    // private fields for all settable parameters\n    ...\n\n    // This is the public constructor used to create the service client, so a public access modifier\n    // makes sense here. This is required, and it is intended to prevent any public constructors\n    // in the service client itself, because we do not want to allow users to create a service client\n    // directly.\n    public \u003cservice_name\u003eClientBuilder() {\n        // any initialization necessary for the builder\n    }\n\n    // The buildClient() method returns a new instance of the sync client each time it is called\n    public \u003cservice_name\u003eClient buildClient() {\n        // create an async client and pass that into the sync client for sync-over-async impl\n        return new \u003cservice_name\u003eClient(buildAsync());\n    }\n\n    // The buildAsyncClient() method returns a new instance of the async client each time it is called\n    public \u003cservice_name\u003eClient buildAsyncClient() {\n        // configuration of pipeline, etc\n        ...\n\n        // instantiate new async client instance\n        return new \u003cservice_name\u003eAsyncClient(serviceEndpoint, pipeline);\n    }\n\n    // fluent API, each returning \u0027this\u0027, and one for each parameter to configure\n    public \u003cservice_name\u003eClientBuilder \u003cproperty\u003e(\u003cparameter\u003e) {\n        builder.\u003cproperty\u003e(\u003cparameter\u003e);\n        return this;\n    }\n}\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\npackage com.azure.data.appconfiguration;\n\n// concrete example of a builder\n@ServiceClientBuilder(serviceClients \u003d {ConfigurationAsyncClient.class, ConfigurationClient.class})\npublic final class ConfigurationClientBuilder {\n    private String endpoint;\n    private TokenCredential tokenCredential;\n    private ConfigurationServiceVersion version \u003d ConfigurationServiceVersion.getLatest();\n    // other fields and its setters are omitted for brevity\n\n    // public constructor - this is the only available front door to creating a service client instance\n    public ConfigurationClientBuilder() {\n        // empty constructor\n    }\n\n    // The buildClient() method returns a new instance of the sync client each time it is called\n    public ConfigurationClient buildClient() {\n        // create an async client and pass that into the sync client for sync-over-async impl\n        return new ConfigurationClient(buildAsyncClient());\n    }\n\n    // The buildAsyncClient() method returns a new instance of the async client each time it is called\n    public ConfigurationAsyncClient buildAsyncClient() {\n        // configuration of pipeline, etc\n        HttpPipeline pipeline \u003d buildOrGetHttpPipeline();\n\n        // instantiate new async client instance\n        return new ConfigurationAsyncClient(endpoint, pipeline, serviceVersion);\n    }\n\n    // fluent APIs, each returning \u0027this\u0027, and one for each parameter to configure\n\n    public ConfigurationClientBuilder endpoint(String endpoint) {\n        try {\n            new URL(endpoint);\n        } catch (MalformedURLException ex) {\n            throw logger.logExceptionAsWarning(new IllegalArgumentException(\"\u0027endpoint\u0027 must be a valid URL\"));\n        }\n        this.endpoint \u003d endpoint;\n        return this;\n    }\n\n    public ConfigurationClientBuilder credential(TokenCredential tokenCredential) {\n        // token credential can not be null value\n        this.tokenCredential \u003d Objects.requireNonNull(tokenCredential);\n        return this;\n    }\n\n    public ConfigurationClientBuilder serviceVersion(ConfigurationServiceVersion version) {\n        this.version \u003d version;\n        return this;\n    }\n\n}\n✅ DO offer build method ‘overloads’ for when a builder can build multiple client types. These methods must be named in the form build\u003cclient\u003eClient() and build\u003cclient\u003eAsyncClient(). For example, buildBlobClient() and buildBlobAsyncClient().\n✅ DO annotate service client builders with the @ServiceClientBuilder annotation, setting the annotation parameters appropriately for the service client (e.g. async is true for async service clients).\n✅ DO ensure consistency across all HTTP-based client libraries, by using the following names for client builder fluent API:\nName Intent addPolicy Adds a policy to the set of existing policies (assumes no custom pipeline is set). buildAsyncClient Creates a new async client on each call. buildClient Creates a new sync client on each call. clientOptions Allows the user to set a variety of client-related options, such as user-agent string, headers, etc. configuration Sets the configuration store that is used during construction of the service client. connectionString Sets the connection string to use for authenticating HTTP requests (only applicable if the Azure portal offers it for the service). credential Sets the credential to use when authenticating HTTP requests. endpoint URL to send HTTP requests to. httpClient Sets the HTTP client to use. httpLogOptions Configuration for HTTP logging level, header redaction, etc. pipeline Sets the HTTP pipeline to use. retryPolicy Sets the retry policy to use (using the RetryPolicy type). serviceVersion Sets the service version to use. This must be a type implementing ServiceVersion.\nendpoint may be renamed if a more user-friendly name can be justified. For example, a blob storage library developer may consider using new BlobClientBuilder.blobUrl(..). In this case, the endpoint API should be removed.\n✅ DO ensure consistency across all AMQP-based client libraries, by using the following names for client builder fluent API:\nName Intent build\u003cType\u003eAsyncClient Creates a new async client on each call. build\u003cType\u003eClient Creates a new sync client on each call. configuration Sets the configuration store that is used during construction of the service client. credential Sets the credential to use when authenticating AMQP requests. connectionString Sets the connection string to use for authenticating AMQP requests (only applicable if the Azure portal offers it for the service). transportType Sets the preferred transport type to AMQP or Web Sockets that the client should use. retry Sets the retry policy to use (using the AmqpRetryOptions type). proxyOptions Sets the proxy connection settings. serviceVersion Sets the service version to use. This must be a type implementing ServiceVersion.\n✅ DO throw an IllegalStateException from the builder method when it receives mutually exclusive arguments. The consumer is over-specifying builder arguments, some of which will necessarily be ignored. The error message in the exception must clearly outline the issue.\n✅ DO allow the consumer to construct a service client with the minimal information needed to connect and authenticate to the service.\n✅ DO ensure the builder will instantiate a service client into a valid state. Throw an IllegalStateException when the user calls the build*() methods with a configuration that is incomplete or invalid."
  },
  {
    "heading": "Service Versions",
    "content": "✅ DO call the highest supported service API version by default, and ensure this is clearly documented.\n✅ DO allow the consumer to explicitly select a supported service API version when instantiating the service client, as shown above in the service client creation section.\nUse a builder parameter called serviceVersion on the client builder type (as specified above).\n✅ DO specify a service version as an enum implementing the ServiceVersion interface. For example, the following is a code snippet from the ConfigurationServiceVersion:\npublic enum ConfigurationServiceVersion implements ServiceVersion {\n    V1_0(\"1.0\");\n\n    private final String version;\n\n    ConfigurationServiceVersion(String version) {\n        this.version \u003d version;\n    }\n\n    @Override\n    public String getVersion() {\n        return this.version;\n    }\n\n    /**\n     * Gets the latest service version supported by this client library\n     *\n     * @return the latest {@link ConfigurationServiceVersion}\n     */\n    public static ConfigurationServiceVersion getLatest() {\n        return V1_0;\n    }\n}\nThis can then be called by the developer as such:\npublic class UserApplication {\n    public static void main(String args[]) {\n        ConfigurationClient client \u003d new ConfigurationClientBuilder()\n            .credential(\u003ctokenCredential\u003e)\n            .endpoint(\"\u003cendpoint\u003e\")\n            .serviceVersion(ConfigurationServiceVersion.V1_0) // set the version to V1\n            .buildClient();\n\n        // calls V1 service API\n        ConfigurationSetting setting \u003d client.getConfigurationSetting(\"name\", \"label\");\n    }\n}"
  },
  {
    "heading": "Service Methods",
    "content": "Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.\n⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.\n✅ DO prefer the use of the following terms for CRUD operations:\nVerb Parameters Returns Comments upsert\u003cnoun\u003e key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set\u003cnoun\u003e key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create\u003cnoun\u003e key, item Created item Create new item. Fails if item already exists. update\u003cnoun\u003e key, partial item Updated item Fails if item doesn’t exist. replace\u003cnoun\u003e key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete\u003cnoun\u003e key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add\u003cnoun\u003e index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get\u003cnoun\u003e key Item Will return null if item doesn’t exist. list\u003cnoun\u003e Items Return list of items. Returns empty list if no items exist. \u003cnoun\u003eExists key boolean Return true if the item exists.\n☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.\nOne of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.\n✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.\ngetFoo()\ngetFoo(x)\ngetFoo(x, y)\ngetFoo(x, y, z) // maximal overload\ngetFoo(a)       // maximal overload\n\n// this will result in the following two methods being required\n// (replacing the two maximal overloads above)\ngetFoo(x, y, z, Context)\ngetFoo(a, Context)\n⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs."
  },
  {
    "heading": "Non-Service Methods",
    "content": "Clients often have non-service methods, for accessing details such as the service version, http pipeline, and so on. There may also be API that offers users the ability to create specialized sub-clients. These sub-clients\n✅ DO use standard JavaBean naming prefixes for all methods that are not service methods.\n✅ DO prefix methods in sync clients that create or vend sub-clients with get and suffix with Client. For example, container.getBlobClient(). Similarly, prefix methods in async clients that create or vend sub-clients with get and suffix with AsyncClient. For example, container.getBlobAsyncClient(). Keep in mind the guidance in the service client section, as it cannot be assumed that the Client suffix applies to another client-like class vended by a client. The Client suffix is only applicable in certain situations, and therefore, methods should not be named get*Client if the type is not a client."
  },
  {
    "heading": "Cancellation",
    "content": "⛔️ DO NOT provide any API that accepts a cancellation token, in both sync and async clients. Cancellation isn’t a common pattern in Java. Developers who use our client libraries, and who need to cancel requests, should use the async API instead, where they can unsubscribe from a publisher to cancel the request."
  },
  {
    "heading": "Return Types",
    "content": "Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.\nThe logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response\u003cT\u003e is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.\n✅ DO return the logical entity (i.e. the T) for all synchronous service methods.\n✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.\nReturn Response\u003cT\u003e on the maximal overload for a service method with WithResponse appended to the name. For example:\nFoo foo \u003d client.getFoo(a);\nFoo foo \u003d client.getFoo(a, b);\nFoo foo \u003d client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the \u0027withResponse\u0027 \u0027overload\u0027 below\nResponse\u003cFoo\u003e response \u003d client.getFooWithResponse(a, b, c, context);\nFor methods that combine multiple requests into a single call:\n⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.\n✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take."
  },
  {
    "heading": "Option Parameters",
    "content": "Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:\nService Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short\nSimple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.\nSimple methods should follow standard Java best practices for parameter list and overload design.\nComplex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:\npublic class BlobContainerClient {\n\n    // simple service methods\n    public BlobInfo uploadBlob(String blobName, byte[] content);\n    public Response\u003cBlobInfo\u003e uploadBlobWithResponse(String blobName, byte[] content, Context context);\n\n    // complex service methods, note the introduction of the \u0027CreateBlobOptions\u0027 type\n    public BlobInfo createBlob(CreateBlobOptions options);\n    public Response\u003cBlobInfo\u003e createBlobWithResponse(CreateBlobOptions options, Context context);\n\n    // convenience overload[s]\n    public BlobInfo createBlob(String blobName);\n}\n\n@Fluent\npublic class CreateBlobOptions {\n    private String blobName;\n    private PublicAccessType access;\n    private Map\u003cString, String\u003e metadata;\n\n    // Constructor enforces the requirement that blobName is always set\n    public CreateBlobOptions(String blobName) {\n        this.blobName \u003d blobName;\n    }\n\n    public String getBlobName() {\n        return blobName;\n    }\n\n    public CreateBlobOptions setAccess(PublicAccessType access) {\n        this.access \u003d access;\n        return this;\n    }\n\n    public PublicAccessType getAccess() {\n        return access;\n    }\n\n    public CreateBlobOptions setMetadata(Map\u003cString, String\u003e metadata) {\n        this.metadata \u003d metadata;\n        return this;\n    }\n\n    public Map\u003cString, String\u003e getMetadata() {\n        return metadata;\n    }\n}\n✅ DO name the options type after the name of the service method it is used for, such that the type is named \u003coperation\u003eOptions. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.\n✅ DO use the options parameter pattern for complex service methods.\n✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.\n✔️ YOU MAY add simple overloads of methods using the options parameter pattern.\nIf in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.\n⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).\n✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.\n✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.\n✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.\n✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types)."
  },
  {
    "heading": "Parameter Validation",
    "content": "The service client will have methods that send requests to the service. These methods take two kinds of parameters: service parameters and client parameters. Service parameters are sent across the wire to the service as URL segments, query parameters, request header values, and request bodies (typically JSON or XML). Client parameters are used solely within the client library and are not sent to the service; examples are path parameters, Context or file paths. If, for example, a path parameter is not validated, it could result in sending a request to a malformed URL, which could prevent the service from having the opportunity to do validation on it.\n✅ DO validate client parameters. This includes checks for null values for required path parameters, and checks for empty string values if a required path parameter declares a minLength greater than zero.\n⛔️ DO NOT validate service parameters. This includes null checks, empty strings, and other common validating conditions. Let the service validate any request parameters.\n✅ DO test the developer experience when invalid service parameters are passed in. Ensure clear error messages are generated by the service. If the developer experience is inadequate, work with the service team to correct the problem."
  },
  {
    "heading": "Methods Returning Collections (Paging)",
    "content": "Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable\u003cT\u003e or PagedFlux\u003cT\u003e (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.\n✅ DO return PagedIterable\u003cT\u003e from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:\npublic final class ConfigurationClient {\n    // synchronous API returning a PagedIterable of ConfigurationSetting instances\n    public PagedIterable\u003cConfigurationSetting\u003e listSettings(...) {\n        ...\n    }\n}\nPagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern \u003cserviceName\u003ePagedIterable or \u003coperation\u003ePagedFlux.\n⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).\n✅ DO return PagedFlux\u003cT\u003e (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux\u003cT\u003e, as it allows for consumers to retrieve response information in a consistent manner.\npublic final class ConfigurationAsyncClient {\n\n    // asynchronous API returning a PagedFlux of ConfigurationSetting instances\n    public PagedFlux\u003cConfigurationSetting\u003e listSettings(SettingSelector options, Context context) {\n        // The first lambda is a Supplier\u003cPagedResponse\u003cT\u003e\u003e returning the first page of results\n        // as a Mono\u003cPagedResponse\u003cT\u003e\u003e.\n        // The second lambda is a Function\u003cString, Mono\u003cPagedResponse\u003cT\u003e\u003e\u003e, returning a\n        // Mono\u003cPagedResponse\u003cT\u003e\u003e representing a page based on the provided continuationToken.\n        return new PagedFlux\u003c\u003e(\n            () -\u003e listFirstPageSettings(options, context),\n            continuationToken -\u003e listNextPageSettings(contextWithSpanName, continuationToken));\n    }\n}\nConsumers of this API can consume individual items by treating the response as a Flux\u003cT\u003e:\nclient.listSettings(..)\n      .subscribe(item -\u003e System.out.println(\"Processing item \" + item));\nThe consumer may process items page-by-page instead:\nclient.listSettings(..)\n      .byPage()\n      .subscribe(page -\u003e {\n        // page is a PagedResponse, which implements Page and Response, so there exists:\n        //  * List\u003cT\u003e of items,\n        //  * continuationToken (represented as a String),\n        //  * Status code,\n        //  * HTTP headers,\n        //  * HTTP request\n        System.out.println(\"Processing page \" + page)\n});\nThe PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.\n✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package."
  },
  {
    "heading": "Methods Invoking Long-Running Operations",
    "content": "Some service operations, known as Long Running Operations or LROs take a long time (up to hours or days). Such operations do not return their result immediately, but rather are started, their progress is polled, and finally the result of the operation is retrieved.\nThe azure-core library exposes types that make supporting LROs simpler, most notably SyncPoller\u003cT\u003e and PollerFlux\u003cT\u003e, for synchronous and asynchronous clients, respectively. These classes represent a LRO and support operations for polling and waiting for status changes, and retrieving the final operation result.\n✅ DO use the SyncPoller and PollerFlux to represent long-running operations. The long-running operation API pattern is:\n// sync client\npublic final class \u003cservice_name\u003eClient {\n    // SyncPoller\u003cT, U\u003e is a type in azure core\n    // T is the type of long-running operation poll response value\n    // U is the type of the final result of long-running operation\n    public SyncPoller\u003cT, U\u003e begin\u003coperation_name\u003e(\u003cparameters\u003e) {\n        PollerFlux\u003c\u003e asyncPoller \u003d asyncClient.begin\u003coperation_name\u003e(\u003cparameters\u003e);\n        return asyncPoller.getSyncPoller();\n    }\n}\n// Async client\npublic final class \u003cservice_name\u003eAsyncClient {\n    // PollerFlux\u003cT, U\u003e is a type in azure core\n    // T is the type of long-running operation poll response value\n    // U is the type of the final result of long-running operation\n    public PollerFlux\u003cT, U\u003e begin\u003coperation_name\u003e(\u003cparameters\u003e) {\n        return new PollerFlux\u003c\u003e(...);\n    }\n}\n✅ DO prefix method names which return a poller with the begin prefix.\n✅ DO provide a way to instantiate a poller with the serialized state of another poller to begin where it left off, for example by passing the state as a parameter to the same method which started the operation, or by directly instantiating a poller with that state.\n⛔️ DO NOT specify any poller (SyncPoller or PollerFlux) with a terminal state (i.e. the U in SyncPoller\u003cT, U\u003e or PollerFlux\u003cT, U\u003e) as being void. This does not benefit users, as it is typically their desire to inspect the terminal state for some quality, and by being void we are making this inspection more difficult than necessary."
  },
  {
    "heading": "Conditional Request Methods",
    "content": "Conditional requests are normally performed using HTTP headers. The primary usage provides headers that match the ETag to some known value. The ETag is an opaque identifier that represents a single version of a resource. For example, adding the following header will translate to “if the record’s version, specified by the ETag, is not the same”.\nIf-Not-Match: \"etag-value\"\nWith headers, tests are possible for the following:\nUnconditionally (no additional headers) If (not) modified since a version (If-Match and If-Not-Match) If (not) modified since a date (If-Modified-Since and If-Unmodified-Since) If (not) present (If-Match and If-Not-Match with a ETag\u003d* value)\nNot all services support all of these semantics, and may not support any of them. Developers have varying levels of understanding of the ETag and conditional requests, so it is best to abstract this concept from the API surface. There are two types of conditional requests we need to be concerned with:\nSafe conditional requests (e.g. GET)\nThese are typically used to save bandwidth in an “update cache” scenario, i.e. I have a cached value, only send me the data if what the service has is newer than my copy. These return either a 200 or a 304 status code, indicating the value was not modified, which tells the caller that their cached value is up to date.\nUnsafe conditional requests (e.g. POST, PUT, or DELETE)\nThese are typically used to prevent losing updates in an optimistic concurrency scenario, i.e. I’ve modified the cached value I’m holding, but don’t update the service version unless it has the same copy I’ve got. These return either a success or a 412 error status code, indicating the value was modified, to indicate to the caller that they’ll need to retry their update if they want it to succeed.\nThese two cases are handled differently in client libraries. However, the form of the call is the same in both cases. The signature of the method should be:\nclient.\u003cmethod\u003e(\u003citem\u003e, requestOptions)\nThe requestOptions field provides preconditions to the HTTP request. The Etag value will be retrieved from the item that is passed into the method where possible, and method arguments where not possible. The form of the method will be modified based on idiomatic usage patterns in the language of choice. In cases where the ETag value is not known, the operation cannot be conditional. If the library developer does not need to support advanced usage of precondition headers, they can add a boolean parameter that is set to true to establish the condition. For example, use one of the following boolean names instead of the conditions operator:\nonlyIfChanged onlyIfUnchanged onlyIfMissing onlyIfPresent\nIn all cases, the conditional expression is “opt-in”, and the default is to perform the operation unconditionally.\nThe return value from a conditional operation must be carefully considered. For safe operators (e.g. GET), return a response that will throw if the value is accessed (or follow the same convention used fro a 204 No Content response), since there is no value in the body to reference. For unsafe operators (e.g. PUT, DELETE, or POST), throw a specific error when a Precondition Failed or Conflict result is received. This allows the consumer to do something different in the case of conflicting results.\n☑️ YOU SHOULD accept a conditions parameter (which takes an enumerated type) on service methods that allow a conditional check on the service.\n☑️ YOU SHOULD accept an additional boolean or enum parameter on service methods as necessary to enable conditional checks using ETag.\n☑️ YOU SHOULD include the ETag field as part of the object model when conditional operations are supported.\n⚠️ YOU SHOULD NOT throw an error when a 304 Not Modified response is received from the service, unless such errors are idiomatic to the language.\n☑️ YOU SHOULD throw a distinct error when a 412 Precondition Failed response or a 409 Conflict response is received from the service due to a conditional check."
  },
  {
    "heading": "Hierarchical Clients",
    "content": "TODO: Add discussion of hierarchical clients"
  },
  {
    "heading": "Model Types",
    "content": "Model types are classes that developers of applications use to provide required information into, or to receive information from, Azure services. For example:\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\npackage com.azure.ai.textanalytics.models;\n\n@Fluent\npublic final class PiiTaskParameters {\n\n    // optional properties\n    private PiiTaskParametersDomain domain;\n    private String modelVersion \u003d \"latest\";\n\n   // optional properties have getters and fluent setters\n    public PiiTaskParametersDomain getDomain() {\n        return this.domain;\n    }\n\n    public PiiTaskParameters setDomain(PiiTaskParametersDomain domain) {\n        this.domain \u003d domain;\n        return this;\n    }\n\n    public String getModelVersion() {\n        return this.modelVersion;\n    }\n\n    public PiiTaskParameters setModelVersion(String modelVersion) {\n        this.modelVersion \u003d modelVersion;\n        return this;\n    }\n}\n⛔️ DO NOT offer a separate builder class for model classes.\n✅ DO provide public constructors for all model classes that a user is allowed to instantiate. Model classes that are not instantiable by the user, for example if they are model types returned from the service, must not have any publicly visible constructors.\nBecause model types can represent many different kinds of models, it is important that they can correctly enforce required properties. Whilst many models have no required properties, some do, and moreso, some models can even support multiple mutually exclusive sets of required properties.\n✅ DO provide a no-args constructor if a model type has no required properties.\n✅ DO provide one or more constructors with arguments, if a model type has required properties. If there are multiple mutually exclusive sets of supported required parameter, a constructor must be introduced for each of these. For example:\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\npackage com.azure.ai.textanalytics.models;\n\npublic final class TextDocumentInput {\n\n    // required properties\n    private final String id;\n    private final String text;\n\n    // optional property\n    private String language;\n\n    // Constructor to enforce setting the required properties\n    public TextDocumentInput(String id, String text) {\n        this.id \u003d Objects.requireNonNull(id, \"\u0027id\u0027 cannot be null\");\n        this.text \u003d Objects.requireNonNull(text, \"\u0027text\u0027 cannot be null\");\n    }\n\n    // required properties only have getters\n    public String getId() {\n        return this.id;\n    }\n\n    public String getText() {\n        return this.text;\n    }\n\n    // optional property has both getter and fluent setter\n    public String getLanguage() {\n        return this.language;\n    }\n\n    public TextDocumentInput setLanguage(String language) {\n        this.language \u003d language;\n        return this;\n    }\n}\n✅ DO provide a fluent setter API to configure the model class, where each set method should return this. This allows chaining of set operations.\n✅ DO override all set methods when extending a fluent type to return the extended type. This allows chaining of set operations on the sub-class.\n@Fluent\npublic class SettlementOptions {\n    private ServiceBusTransactionContext transactionContext;\n\n    public ServiceBusTransactionContext getTransactionContext() {\n        return transactionContext;\n    }\n\n    public SettlementOptions setTransactionContext(ServiceBusTransactionContext transactionContext) {\n        this.transactionContext \u003d transactionContext;\n        return this;\n    }\n}\n\n@Fluent\npublic final AbandonOptions extends SettlementOptions {\n    private Map\u003cString, Object\u003e propertiesToModify;\n\n    public Map\u003cString, Object\u003e getPropertiesToModify() {\n        return propertiesToModify;\n    }\n\n    public AbandonOptions setPropertiesToModify(Map\u003cString, Object\u003e propertiesToModify) {\n        this.propertiesToModify \u003d propertiesToModify;\n        return this;\n    }\n\n    // Override setter method of the parent class\n    @Override\n    public AbandonOptions setTransactionContext(ServiceBusTransactionContext transactionContext) {\n        super.setTransactionContext(transactionContext);\n        return this;\n    }\n}\n✅ DO apply the @Fluent annotation to the class.\nFluent types must not be immutable. Don’t return a new instance on each setter call.\n✅ DO use the JavaBean naming convention of get*, set*, and is*.\n✅ DO include static methods if new model instances are required to be created from raw data. The static method names should be from\u003cdataformat\u003e. For example, to create an instance of BinaryData from a string, include a static method called fromString in BinaryData class.\n⛔️ DO NOT copy collection-based results, or wrap collection-related return types with unmodifiable wrappers. If a user calls a method public List\u003cString\u003e getFoos(), they should feel entitled to modify this collection as their needs fit. These modifications should be applied back to the model that supplied the collection in the first place. In places where this will impact the correct operation of the model type (i.e. where the types of values is constrained), it is acceptable to copy the collection or to wrap it as an unmodifiable type, provided that this is clearly documented in the related JavaDoc.\nModel types sometimes exist only as an Azure service return type, and developers would never instantiate these. Often, these model types have API that is not user-friendly (in particular, overly complex constructors). It would be best for developers if they were never presented with this API in the first place, and we refer to these as ‘undesirable public API’.\n✅ DO put model classes that are intended as service return types only, and which have undesirable public API into the .implementation.models package. In its place, an interface should be put into the public-facing .models package, and it should be this type that is returned through the public API to end users.\nExamples of situations where this is applicable include when there are constructors or setters on a type which receive implementation types, or when a type should be immutable but needs to be mutable internally. The interface should have the model type name, and the implementation (within .implementation.models) should be named \u003cinterfaceName\u003eImpl."
  },
  {
    "heading": "Enumerations",
    "content": "Enumerations in Java are extremely convenient, but used improperly can lead to breaking changes to the API. This is because often the Java compiler is configured to fail if not all enum values are listed in a switch statement, so with the addition of a new enum value, users will encounter breaking builds when updating their dependency to a newer version. Because of this, the Java azure-core ships with the ExpandableStringEnum that is the suggested means through which enumerations are exposed. Whilst not technically a Java enumeration, it can be treated as such in much the same way, without concerns about breaking changes from adding new values. It is also more user-friendly when new values are introduced on the service side before a library update has been shipped, as users can manually create their own values within the context of a single ExpandableStringEnum.\n⛔️ DO NOT define Java enum types for parameters, properties, and return types, except in two scenarios:\n1) When values are fixed and will never change over time, or, 2) When the enum is used as an input-only enum and therefore the likelihood of users running into breaking changes (i.e. when they must switch over all values) is low.\n✅ DO use all upper-case names for enum (and ExpandableStringEnum) values. EnumType.FOO and EnumType.TWO_WORDS are valid, whereas EnumType.Foo and EnumType.twoWords are not.\n✔️ YOU MAY use the ExpandableStringEnum type provided by azure-core to define an enum-like API that declares well-known fields but which can also contain unknown values returned from the service, or user-defined values passed to the service. An example expandable enum, taken from azure-core’s OperationStatus type, is shown below:\npublic static final class OperationStatus extends ExpandableStringEnum\u003cOperationStatus\u003e {\n    public static final OperationStatus NOT_STARTED \u003d fromString(\"NOT_STARTED\");\n    public static final OperationStatus IN_PROGRESS \u003d fromString(\"IN_PROGRESS\");\n    public static final OperationStatus SUCCESSFULLY_COMPLETED \u003d fromString(\"SUCCESSFULLY_COMPLETED\");\n    public static final OperationStatus FAILED \u003d fromString(\"FAILED\");\n    public static final OperationStatus USER_CANCELLED \u003d fromString(\"USER_CANCELLED\");\n\n    /**\n     * Creates or finds a {@link OperationStatus} from its string representation.\n     * @param name a name to look for\n     * @return the corresponding {@link OperationStatus}\n     */\n    public static OperationStatus fromString(String name) {\n        return fromString(name, OperationStatus.class);\n    }\n}"
  },
  {
    "heading": "Using Azure Core Types",
    "content": "✅ DO make use of packages in Azure Core to provide behavior consistent across all Azure SDK libraries. This includes, but is not limited to:\nHttpClient, HttpPipeline, Response, etc for http client, pipeline and related functionality ClientLogger for logging PagedFlux and PagedIterable for returning paged results SyncPoller and PollerFlux for long running operations TokenCredential, AzureKeyCredential, etc for common auth interfaces\nSee the Azure Core readme for more details."
  },
  {
    "heading": "Using Primitive Types",
    "content": "⛔️ DO NOT create API that exposes the old Java date library (e.g. java.util.Date, java.util.Calendar, and java.util.Timezone). All API must use the new date / time APIs that shipped in JDK 8 in the java.time package.\n⛔️ DO NOT create API that exposes the java.net.URL API. This API is difficult to work with, and more frequently gets in the users way rather than provide any real assistance. Instead, use the String type to represent the URL. When it is necessary to parse this String into a URL, and if it fails to be parsed (throwing a checked MalformedURLException), catch this internally and throw an unchecked IllegalArgumentException instead.\n✅ DO represent file paths using the Java java.nio.file.Path type. Do not use String or the older java.io.File type.\n✅ DO wrap primitive types where appropriate to represent a meaningful domain entity even if the model type contains a single field. For example, a phone number is just a string, but creating a new type to wrap primitive String type can be more informative and represents a domain concept. It may also provide stronger guarantees and validation than just the primitive type.\npublic final class PhoneNumber {\n    private String phoneNumber;\n\n    public PhoneNumber setPhoneNumber(String phoneNumber) {\n        ...\n    }\n\n    public String getPhoneNumber() {\n        ...\n    }\n}"
  },
  {
    "heading": "Exceptions",
    "content": "Error handling is an important aspect of implementing a client library. It is the primary method by which problems are communicated to the consumer. We convey errors to developers by throwing appropriate exceptions from our service methods.\n✅ DO throw an exception when any HTTP request fails with an HTTP status code that is not defined by the service/Swagger as a successful status code.\n✅ DO use unchecked exceptions. Java offers checked and unchecked exceptions, where checked exceptions force the user to introduce verbose try .. catch code blocks and handle each specified exception. Unchecked exceptions avoid verbosity and improve scalability issues inherent with checked exceptions in large apps.\nIn the case of a higher-level method that produces multiple HTTP requests, either the last exception or an aggregate exception of all failures should be produced.\n✅ DO use the following standard Java exceptions for pre-condition checking:\nException When to use IllegalArgumentException When a method argument is non-null, but inappropriate IllegalStateException When the object state means method invocation can’t continue NullPointerException When a method argument is null and null is unexpected UnsupportedOperationException When an object doesn’t support method invocation\n⛔️ DO NOT create a new error type when a language-specific error type will suffice.\n✅ DO specify all checked and unchecked exceptions thrown in a method within the JavaDoc documentation on the method as @throws statements.\n✅ DO use the existing exception types present in the Azure core library for service request failures. Avoid creating new exception types. The following list outlines all available exception types (with indentation indicating exception type hierarchy):\nAzureException: Never use directly. Throw a more specific subtype. HttpResponseException: Thrown when an unsuccessful response is received with http status code (e.g. 3XX, 4XX, 5XX) from the service request. ClientAuthenticationException: Thrown when there’s a failure to authenticate against the service. DecodeException: Thrown when there’s an error during response deserialization. ResourceExistsException: Thrown when an HTTP request tried to create an already existing resource. ResourceModifiedException: Thrown for invalid resource modification with status code of 4XX, typically 412 Conflict. ResourceNotFoundException: Thrown when a resource is not found, typically triggered by a 412 response (for PUT) or 404 (for GET/POST). TooManyRedirectsException: Thrown when an HTTP request has reached the maximum number of redirect attempts. ServiceResponseException: Thrown when the request was sent to the service, but the client library wasn’t able to understand the response. ServiceRequestException: Thrown for an invalid response with custom error information.\n✅ DO extend from one of the above exceptions defined in azure-core when defining a new service-specific exception. Do not extend from RuntimeException directly.\n✅ DO define exception type in a public package if the exception is thrown from a public API. Do not throw an exception that is defined as package-private or is defined in implementation package."
  },
  {
    "heading": "Authentication",
    "content": "Azure services use a variety of different authentication schemes to allow clients to access the service. Conceptually, there are two entities responsible in this process: a credential and an authentication policy. Credentials provide confidential authentication data. Authentication policies use the data provided by a credential to authenticate requests to the service.\nPrimarily, all Azure services should support Azure Active Directory OAuth token authentication, and all clients of services that support Azure Active Directory OAuth token authentication must support authenticating requests in this manner.\n✅ DO provide service client fluent builder APIs that accepts an instance of the appropriate azure-core credential abstraction, namely TokenCredential, BasicAuthenticationCredential, or AzureKeyCredential.\n⛔️ DO NOT persist, cache, or reuse tokens beyond the validity period of the given token. If any caching is implemented, the token credential must be given the opportunity to refresh before it expires.\n✅ DO use authentication policy implementations from the Azure Core library where available.\n✅ DO reserve the API surface needed for TokenCredential authentication, in the rare case that a service does not yet support Azure Active Directory authentication.\nIn addition to Azure Active Directory OAuth, services may provide custom authentication schemes. In this case the following guidelines apply.\n✅ DO support all authentication schemes that the service supports.\n✅ DO define a public custom credential type which enables clients to authenticate requests using the custom scheme.\n⚠️ YOU SHOULD NOT define custom credential types extending or implementing the TokenCredential abstraction from Azure Core. This is especially true in type safe languages where extending or implementing this abstraction would break the type safety of other service clients, allowing users to instantiate them with the custom credential of the wrong service.\n✅ DO define custom credential types in the same namespace and package as the client, or in a service group namespace and shared package, not in Azure Core or Azure Identity.\n⛔️ DO NOT take compile-scope dependency on azure-identity library.\n✅ DO prepend custom credential type names with the service name or service group name to provide clear context to its intended scope and usage.\n✅ DO append Credential to the end of the custom credential type name. Note this must be singular not plural.\n✅ DO define a constructor or factory for the custom credential type which takes in ALL data needed for the custom authentication protocol.\n✅ DO define an update method which accepts all mutable credential data, and updates the credential in an atomic, thread safe manner.\n⛔️ DO NOT define public settable properties or fields which allow users to update the authentication data directly in a non-atomic manner.\n⚠️ YOU SHOULD NOT define public properties or fields which allow users to access the authentication data directly. They are most often not needed by end users, and are difficult to use in a thread safe manner. In the case that exposing the authentication data is necessary, all the data needed to authenticate requests should be returned from a single API which guarantees the data returned is in a consistent state.\n✅ DO provide service client constructors or factories that accept all supported credential types.\nClient libraries may support providing credential data via a connection string ONLY IF the service provides a connection string to users via the portal or other tooling. Connection strings are generally good for getting started as they are easily integrated into an application by copy/paste from the portal. However, connection strings are considered a lesser form of authentication because the credentials cannot be rotated within a running process.\n⛔️ DO NOT support constructing a service client with a connection string unless such connection string is available within the Azure portal or Azure CLI."
  },
  {
    "heading": "Namespaces",
    "content": "Java uses packages to group related types. Grouping services within a cloud infrastructure is common since it aids discoverability and provides structure to the reference documentation.\nIn Java, the namespace should be named com.azure.\u003cgroup\u003e.\u003cservice\u003e[.\u003cfeature\u003e]. All consumer-facing APIs that are commonly used should exist within this package structure. Here:\n\u003cgroup\u003e is the group for the service (see the list above) \u003cservice\u003e is the service name represented as a single word \u003cfeature\u003e is an optional subpackage to break services into separate components (for example, storage may have .blob, .files, and .queues)\n✅ DO start the package with com.azure to indicate an Azure client library.\n✅ DO construct the package name with all lowercase letters (no camel case is allowed), without spaces, hyphens, or underscores. For example, Azure Key Vault would be in com.azure.security.keyvault - note that the two words ‘Key’ and ‘Vault’ are brought together to keyvault, instead of keyVault, key_vault, or key-vault. It may further be shortened if the shortened version is well known in the community. For example, “Azure Media Analytics” would have a compressed service name of mediaanalytics, and “Azure Service Bus” would become servicebus.\n✅ DO pick a package name that allows the consumer to tie the package to the service being used. The package does NOT change when the branding of the product changes. Avoid the use of marketing names that may change.\n✅ DO use the following list as the group of services:\nNamespace Group Functional Area ai Artificial intelligence, including machine learning analytics Gathering data for metrics or usage containers Services related to containers communication Communication services data Dealing with structured data stores like databases diagnostics Gathering data for diagnosing issues digitaltwins Digital Twins, digital representations of physical spaces and IoT devices identity Authentication and authorization iot Internet of things management Control Plane (Azure Resource Manager) media Audio and video technologies messaging Messaging services, like push notifications or pub-sub mixedreality Mixed reality technologies monitor Services that are offered by Azure Monitor quantum Quantum computing technologies search Search technologies security Security and cryptography storage Storage of unstructured data\nIf the client library does not seem to fit into the group list, contact the Architecture Board to discuss the namespace requirements.\n✅ DO place the management (Azure Resource Manager) API in the resourcemanager group. Use the grouping com.azure.resourcemanager.\u003cservice\u003e for the namespace. Management plane libraries do not have a \u003cgroup\u003e.\n✅ DO register the chosen namespace with the Architecture Board. Open an issue to request the namespace. See the registered namespace list for a list of the currently registered namespaces."
  },
  {
    "heading": "Example Namespaces",
    "content": "Here are some examples of namespaces that meet these guidelines:\ncom.azure.identity.activedirectory com.azure.iot.deviceprovisioning com.azure.storage.blob com.azure.messaging.notificationhubs (the client library for Notification Hubs) com.azure.resourcemanager.notificationhubs (the management library for Notification Hubs)\nHere are some namespaces that do not meet the guidelines:\ncom.microsoft.azure.cosmosdb (not in the com.azure namespace and does not use grouping) com.azure.cognitiveservice.vision (the grouping cognitiveservice is not in the approved list)"
  },
  {
    "heading": "Support for Mocking",
    "content": "All client libraries must support mocking to enable non-live testing of service clients by customers. One of the key things we want to support is to allow consumers of the library to easily write repeatable unit-tests for their applications without activating a service. This allows them to reliably and quickly test their code without worrying about the vagaries of the underlying service implementation (including, for example, network conditions or service outages). Mocking is also helpful to simulate failures, edge cases, and hard to reproduce situations (for example: does code work on February 29th).\nBelow is an example of writing a mock unit test using the Mockito framework. For more details on using Mockito in the context of the Azure SDK for Java, refer to the unit testing wiki documentation.\npublic class UserPreferencesTest {\n    @Test\n    public void getThemeTest() {\n        // create a mock instance of client\n        ConfigurationClient configurationClient \u003d mock(ConfigurationClient.class);\n\n        // mock the client response\n        when(configurationClient.getSetting(\"theme\", null)).thenReturn(new ConfigurationSetting().setValue(\"light\"));\n\n        // wire the mock client to UserPreferences\n        UserPreferences userPreferences \u003d new UserPreferences(configurationClient);\n\n        // assert the client response\n        assertEquals(Theme.LIGHT, userPreferences.getTheme());\n    }\n}\n✅ DO support mocking to enable non-live testing of service clients (and by extension also model types, option types, etc) by customers.\n✅ DO support mocking of all IO operations (including network and file operations)."
  },
  {
    "heading": "Maven",
    "content": "All client libraries for Java standardize on the Maven build tooling for build and dependency management. This section details the standard configuration that must be used in all client libraries.\n✅ DO ship a maven pom.xml for each client library, or for each module within that client library (e.g. Storage might have one each for blob, queue, and file).\n✅ DO specify the groupId as com.azure.\n✅ DO specify the artifactId to be of the form azure-\u003cgroup\u003e-\u003cservice\u003e, for example, azure-storage-blob. In cases where the client library has multiple children modules, set the root POM artifactId to be of the form azure-\u003cgroup\u003e-\u003cservice\u003e-parent.\n✅ DO specify the name element to take the form Microsoft Azure client library for \u003cservice name\u003e.\n✅ DO specify the description element to be a slightly longer statement along the lines of This package contains the Microsoft Azure \u003cservice\u003e client library.\n✅ DO specify the url element to point to the root of the GitHub repository (i.e. https://github.com/Azure/azure-sdk-for-java).\n✅ DO specify the source code management section, to specify where the source code resides for the client library. If the source code is located in the https://github.com/Azure/azure-sdk-for-java repository, then the following form must be used:\n\u003cscm\u003e\n    \u003curl\u003escm:git:https://github.com/Azure/azure-sdk-for-java\u003c/url\u003e\n    \u003cconnection\u003escm:git:git@github.com:Azure/azure-sdk-for-java.git\u003c/connection\u003e\n    \u003ctag\u003eHEAD\u003c/tag\u003e\n\u003c/scm\u003e\n⛔️ DO NOT change the developers section of the POM file - it must only list a developer id of microsoft and a name of Microsoft Corporation."
  },
  {
    "heading": "Service-Specific Common Libraries",
    "content": "There are occasions when common code needs to be shared between several client libraries. For example, a set of cooperating client libraries may wish to share a set of exceptions or models.\n✅ DO gain Architecture Board approval prior to implementing a common library.\n✅ DO minimize the code within a common library. Code within the common library is available to the consumer of the client library and shared by multiple client libraries within the same namespace.\n✅ DO store the common library in the same namespace as the associated client libraries.\nA common library will only be approved if:\nThe consumer of the non-shared library will consume the objects within the common library directly, AND The information will be shared between multiple client libraries.\nLet’s take two examples:\nImplementing two Cognitive Services client libraries, we find a model is required that is produced by one Cognitive Services client library and consumed by another Cognitive Services client library, or the same model is produced by two client libraries. The consumer is required to do the passing of the model in their code, or may need to compare the model produced by one client library vs. that produced by another client library. This is a good candidate for choosing a common library. Two Cognitive Services client libraries throw an ObjectNotFound exception to indicate that an object was not detected in an image. The user might trap the exception, but otherwise will not operate on the exception. There is no linkage between the ObjectNotFound exception in each client library. This is not a good candidate for creation of a common library (although you may wish to place this exception in a common library if one exists for the namespace already). Instead, produce two different exceptions - one in each client library."
  },
  {
    "heading": "Java 9 Modules",
    "content": "Java 9 and later support the notion of a module. A module exports certain packages, and requires other modules. Any package that is exported can be used by other modules, and anything that is not exported is invisible at compile and run times. This is a far stronger form of encapsulation than has existed previously for Java. For the Azure SDK for Java, a client library will be represented as one or more modules. Two good resources to understand modules are available on oracle.com and baeldung.com.\n✅ DO include a module-info.java file for each module you ship.\n✅ DO name your module based on the root package of the client library it represents. For example, com.azure.core or com.azure.storage.blob.\n✅ DO require only the minimum set of modules relevant for the module being developed.\n✅ DO export only packages that are considered public API. In particular, do not export packages that are in the implementation package namespace, as these, by convention, are not intended for public use.\n⛔️ DO NOT conditionally export or opens packages to other modules without prior approval by the architecture board. A conditional export or opens statement takes the form export X to Y or opens X to Y.\n⛔️ DO NOT have the same package in multiple modules. That is, do not have com.azure.storage.blob in module com.azure.storage.blob and in module com.azure.storage.blob.extras. It is however allowed to have different packages with common parent packages split across different modules. For example, a package named com.azure.storage can be in one module, and com.azure.storage.blob can be in another."
  },
  {
    "heading": "Versioning",
    "content": "✅ DO be 100% backwards compatible with older versions of the same package.\n✅ DO call the highest supported service API version by default, and ensure this is clearly documented.\n✅ DO allow the consumer to explicitly select a supported service API version when instantiating the service client, by using the service client builder with a property called serviceVersion. This method must take a type implementing the ServiceVersion interface, named specifically for the service, but as generally as possible. For example, IdentityServiceVersion for Identity. For a service with multiple sub-services, such as Storage, if the services all share a common versioning system, StorageServiceVersion would suffice. If they did not, it would be necessary to have separate BlobServiceVersion, QueueServiceVersion, and FileServiceVersion enums.\n✅ DO offer a getLatest() method on the enum that returns the latest service version. If a consumer doesn’t specify a service version, the builder will call getLatest() to obtain the appropriate service version.\n✅ DO use the version naming used by the service itself in naming the version values in the enum. The standard approach takes the form V\u003cyear\u003e_\u003cmonth\u003e_\u003cday\u003e, such as V2019_05_09. Being consistent with the service naming enables easier cross-referencing between service versions and the availability of features in the client library.\nNote: Third-party reusable libraries shouldn’t change behavior without an explicit decision by the developer. When developing libraries that are based on the Azure SDK, lock the library to a specific service version to avoid changes in behavior.\n✅ DO introduce a new library (with new library names, new package names, and new type names) if you must do an API breaking change.\nBreaking changes should happen rarely, if ever. Register your intent to do a breaking change with [adparch]. You’ll need to have a discussion with the language architect before approval."
  },
  {
    "heading": "Client Version Numbers",
    "content": "Consistent version number scheme allows consumers to determine what to expect from a new version of the library.\n✅ DO use MAJOR.MINOR.PATCH format for the library version.\nUse -beta.N suffix for beta package versions. For example, 1.0.0-beta.2.\n✅ DO change the version number of the client library when ANYTHING changes in the client library.\n✅ DO increment the patch version when fixing a bug.\n⛔️ DO NOT include new APIs in a patch release.\n✅ DO increment the major or minor version when adding support for a service API version.\n✅ DO increment the major or minor version when adding a new method to the public API.\n☑️ YOU SHOULD increment the major version when making large feature changes.\n✅ DO select a version number greater than the highest version number of any other released Track 1 packages for the service in all languages."
  },
  {
    "heading": "Dependencies",
    "content": "Dependencies bring in many considerations that are often easily avoided by avoiding the dependency.\nVersioning - Many programming languages do not allow a consumer to load multiple versions of the same package. So, if we have an client library that requires v3 of package Foo and the consumer wants to use v5 of package Foo, then the consumer cannot build their application. This means that client libraries should not have dependencies by default. Size - Consumer applications must be able to deploy as fast as possible into the cloud and move in various ways across networks. Removing additional code (like dependencies) improves deployment performance. Licensing - You must be conscious of the licensing restrictions of a dependency and often provide proper attribution and notices when using them. Compatibility - Often times you do not control a dependency and it may choose to evolve in a direction that is incompatible with your original use. Security - If a security vulnerability is discovered in a dependency, it may be difficult or time consuming to get the vulnerability corrected if Microsoft does not control the dependency’s code base.\n✅ DO depend on the com.azure.core library for functionality that is common across all client libraries. This library includes APIs for HTTP connectivity, global configuration, logging, and credential handling.\n⛔️ DO NOT be dependent on any other packages within the client library distribution package, with the exception of the following:\nName Role Allowed in public API Notes Apache Avro Avro parser No Used only in azure-core-serializer-avro-apache. Jackson JSON parser No Use azure-core JsonSerializer abstractions rather than Jackson directly. JNA Native access to OS No Used only in azure-identity. Netty HTTP client No Used only in azure-core-http-netty. OkHttp HTTP client No Used only in azure-core-http-okhttp. OpenTelemetry Telemetry library No Used only in azure-core-tracing-opentelemetry. Reactor Reactive library Yes slf4j Logging framework No Use the azure core ClientLogger API rather than slf4j directly. Apache Qpid Proton-J AMQP messaging No Used only in azure-core-amqp.\nDependency versions are purposefully not specified in this table. The definitive source for the dependency versions being used in all client libraries is published in a separate document that is generated from the azure-sdk-for-java code repository. Transitive dependencies of these libraries, or dependencies that are part of a family of dependencies, are allowed. For example, reactor-netty is a child project of reactor.\n⛔️ DO NOT introduce new dependencies on third-party libraries that are already referenced from the parent POM, without first discussing with the Architecture Board].\n⛔️ DO NOT specify or change dependency versions in your client library POM file. All dependency versioning must be centralized through existing tooling.\n⛔️ DO NOT include dependencies on external libraries that are -SNAPSHOT versions. All dependencies must be released versions.\n☑️ YOU SHOULD consider copying or linking required code into the client library in order to avoid taking a dependency on another package that could conflict with the ecosystem. Make sure that you are not violating any licensing agreements and consider the maintenance that will be required of the duplicated code. “A little copying is better than a little dependency” (YouTube).\n⛔️ DO NOT depend on concrete logging, dependency injection, or configuration technologies (except as implemented in the com.azure.core library). The client library will be used in applications that might be using the logging, DI, and configuration technologies of their choice."
  },
  {
    "heading": "Native code",
    "content": "Native code plugins cause compatibility issues and require additional scrutiny. Certain languages compile to a machine-native format (for example, C or C++), whereas most modern languages opt to compile to an intermediary format to aid in cross-platform support.\n⛔️ DO NOT write platform-specific / native code."
  },
  {
    "heading": "Documentation",
    "content": "✅ DO ensure that anybody can clone the repo containing the client library and execute mvn javadoc:javadoc to generate the full and complete JavaDoc output for the code, without any need for additional processing steps.\n✅ DO include descriptive text of the method, as well as all parameters, the returned value (if any), all checked exceptions, as well as all unchecked exceptions. Failing to document unchecked exceptions means that users do not have any indication of how they can handle exceptional circumstances.\n✅ DO include code samples in all class-level JavaDoc, and in relevant method-level JavaDoc.\n⛔️ DO NOT hard-code the sample within the JavaDoc (where it may become stale). Put code samples in /src/samples/java and use the available tooling to reference them.\n✅ DO follow the naming convention outlined below for naming samples tags:\nIf a new instance of the class is created through build() method of a builder or through constructor: \u003cpackagename\u003e.\u003cclassname\u003e.instantiation For other methods in the class: \u003cpackagename\u003e.\u003cclassname\u003e.\u003cmethodName\u003e For overloaded methods, or methods with arguments: \u003cpackagename\u003e.\u003cclassname\u003e.\u003cmethodName\u003e#\u003cargType1\u003e-\u003cargType2\u003e Camel casing for the method name and argument types is valid, but not required."
  },
  {
    "heading": "General guidelines",
    "content": "✅ DO include your service’s content developer in the architectural review for your library. To find the content developer you should work with, check with your team’s Program Manager.\n✅ DO follow the Azure SDK Contributors Guide (MICROSOFT INTERNAL)\n✅ DO adhere to the Microsoft style guides when you write public-facing documentation. (MICROSOFT INTERNAL)\nMicrosoft Writing Style Guide Microsoft Cloud Style Guide\nUse the style guides for both long-form documentation like a README and the docstrings in your code.\n☑️ YOU SHOULD attempt to document your library into silence. Preempt developers’ usage questions and minimize GitHub issues by clearly explaining your API in the docstrings. Include information on service limits and errors they might hit, and how to avoid and recover from those errors.\nAs you write your code, doc it so you never hear about it again. The fewer questions you have to answer about your client library, the more time you have to build new features for your service.\n⛔️ DO NOT include version details when specifying Maven dependency statements. Always refer the user back to a central document detailing how to use the Azure SDK for Java BOM."
  },
  {
    "heading": "Samples",
    "content": "Code samples are small applications that demonstrate a certain feature that is relevant to the client library. Samples allow developers to quickly understand the full usage requirements of your client library. Code samples shouldn’t be any more complex than they needed to demonstrate the feature. Don’t write full applications. Samples should have a high signal to noise ratio between useful code and boilerplate code for non-related reasons.\n✅ DO include code samples alongside your library’s code within the repository. The samples should clearly and succinctly demonstrate the code most developers need to write with your library. Include samples for all common operations. Pay attention to operations that are complex or might be difficult for new users of your library. Include samples for the champion scenarios you’ve identified for the library.\n✅ DO place code samples within the /src/samples/java directory within the client library root directory. The samples will be compiled, but not packaged into the resulting jar.\n✅ DO ensure that each sample file is executable by including a public static void main(String[] args) method.\n✅ DO use the latest coding conventions when creating samples. Make liberal use of modern Java syntax and APIs (for example, diamond operators) as they remove boilerplate from your samples and highlight you library. Don’t use any language feature or API of Java the currently supported Java baseline. The current supported Java version is Java 8.\n✅ DO compile sample code using the latest major release of the library. Review sample code for freshness. At least one commit must be made (to update dependencies) to each sample per semester.\n✅ DO ensure that code samples can be easily grafted from the documentation into a users own application. For example, don’t rely on variable declarations in other samples.\n✅ DO write code samples for ease of reading and comprehension over code compactness and efficiency.\n✅ DO ensure that samples can run in Windows, macOS, and Linux development environments. Don’t use a non-standard developer toolchain.\n✅ DO build and test your code samples using the repository’s continuous integration (CI) to ensure they remain functional.\n⛔️ DO NOT combine multiple operations in a code sample unless it’s required for demonstrating the type or member. For example, a Cosmos DB code sample doesn’t include both account and container creation operations. Create a sample for account creation, and another sample for container creation.\nCombined operations require knowledge of additional operations that might be outside their current focus. The developer must first understand the code surrounding the operation they’re working on, and can’t copy and paste the code sample into their project."
  },
  {
    "heading": "Java API Best Practices",
    "content": "This section introduces guidelines for fundamental Java development design decisions that are used throughout the Azure SDK for Java. For further guidance, consider reviewing presentations and documentation on Java API design best practices."
  },
  {
    "heading": "Naming Patterns",
    "content": "Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.\n✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:\nA class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.\n⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().\n✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.\n✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.\n⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.\n⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case."
  }
]