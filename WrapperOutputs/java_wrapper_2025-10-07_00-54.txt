Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-07_00-54


// Wrapper for setLegalHold and setLegalHoldWithResponse to provide a single entry point with sensible defaults and input validation.
// Reason: Both methods perform the same operation, differing only in whether a Response<T> is returned and whether a RequestContext is provided. This wrapper allows the user to specify if they want the full response or not, and optionally pass a RequestContext, improving developer experience and reducing overload confusion.

public LegalHold setLegalHold(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    LegalHold legalHold,
    RequestContext requestContext,
    boolean withResponse
) {
    if (subscriptionId == null || subscriptionId.isEmpty()) {
        throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
    }
    if (resourceGroupName == null || resourceGroupName.isEmpty()) {
        throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
    }
    if (accountName == null || accountName.isEmpty()) {
        throw new IllegalArgumentException("accountName cannot be null or empty.");
    }
    if (containerName == null || containerName.isEmpty()) {
        throw new IllegalArgumentException("containerName cannot be null or empty.");
    }
    if (apiVersion == null || apiVersion.isEmpty()) {
        throw new IllegalArgumentException("apiVersion cannot be null or empty.");
    }
    if (legalHold == null) {
        throw new IllegalArgumentException("legalHold cannot be null.");
    }
    if (withResponse) {
        Response<LegalHold> response = this.setLegalHoldWithResponse(
            subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold,
            requestContext != null ? requestContext : new RequestContext()
        );
        return response.getValue();
    } else {
        return this.setLegalHold(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold);
    }
}

// Wrapper for clearLegalHold and clearLegalHoldWithResponse to provide a single entry point with sensible defaults and input validation.
// Reason: Both methods perform the same operation, differing only in whether a Response<T> is returned and whether a RequestContext is provided. This wrapper allows the user to specify if they want the full response or not, and optionally pass a RequestContext, improving developer experience and reducing overload confusion.

public LegalHold clearLegalHold(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    LegalHold legalHold,
    RequestContext requestContext,
    boolean withResponse
) {
    if (subscriptionId == null || subscriptionId.isEmpty()) {
        throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
    }
    if (resourceGroupName == null || resourceGroupName.isEmpty()) {
        throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
    }
    if (accountName == null || accountName.isEmpty()) {
        throw new IllegalArgumentException("accountName cannot be null or empty.");
    }
    if (containerName == null || containerName.isEmpty()) {
        throw new IllegalArgumentException("containerName cannot be null or empty.");
    }
    if (apiVersion == null || apiVersion.isEmpty()) {
        throw new IllegalArgumentException("apiVersion cannot be null or empty.");
    }
    if (legalHold == null) {
        throw new IllegalArgumentException("legalHold cannot be null.");
    }
    if (withResponse) {
        Response<LegalHold> response = this.clearLegalHoldWithResponse(
            subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold,
            requestContext != null ? requestContext : new RequestContext()
        );
        return response.getValue();
    } else {
        return this.clearLegalHold(subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold);
    }
}