Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-09-24_20-25


// Wrapper for setLegalHold and setLegalHoldWithResponse
// Reason: These methods have overlapping functionality (setting legal hold tags) and differ only by whether they return a Response<T> and accept a RequestContext. To improve developer experience and follow the options pattern, we introduce a wrapper that allows the user to optionally specify RequestContext and choose whether to receive the full Response or just the logical entity.

public LegalHold setLegalHold(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    LegalHold legalHold,
    RequestContext requestContext,
    boolean returnResponse) {

    if (subscriptionId == null || resourceGroupName == null || accountName == null
        || containerName == null || apiVersion == null || legalHold == null) {
        throw new IllegalArgumentException("Required parameter is null.");
    }

    if (returnResponse) {
        Response<LegalHold> response = this.setLegalHoldWithResponse(
            subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold, requestContext);
        return response.getValue();
    } else {
        return this.setLegalHold(
            subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold);
    }
}

// Wrapper for clearLegalHold and clearLegalHoldWithResponse
// Reason: These methods have overlapping functionality (clearing legal hold tags) and differ only by whether they return a Response<T> and accept a RequestContext. This wrapper allows the user to optionally specify RequestContext and choose the return type.

public LegalHold clearLegalHold(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    LegalHold legalHold,
    RequestContext requestContext,
    boolean returnResponse) {

    if (subscriptionId == null || resourceGroupName == null || accountName == null
        || containerName == null || apiVersion == null || legalHold == null) {
        throw new IllegalArgumentException("Required parameter is null.");
    }

    if (returnResponse) {
        Response<LegalHold> response = this.clearLegalHoldWithResponse(
            subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold, requestContext);
        return response.getValue();
    } else {
        return this.clearLegalHold(
            subscriptionId, resourceGroupName, accountName, containerName, apiVersion, legalHold);
    }
}

// Wrapper for get and getWithResponse
// Reason: Both methods retrieve container properties, differing only by whether they return a Response<T> and accept a RequestContext. This wrapper enables optional RequestContext and return type selection.

public BlobContainer getContainer(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    RequestContext requestContext,
    boolean returnResponse) {

    if (subscriptionId == null || resourceGroupName == null || accountName == null
        || containerName == null || apiVersion == null) {
        throw new IllegalArgumentException("Required parameter is null.");
    }

    if (returnResponse) {
        Response<BlobContainer> response = this.getWithResponse(
            subscriptionId, resourceGroupName, accountName, containerName, apiVersion, requestContext);
        return response.getValue();
    } else {
        return this.get(
            subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
    }
}

// Wrapper for create and createWithResponse
// Reason: Both methods create a container, differing only by Response<T> and RequestContext. This wrapper allows optional RequestContext and return type selection.

public BlobContainer createContainer(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    BlobContainer blobContainer,
    RequestContext requestContext,
    boolean returnResponse) {

    if (subscriptionId == null || resourceGroupName == null || accountName == null
        || containerName == null || apiVersion == null || blobContainer == null) {
        throw new IllegalArgumentException("Required parameter is null.");
    }

    if (returnResponse) {
        Response<BlobContainer> response = this.createWithResponse(
            subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer, requestContext);
        return response.getValue();
    } else {
        return this.create(
            subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer);
    }
}

// Wrapper for update and updateWithResponse
// Reason: Both methods update container properties, differing only by Response<T> and RequestContext. This wrapper allows optional RequestContext and return type selection.

public BlobContainer updateContainer(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    BlobContainer blobContainer,
    RequestContext requestContext,
    boolean returnResponse) {

    if (subscriptionId == null || resourceGroupName == null || accountName == null
        || containerName == null || apiVersion == null || blobContainer == null) {
        throw new IllegalArgumentException("Required parameter is null.");
    }

    if (returnResponse) {
        Response<BlobContainer> response = this.updateWithResponse(
            subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer, requestContext);
        return response.getValue();
    } else {
        return this.update(
            subscriptionId, resourceGroupName, accountName, containerName, apiVersion, blobContainer);
    }
}

// Wrapper for delete and deleteWithResponse
// Reason: Both methods delete a container, differing only by Response<Void> and RequestContext. This wrapper allows optional RequestContext and return type selection.

public void deleteContainer(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    String apiVersion,
    RequestContext requestContext,
    boolean returnResponse) {

    if (subscriptionId == null || resourceGroupName == null || accountName == null
        || containerName == null || apiVersion == null) {
        throw new IllegalArgumentException("Required parameter is null.");
    }

    if (returnResponse) {
        this.deleteWithResponse(
            subscriptionId, resourceGroupName, accountName, containerName, apiVersion, requestContext);
    } else {
        this.delete(
            subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
    }
}