Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-07_22-51


// Wrapper for: create, createWithResponse, update, updateWithResponse, get, getWithResponse, delete, deleteWithResponse, list, listWithResponse
// Reason: These methods share similar parameter patterns and CRUD operations on containers. Wrapping them using an options pattern (e.g., ContainerOptions) and providing overloads for common scenarios improves developer experience, reduces parameter overload, and aligns with the Azure SDK guidelines for option parameters and service method design.

public class ContainerOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private String apiVersion;
    private BlobContainer blobContainer;
    private String maxpagesize;
    private String filter;
    private ListContainersInclude include;
    private RequestContext requestContext;

    public ContainerOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName) {
        if (subscriptionId == null || resourceGroupName == null || accountName == null || containerName == null) {
            throw new IllegalArgumentException("Required parameters must not be null.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
    }

    public String getSubscriptionId() { return subscriptionId; }
    public String getResourceGroupName() { return resourceGroupName; }
    public String getAccountName() { return accountName; }
    public String getContainerName() { return containerName; }

    public String getApiVersion() { return apiVersion; }
    public ContainerOptions setApiVersion(String apiVersion) { this.apiVersion = apiVersion; return this; }

    public BlobContainer getBlobContainer() { return blobContainer; }
    public ContainerOptions setBlobContainer(BlobContainer blobContainer) { this.blobContainer = blobContainer; return this; }

    public String getMaxpagesize() { return maxpagesize; }
    public ContainerOptions setMaxpagesize(String maxpagesize) { this.maxpagesize = maxpagesize; return this; }

    public String getFilter() { return filter; }
    public ContainerOptions setFilter(String filter) { this.filter = filter; return this; }

    public ListContainersInclude getInclude() { return include; }
    public ContainerOptions setInclude(ListContainersInclude include) { this.include = include; return this; }

    public RequestContext getRequestContext() { return requestContext; }
    public ContainerOptions setRequestContext(RequestContext requestContext) { this.requestContext = requestContext; return this; }
}

// Convenience wrapper methods

public BlobContainer createContainer(ContainerOptions options) {
    if (options == null) throw new IllegalArgumentException("options cannot be null.");
    return this.create(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getBlobContainer()
    );
}

public Response<BlobContainer> createContainerWithResponse(ContainerOptions options) {
    if (options == null) throw new IllegalArgumentException("options cannot be null.");
    return this.createWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getBlobContainer(),
        options.getRequestContext()
    );
}

public BlobContainer updateContainer(ContainerOptions options) {
    if (options == null) throw new IllegalArgumentException("options cannot be null.");
    return this.update(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getBlobContainer()
    );
}

public Response<BlobContainer> updateContainerWithResponse(ContainerOptions options) {
    if (options == null) throw new IllegalArgumentException("options cannot be null.");
    return this.updateWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getBlobContainer(),
        options.getRequestContext()
    );
}

public BlobContainer getContainer(ContainerOptions options) {
    if (options == null) throw new IllegalArgumentException("options cannot be null.");
    return this.get(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion()
    );
}

public Response<BlobContainer> getContainerWithResponse(ContainerOptions options) {
    if (options == null) throw new IllegalArgumentException("options cannot be null.");
    return this.getWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getRequestContext()
    );
}

public void deleteContainer(ContainerOptions options) {
    if (options == null) throw new IllegalArgumentException("options cannot be null.");
    this.delete(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion()
    );
}

public Response<Void> deleteContainerWithResponse(ContainerOptions options) {
    if (options == null) throw new IllegalArgumentException("options cannot be null.");
    return this.deleteWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getRequestContext()
    );
}

public ListContainerItems listContainers(ContainerOptions options) {
    if (options == null) throw new IllegalArgumentException("options cannot be null.");
    return this.list(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getApiVersion()
    );
}

public Response<ListContainerItems> listContainersWithResponse(ContainerOptions options) {
    if (options == null) throw new IllegalArgumentException("options cannot be null.");
    return this.listWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getApiVersion(),
        options.getMaxpagesize(),
        options.getFilter(),
        options.getInclude(),
        options.getRequestContext()
    );
}// Wrapper for setLegalHold, setLegalHoldWithResponse, clearLegalHold, clearLegalHoldWithResponse
// Reason: These methods share nearly identical parameter lists and functionality (setting/clearing legal holds), and can be unified using an options parameter pattern for improved developer experience and future extensibility.

import com.azure.core.http.rest.Response;
import com.azure.core.util.RequestContext;
import java.util.Objects;

/**
 * Options for legal hold operations.
 */
public class LegalHoldOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private final String apiVersion;
    private final LegalHold legalHold;
    private RequestContext requestContext;

    public LegalHoldOptions(String subscriptionId, String resourceGroupName, String accountName,
                            String containerName, String apiVersion, LegalHold legalHold) {
        this.subscriptionId = Objects.requireNonNull(subscriptionId, "'subscriptionId' cannot be null.");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "'resourceGroupName' cannot be null.");
        this.accountName = Objects.requireNonNull(accountName, "'accountName' cannot be null.");
        this.containerName = Objects.requireNonNull(containerName, "'containerName' cannot be null.");
        this.apiVersion = Objects.requireNonNull(apiVersion, "'apiVersion' cannot be null.");
        this.legalHold = Objects.requireNonNull(legalHold, "'legalHold' cannot be null.");
    }

    public String getSubscriptionId() { return subscriptionId; }
    public String getResourceGroupName() { return resourceGroupName; }
    public String getAccountName() { return accountName; }
    public String getContainerName() { return containerName; }
    public String getApiVersion() { return apiVersion; }
    public LegalHold getLegalHold() { return legalHold; }
    public RequestContext getRequestContext() { return requestContext; }

    public LegalHoldOptions setRequestContext(RequestContext requestContext) {
        this.requestContext = requestContext;
        return this;
    }
}

/**
 * Sets or clears legal hold tags on a blob container.
 *
 * @param options The options for the legal hold operation.
 * @param set true to set legal hold, false to clear.
 * @return the LegalHold property of a blob container.
 */
public LegalHold updateLegalHold(LegalHoldOptions options, boolean set) {
    Objects.requireNonNull(options, "'options' cannot be null.");
    if (set) {
        return this.setLegalHold(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion(),
            options.getLegalHold()
        );
    } else {
        return this.clearLegalHold(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion(),
            options.getLegalHold()
        );
    }
}

/**
 * Sets or clears legal hold tags on a blob container with response.
 *
 * @param options The options for the legal hold operation.
 * @param set true to set legal hold, false to clear.
 * @return the Response containing the LegalHold property of a blob container.
 */
public Response<LegalHold> updateLegalHoldWithResponse(LegalHoldOptions options, boolean set) {
    Objects.requireNonNull(options, "'options' cannot be null.");
    if (set) {
        return this.setLegalHoldWithResponse(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion(),
            options.getLegalHold(),
            options.getRequestContext()
        );
    } else {
        return this.clearLegalHoldWithResponse(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion(),
            options.getLegalHold(),
            options.getRequestContext()
        );
    }
}

// Methods wrapped: setLegalHold, setLegalHoldWithResponse, clearLegalHold, clearLegalHoldWithResponse
// Reason: Unified by options parameter pattern and operation type, reducing parameter list complexity and improving extensibility.// Wrapper for createOrUpdateImmutabilityPolicy, createOrUpdateImmutabilityPolicyWithResponse, getImmutabilityPolicy, getImmutabilityPolicyWithResponse, lockImmutabilityPolicy, lockImmutabilityPolicyWithResponse, extendImmutabilityPolicy, extendImmutabilityPolicyWithResponse, deleteImmutabilityPolicy, deleteImmutabilityPolicyWithResponse
// Reason: These methods all operate on ImmutabilityPolicy resources and share a common set of parameters. Wrapping them using an options pattern improves developer experience by reducing parameter overloads and providing a single entry point for common operations, in line with the "Option Parameters" and "Service Methods" guidelines.

public class ImmutabilityPolicyOptions {
    private String subscriptionId;
    private String resourceGroupName;
    private String accountName;
    private String containerName;
    private String apiVersion;
    private String ifMatch;
    private ImmutabilityPolicy parameters;
    private RequestContext requestContext;

    public ImmutabilityPolicyOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion) {
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
        this.apiVersion = apiVersion;
    }

    public String getSubscriptionId() { return subscriptionId; }
    public String getResourceGroupName() { return resourceGroupName; }
    public String getAccountName() { return accountName; }
    public String getContainerName() { return containerName; }
    public String getApiVersion() { return apiVersion; }
    public String getIfMatch() { return ifMatch; }
    public ImmutabilityPolicy getParameters() { return parameters; }
    public RequestContext getRequestContext() { return requestContext; }

    public ImmutabilityPolicyOptions setIfMatch(String ifMatch) {
        this.ifMatch = ifMatch;
        return this;
    }
    public ImmutabilityPolicyOptions setParameters(ImmutabilityPolicy parameters) {
        this.parameters = parameters;
        return this;
    }
    public ImmutabilityPolicyOptions setRequestContext(RequestContext requestContext) {
        this.requestContext = requestContext;
        return this;
    }
}

// Example wrapper methods using the options pattern

public ImmutabilityPolicy createOrUpdateImmutabilityPolicy(ImmutabilityPolicyOptions options) {
    if (options == null) throw new IllegalArgumentException("options cannot be null");
    return this.createOrUpdateImmutabilityPolicy(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion()
    );
}

public Response<ImmutabilityPolicy> createOrUpdateImmutabilityPolicyWithResponse(ImmutabilityPolicyOptions options) {
    if (options == null) throw new IllegalArgumentException("options cannot be null");
    return this.createOrUpdateImmutabilityPolicyWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch(),
        options.getParameters(),
        options.getRequestContext()
    );
}

public ImmutabilityPolicy getImmutabilityPolicy(ImmutabilityPolicyOptions options) {
    if (options == null) throw new IllegalArgumentException("options cannot be null");
    return this.getImmutabilityPolicy(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion()
    );
}

public Response<ImmutabilityPolicy> getImmutabilityPolicyWithResponse(ImmutabilityPolicyOptions options) {
    if (options == null) throw new IllegalArgumentException("options cannot be null");
    return this.getImmutabilityPolicyWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch(),
        options.getRequestContext()
    );
}

public ImmutabilityPolicy lockImmutabilityPolicy(ImmutabilityPolicyOptions options) {
    if (options == null) throw new IllegalArgumentException("options cannot be null");
    return this.lockImmutabilityPolicy(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch()
    );
}

public Response<ImmutabilityPolicy> lockImmutabilityPolicyWithResponse(ImmutabilityPolicyOptions options) {
    if (options == null) throw new IllegalArgumentException("options cannot be null");
    return this.lockImmutabilityPolicyWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch(),
        options.getRequestContext()
    );
}

public ImmutabilityPolicy extendImmutabilityPolicy(ImmutabilityPolicyOptions options) {
    if (options == null) throw new IllegalArgumentException("options cannot be null");
    return this.extendImmutabilityPolicy(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch()
    );
}

public Response<ImmutabilityPolicy> extendImmutabilityPolicyWithResponse(ImmutabilityPolicyOptions options) {
    if (options == null) throw new IllegalArgumentException("options cannot be null");
    return this.extendImmutabilityPolicyWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch(),
        options.getParameters(),
        options.getRequestContext()
    );
}

public ImmutabilityPolicy deleteImmutabilityPolicy(ImmutabilityPolicyOptions options) {
    if (options == null) throw new IllegalArgumentException("options cannot be null");
    return this.deleteImmutabilityPolicy(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch()
    );
}

public Response<ImmutabilityPolicy> deleteImmutabilityPolicyWithResponse(ImmutabilityPolicyOptions options) {
    if (options == null) throw new IllegalArgumentException("options cannot be null");
    return this.deleteImmutabilityPolicyWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch(),
        options.getRequestContext()
    );
}