Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-07_22-03


// Wrapper for createWithResponse to provide a simpler overload with sensible defaults and input validation.
// Wrapped method: createWithResponse
// Reason: The original method has a long parameter list with mostly simple types. According to the "Option Parameters" guideline, provide a convenience overload for common scenarios, reducing parameter complexity and improving developer experience.

public BlobContainer createContainer(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    BlobContainer blobContainer
) {
    if (subscriptionId == null || subscriptionId.isEmpty()) {
        throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
    }
    if (resourceGroupName == null || resourceGroupName.isEmpty()) {
        throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
    }
    if (accountName == null || accountName.isEmpty()) {
        throw new IllegalArgumentException("accountName cannot be null or empty.");
    }
    if (containerName == null || containerName.isEmpty()) {
        throw new IllegalArgumentException("containerName cannot be null or empty.");
    }
    if (blobContainer == null) {
        throw new IllegalArgumentException("blobContainer cannot be null.");
    }
    // Provide sensible default for apiVersion and requestContext
    String defaultApiVersion = "2021-09-01";
    RequestContext defaultRequestContext = new RequestContext();
    return createWithResponse(
        subscriptionId,
        resourceGroupName,
        accountName,
        containerName,
        defaultApiVersion,
        blobContainer,
        defaultRequestContext
    ).getValue();
}// Wrapper for deleteImmutabilityPolicy using options pattern for future extensibility.
// Wrapped method: deleteImmutabilityPolicy
// Reason: Applies the options parameter pattern for improved extensibility and developer experience per guidelines.

public static class DeleteImmutabilityPolicyOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private final String apiVersion;
    private String ifMatch;

    public DeleteImmutabilityPolicyOptions(
        String subscriptionId,
        String resourceGroupName,
        String accountName,
        String containerName,
        String apiVersion
    ) {
        if (subscriptionId == null || subscriptionId.isEmpty()) {
            throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
        }
        if (resourceGroupName == null || resourceGroupName.isEmpty()) {
            throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
        }
        if (accountName == null || accountName.isEmpty()) {
            throw new IllegalArgumentException("accountName cannot be null or empty.");
        }
        if (containerName == null || containerName.isEmpty()) {
            throw new IllegalArgumentException("containerName cannot be null or empty.");
        }
        if (apiVersion == null || apiVersion.isEmpty()) {
            throw new IllegalArgumentException("apiVersion cannot be null or empty.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
        this.apiVersion = apiVersion;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getContainerName() {
        return containerName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public String getIfMatch() {
        return ifMatch;
    }

    public DeleteImmutabilityPolicyOptions setIfMatch(String ifMatch) {
        this.ifMatch = ifMatch;
        return this;
    }
}

/**
 * Convenience wrapper for aborting an unlocked immutability policy using options pattern.
 * 
 * @param options The options to configure the delete operation.
 * @return the ImmutabilityPolicy property of a blob container.
 */
public ImmutabilityPolicy deleteImmutabilityPolicy(DeleteImmutabilityPolicyOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    return this.deleteImmutabilityPolicy(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch()
    );
}// Wrapper for getWithResponse method to provide a simpler overload without requiring apiVersion and requestContext.
// This improves developer experience by reducing required parameters for common scenarios, following the "Option Parameters" guideline.
// Wrapped method: getWithResponse(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, RequestContext requestContext)
// Reason: Provide a convenience overload for common use cases where apiVersion and requestContext can be defaulted.

public BlobContainer getContainer(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName
) {
    if (subscriptionId == null || subscriptionId.isEmpty()) {
        throw new IllegalArgumentException("subscriptionId cannot be null or empty");
    }
    if (resourceGroupName == null || resourceGroupName.isEmpty()) {
        throw new IllegalArgumentException("resourceGroupName cannot be null or empty");
    }
    if (accountName == null || accountName.isEmpty()) {
        throw new IllegalArgumentException("accountName cannot be null or empty");
    }
    if (containerName == null || containerName.isEmpty()) {
        throw new IllegalArgumentException("containerName cannot be null or empty");
    }
    // Use sensible defaults for apiVersion and requestContext
    String defaultApiVersion = "2021-04-01"; // Replace with the actual default if different
    RequestContext defaultRequestContext = new RequestContext();

    return getWithResponse(
        subscriptionId,
        resourceGroupName,
        accountName,
        containerName,
        defaultApiVersion,
        defaultRequestContext
    ).getValue();
}// Wrapper for setLegalHold with options parameter pattern
// Wrapped method: setLegalHold
// Reason: Applies the options parameter pattern for future extensibility and improved developer experience.

public static class SetLegalHoldOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private final String apiVersion;
    private final LegalHold legalHold;

    public SetLegalHoldOptions(String subscriptionId, String resourceGroupName, String accountName,
                               String containerName, String apiVersion, LegalHold legalHold) {
        if (subscriptionId == null || subscriptionId.isEmpty()) {
            throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
        }
        if (resourceGroupName == null || resourceGroupName.isEmpty()) {
            throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
        }
        if (accountName == null || accountName.isEmpty()) {
            throw new IllegalArgumentException("accountName cannot be null or empty.");
        }
        if (containerName == null || containerName.isEmpty()) {
            throw new IllegalArgumentException("containerName cannot be null or empty.");
        }
        if (apiVersion == null || apiVersion.isEmpty()) {
            throw new IllegalArgumentException("apiVersion cannot be null or empty.");
        }
        if (legalHold == null) {
            throw new IllegalArgumentException("legalHold cannot be null.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
        this.apiVersion = apiVersion;
        this.legalHold = legalHold;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getContainerName() {
        return containerName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public LegalHold getLegalHold() {
        return legalHold;
    }
}

public LegalHold setLegalHold(SetLegalHoldOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    return setLegalHold(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getLegalHold()
    );
}// Wrapper for setLegalHoldWithResponse
// Reason: Introduces an options parameter pattern for improved extensibility and developer experience per guideline.
// Methods wrapped: setLegalHoldWithResponse

/**
 * Options for setting legal hold tags on a blob container.
 */
public static class SetLegalHoldOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private String apiVersion;
    private LegalHold legalHold;

    /**
     * Constructor for required parameters.
     */
    public SetLegalHoldOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName) {
        if (subscriptionId == null || resourceGroupName == null || accountName == null || containerName == null) {
            throw new IllegalArgumentException("Required parameters must not be null.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getContainerName() {
        return containerName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public SetLegalHoldOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    public LegalHold getLegalHold() {
        return legalHold;
    }

    public SetLegalHoldOptions setLegalHold(LegalHold legalHold) {
        this.legalHold = legalHold;
        return this;
    }
}

/**
 * Sets legal hold tags using an options parameter.
 * 
 * @param options The options for setting legal hold.
 * @param requestContext The context to configure the HTTP request before HTTP client sends it.
 * @return the LegalHold property of a blob container.
 */
public Response<LegalHold> setLegalHoldWithResponse(SetLegalHoldOptions options, RequestContext requestContext) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    return this.setLegalHoldWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getLegalHold(),
        requestContext
    );
}// Wrapper for deleteImmutabilityPolicyWithResponse
// Wrapped method: deleteImmutabilityPolicyWithResponse
// Reason: Applies the 'options parameter' pattern for future extensibility and improved developer experience per guidelines.

public static class DeleteImmutabilityPolicyOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private final String apiVersion;
    private String ifMatch;

    public DeleteImmutabilityPolicyOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion) {
        if (subscriptionId == null || resourceGroupName == null || accountName == null || containerName == null || apiVersion == null) {
            throw new IllegalArgumentException("Required parameters must not be null.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
        this.apiVersion = apiVersion;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getContainerName() {
        return containerName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public String getIfMatch() {
        return ifMatch;
    }

    public DeleteImmutabilityPolicyOptions setIfMatch(String ifMatch) {
        this.ifMatch = ifMatch;
        return this;
    }
}

public Response<ImmutabilityPolicy> deleteImmutabilityPolicyWithResponse(DeleteImmutabilityPolicyOptions options, RequestContext requestContext) {
    if (options == null) {
        throw new IllegalArgumentException("DeleteImmutabilityPolicyOptions cannot be null.");
    }
    return this.deleteImmutabilityPolicyWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch(),
        requestContext
    );
}// Wrapper for update method to apply the options parameter pattern for future extensibility.
// Wrapped method: update
// Reason: The update method has a relatively long parameter list and a complex input (BlobContainer). 
// Introducing an UpdateBlobContainerOptions options class improves developer experience and aligns with the "Option Parameters" guideline.

public BlobContainer update(UpdateBlobContainerOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    if (options.getSubscriptionId() == null || options.getSubscriptionId().isEmpty()) {
        throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
    }
    if (options.getResourceGroupName() == null || options.getResourceGroupName().isEmpty()) {
        throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
    }
    if (options.getAccountName() == null || options.getAccountName().isEmpty()) {
        throw new IllegalArgumentException("accountName cannot be null or empty.");
    }
    if (options.getContainerName() == null || options.getContainerName().isEmpty()) {
        throw new IllegalArgumentException("containerName cannot be null or empty.");
    }
    if (options.getApiVersion() == null || options.getApiVersion().isEmpty()) {
        throw new IllegalArgumentException("apiVersion cannot be null or empty.");
    }
    if (options.getBlobContainer() == null) {
        throw new IllegalArgumentException("blobContainer cannot be null.");
    }
    return this.update(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getBlobContainer()
    );
}

// Example options class for update operation
public static class UpdateBlobContainerOptions {
    private String subscriptionId;
    private String resourceGroupName;
    private String accountName;
    private String containerName;
    private String apiVersion;
    private BlobContainer blobContainer;

    public UpdateBlobContainerOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, BlobContainer blobContainer) {
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
        this.apiVersion = apiVersion;
        this.blobContainer = blobContainer;
    }

    public String getSubscriptionId() { return subscriptionId; }
    public UpdateBlobContainerOptions setSubscriptionId(String subscriptionId) { this.subscriptionId = subscriptionId; return this; }

    public String getResourceGroupName() { return resourceGroupName; }
    public UpdateBlobContainerOptions setResourceGroupName(String resourceGroupName) { this.resourceGroupName = resourceGroupName; return this; }

    public String getAccountName() { return accountName; }
    public UpdateBlobContainerOptions setAccountName(String accountName) { this.accountName = accountName; return this; }

    public String getContainerName() { return containerName; }
    public UpdateBlobContainerOptions setContainerName(String containerName) { this.containerName = containerName; return this; }

    public String getApiVersion() { return apiVersion; }
    public UpdateBlobContainerOptions setApiVersion(String apiVersion) { this.apiVersion = apiVersion; return this; }

    public BlobContainer getBlobContainer() { return blobContainer; }
    public UpdateBlobContainerOptions setBlobContainer(BlobContainer blobContainer) { this.blobContainer = blobContainer; return this; }
}// Wrapper for clearLegalHold method to use options pattern for improved developer experience.
// Wrapped method: clearLegalHold
// Reason: The method has multiple parameters, including a complex parameter (LegalHold), and can benefit from an options parameter pattern for easier extensibility and usability.

public static class ClearLegalHoldOptions {
    private String subscriptionId;
    private String resourceGroupName;
    private String accountName;
    private String containerName;
    private String apiVersion;
    private LegalHold legalHold;

    public ClearLegalHoldOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, LegalHold legalHold) {
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
        this.apiVersion = apiVersion;
        this.legalHold = legalHold;
    }

    public String getSubscriptionId() { return subscriptionId; }
    public ClearLegalHoldOptions setSubscriptionId(String subscriptionId) { this.subscriptionId = subscriptionId; return this; }

    public String getResourceGroupName() { return resourceGroupName; }
    public ClearLegalHoldOptions setResourceGroupName(String resourceGroupName) { this.resourceGroupName = resourceGroupName; return this; }

    public String getAccountName() { return accountName; }
    public ClearLegalHoldOptions setAccountName(String accountName) { this.accountName = accountName; return this; }

    public String getContainerName() { return containerName; }
    public ClearLegalHoldOptions setContainerName(String containerName) { this.containerName = containerName; return this; }

    public String getApiVersion() { return apiVersion; }
    public ClearLegalHoldOptions setApiVersion(String apiVersion) { this.apiVersion = apiVersion; return this; }

    public LegalHold getLegalHold() { return legalHold; }
    public ClearLegalHoldOptions setLegalHold(LegalHold legalHold) { this.legalHold = legalHold; return this; }
}

/**
 * Convenience overload using options pattern for clearing legal hold tags.
 * @param options The ClearLegalHoldOptions parameter.
 * @throws IllegalArgumentException thrown if parameters fail the validation.
 * @throws HttpResponseException thrown if the service returns an error.
 * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
 * @return the LegalHold property of a blob container.
 */
public LegalHold clearLegalHold(ClearLegalHoldOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    if (options.getSubscriptionId() == null || options.getResourceGroupName() == null ||
        options.getAccountName() == null || options.getContainerName() == null ||
        options.getApiVersion() == null || options.getLegalHold() == null) {
        throw new IllegalArgumentException("All parameters in ClearLegalHoldOptions must be set.");
    }
    return clearLegalHold(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getLegalHold()
    );
}// Wrapper for extendImmutabilityPolicy method
// Wrapped method: extendImmutabilityPolicy
// Reason: Applies the options parameter pattern for future extensibility and improved developer experience per guidelines.

public static class ExtendImmutabilityPolicyOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private String apiVersion;
    private String ifMatch;

    public ExtendImmutabilityPolicyOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName) {
        if (subscriptionId == null || subscriptionId.isEmpty()) {
            throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
        }
        if (resourceGroupName == null || resourceGroupName.isEmpty()) {
            throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
        }
        if (accountName == null || accountName.isEmpty()) {
            throw new IllegalArgumentException("accountName cannot be null or empty.");
        }
        if (containerName == null || containerName.isEmpty()) {
            throw new IllegalArgumentException("containerName cannot be null or empty.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getContainerName() {
        return containerName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public ExtendImmutabilityPolicyOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    public String getIfMatch() {
        return ifMatch;
    }

    public ExtendImmutabilityPolicyOptions setIfMatch(String ifMatch) {
        this.ifMatch = ifMatch;
        return this;
    }
}

/**
 * Convenience wrapper using options parameter pattern for extendImmutabilityPolicy.
 * @param options The options for extending the immutability policy.
 * @return the ImmutabilityPolicy property of a blob container.
 */
public ImmutabilityPolicy extendImmutabilityPolicy(ExtendImmutabilityPolicyOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    return this.extendImmutabilityPolicy(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch()
    );
}// Wrapper for deleteWithResponse method to provide a simpler overload using the options parameter pattern.
// Wrapped method: deleteWithResponse
// Reason: Simplifies method invocation by introducing DeleteContainerOptions for future extensibility and better developer experience.

public static class DeleteContainerOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private String apiVersion;

    public DeleteContainerOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName) {
        if (subscriptionId == null || subscriptionId.isEmpty()) {
            throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
        }
        if (resourceGroupName == null || resourceGroupName.isEmpty()) {
            throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
        }
        if (accountName == null || accountName.isEmpty()) {
            throw new IllegalArgumentException("accountName cannot be null or empty.");
        }
        if (containerName == null || containerName.isEmpty()) {
            throw new IllegalArgumentException("containerName cannot be null or empty.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getContainerName() {
        return containerName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public DeleteContainerOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }
}

// Convenience wrapper method
public Response<Void> deleteContainerWithResponse(DeleteContainerOptions options, RequestContext requestContext) {
    if (options == null) {
        throw new IllegalArgumentException("DeleteContainerOptions cannot be null.");
    }
    String apiVersion = options.getApiVersion() != null ? options.getApiVersion() : "2021-01-01"; // sensible default
    return deleteWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        apiVersion,
        requestContext
    );
}// Wrapper for method: list
// Reason: The method returns ListContainerItems directly, which is a collection type. According to the "Methods Returning Collections (Paging)" guideline, synchronous APIs should return PagedIterable<T> for collections to improve developer experience. This wrapper provides a PagedIterable<ListContainerItem> over the items in ListContainerItems, enabling idiomatic iteration and paging support.

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.SimplePagedResponse;
import com.azure.core.util.Context;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

public PagedIterable<ListContainerItem> listContainersPaged(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) {
    // Input validation
    Objects.requireNonNull(subscriptionId, "'subscriptionId' cannot be null.");
    Objects.requireNonNull(resourceGroupName, "'resourceGroupName' cannot be null.");
    Objects.requireNonNull(accountName, "'accountName' cannot be null.");
    Objects.requireNonNull(apiVersion, "'apiVersion' cannot be null.");

    ListContainerItems items = this.list(subscriptionId, resourceGroupName, accountName, apiVersion);
    List<ListContainerItem> containerList = (items != null && items.value() != null) ? items.value() : Collections.emptyList();

    PagedResponse<ListContainerItem> pagedResponse = new SimplePagedResponse<>(
        null, // request
        200,  // status code
        null, // headers
        containerList,
        null, // continuation token
        null  // deserialized headers
    );
    return new PagedIterable<>(() -> pagedResponse);
}// Wrapper for delete method to use an options parameter pattern for future extensibility.
// Methods wrapped: delete
// Reason: Applies the options parameter pattern as per guidelines, allowing for future growth and improved developer experience.

public static class DeleteContainerOptions {
    private String subscriptionId;
    private String resourceGroupName;
    private String accountName;
    private String containerName;
    private String apiVersion;

    public DeleteContainerOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion) {
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
        this.apiVersion = apiVersion;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public DeleteContainerOptions setSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public DeleteContainerOptions setResourceGroupName(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public String getAccountName() {
        return accountName;
    }

    public DeleteContainerOptions setAccountName(String accountName) {
        this.accountName = accountName;
        return this;
    }

    public String getContainerName() {
        return containerName;
    }

    public DeleteContainerOptions setContainerName(String containerName) {
        this.containerName = containerName;
        return this;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public DeleteContainerOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }
}

/**
 * Deletes specified container under its account using DeleteContainerOptions.
 * 
 * @param options The DeleteContainerOptions parameter.
 * @throws IllegalArgumentException thrown if parameters fail the validation.
 * @throws HttpResponseException thrown if the service returns an error.
 * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
 */
public void delete(DeleteContainerOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("DeleteContainerOptions cannot be null.");
    }
    if (options.getSubscriptionId() == null || options.getResourceGroupName() == null ||
        options.getAccountName() == null || options.getContainerName() == null || options.getApiVersion() == null) {
        throw new IllegalArgumentException("All parameters in DeleteContainerOptions must be provided.");
    }
    this.delete(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion()
    );
}// Wrapper for createOrUpdateImmutabilityPolicy method
// Wrapped method: createOrUpdateImmutabilityPolicy
// Reason: Applies the options parameter pattern for future extensibility and improved developer experience per guidelines.

public static class CreateOrUpdateImmutabilityPolicyOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private String apiVersion;

    public CreateOrUpdateImmutabilityPolicyOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName) {
        if (subscriptionId == null || subscriptionId.isEmpty()) {
            throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
        }
        if (resourceGroupName == null || resourceGroupName.isEmpty()) {
            throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
        }
        if (accountName == null || accountName.isEmpty()) {
            throw new IllegalArgumentException("accountName cannot be null or empty.");
        }
        if (containerName == null || containerName.isEmpty()) {
            throw new IllegalArgumentException("containerName cannot be null or empty.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getContainerName() {
        return containerName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public CreateOrUpdateImmutabilityPolicyOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }
}

/**
 * Convenience wrapper for creating or updating an unlocked immutability policy using an options parameter.
 *
 * @param options The options for creating or updating the immutability policy.
 * @return the ImmutabilityPolicy property of a blob container.
 */
public ImmutabilityPolicy createOrUpdateImmutabilityPolicy(CreateOrUpdateImmutabilityPolicyOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    String apiVersion = options.getApiVersion() != null ? options.getApiVersion() : "2021-01-01";
    return this.createOrUpdateImmutabilityPolicy(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        apiVersion
    );
}// Wrapper for updateWithResponse to provide a simpler overload with sensible defaults and input validation.
// Wrapped method: updateWithResponse
// Reason: The original method has a long parameter list with several required primitives and a complex object.
//         According to the "Option Parameters" guideline, a convenience overload with fewer parameters is recommended
//         for developer experience, especially when common scenarios use a subset of parameters.

public Response<BlobContainer> updateContainerWithResponse(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    BlobContainer blobContainer) {

    // Input validation
    if (subscriptionId == null || subscriptionId.isEmpty()) {
        throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
    }
    if (resourceGroupName == null || resourceGroupName.isEmpty()) {
        throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
    }
    if (accountName == null || accountName.isEmpty()) {
        throw new IllegalArgumentException("accountName cannot be null or empty.");
    }
    if (containerName == null || containerName.isEmpty()) {
        throw new IllegalArgumentException("containerName cannot be null or empty.");
    }
    if (blobContainer == null) {
        throw new IllegalArgumentException("blobContainer cannot be null.");
    }

    // Provide sensible defaults
    String apiVersion = "2021-04-01"; // Example default, replace with appropriate default if needed
    RequestContext requestContext = new RequestContext();

    return updateWithResponse(
        subscriptionId,
        resourceGroupName,
        accountName,
        containerName,
        apiVersion,
        blobContainer,
        requestContext
    );
}// Wrapper for clearLegalHoldWithResponse
// Reason: The method has a complex parameter list (more than 6 parameters, including a model type), which can be simplified using the options parameter pattern for improved developer experience. This follows the "Option Parameters" guideline.

public Response<LegalHold> clearLegalHoldWithResponse(ClearLegalHoldOptions options, RequestContext requestContext) {
    if (options == null) {
        throw new IllegalArgumentException("ClearLegalHoldOptions cannot be null.");
    }
    if (options.getSubscriptionId() == null || options.getSubscriptionId().isEmpty()) {
        throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
    }
    if (options.getResourceGroupName() == null || options.getResourceGroupName().isEmpty()) {
        throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
    }
    if (options.getAccountName() == null || options.getAccountName().isEmpty()) {
        throw new IllegalArgumentException("accountName cannot be null or empty.");
    }
    if (options.getContainerName() == null || options.getContainerName().isEmpty()) {
        throw new IllegalArgumentException("containerName cannot be null or empty.");
    }
    if (options.getApiVersion() == null || options.getApiVersion().isEmpty()) {
        throw new IllegalArgumentException("apiVersion cannot be null or empty.");
    }
    if (options.getLegalHold() == null) {
        throw new IllegalArgumentException("legalHold cannot be null.");
    }
    return this.clearLegalHoldWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getLegalHold(),
        requestContext
    );
}

// Example ClearLegalHoldOptions model (should be placed in the models package)
public class ClearLegalHoldOptions {
    private String subscriptionId;
    private String resourceGroupName;
    private String accountName;
    private String containerName;
    private String apiVersion;
    private LegalHold legalHold;

    public ClearLegalHoldOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, LegalHold legalHold) {
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
        this.apiVersion = apiVersion;
        this.legalHold = legalHold;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public ClearLegalHoldOptions setSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public ClearLegalHoldOptions setResourceGroupName(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public String getAccountName() {
        return accountName;
    }

    public ClearLegalHoldOptions setAccountName(String accountName) {
        this.accountName = accountName;
        return this;
    }

    public String getContainerName() {
        return containerName;
    }

    public ClearLegalHoldOptions setContainerName(String containerName) {
        this.containerName = containerName;
        return this;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public ClearLegalHoldOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    public LegalHold getLegalHold() {
        return legalHold;
    }

    public ClearLegalHoldOptions setLegalHold(LegalHold legalHold) {
        this.legalHold = legalHold;
        return this;
    }
}// Wrapper for get method with options parameter pattern
// Wrapped methods: get
// Reason: Introduces an options parameter for future extensibility and developer convenience, following the 'Option Parameters' guideline.

public static class GetBlobContainerOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private String apiVersion;

    public GetBlobContainerOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName) {
        if (subscriptionId == null || subscriptionId.isEmpty()) {
            throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
        }
        if (resourceGroupName == null || resourceGroupName.isEmpty()) {
            throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
        }
        if (accountName == null || accountName.isEmpty()) {
            throw new IllegalArgumentException("accountName cannot be null or empty.");
        }
        if (containerName == null || containerName.isEmpty()) {
            throw new IllegalArgumentException("containerName cannot be null or empty.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getContainerName() {
        return containerName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public GetBlobContainerOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }
}

public BlobContainer get(GetBlobContainerOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    // Provide sensible default for apiVersion if not set
    String apiVersion = options.getApiVersion() != null ? options.getApiVersion() : "2021-08-06";
    return this.get(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        apiVersion
    );
}// Wrapper for getImmutabilityPolicyWithResponse
// Reason: The method has a long parameter list with several required primitive parameters. According to the "Option Parameters" guideline, an options parameter pattern can improve developer experience and future extensibility.

public static final class GetImmutabilityPolicyOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private String apiVersion;
    private String ifMatch;

    public GetImmutabilityPolicyOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName) {
        if (subscriptionId == null || subscriptionId.isEmpty()) {
            throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
        }
        if (resourceGroupName == null || resourceGroupName.isEmpty()) {
            throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
        }
        if (accountName == null || accountName.isEmpty()) {
            throw new IllegalArgumentException("accountName cannot be null or empty.");
        }
        if (containerName == null || containerName.isEmpty()) {
            throw new IllegalArgumentException("containerName cannot be null or empty.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getContainerName() {
        return containerName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public GetImmutabilityPolicyOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    public String getIfMatch() {
        return ifMatch;
    }

    public GetImmutabilityPolicyOptions setIfMatch(String ifMatch) {
        this.ifMatch = ifMatch;
        return this;
    }
}

/**
 * Convenience wrapper for getImmutabilityPolicyWithResponse using options pattern.
 * 
 * @param options The options object containing required and optional parameters.
 * @param requestContext The context to configure the HTTP request before HTTP client sends it.
 * @return the existing immutability policy along with the corresponding ETag.
 */
public Response<ImmutabilityPolicy> getImmutabilityPolicyWithResponse(GetImmutabilityPolicyOptions options, RequestContext requestContext) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    return this.getImmutabilityPolicyWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch(),
        requestContext
    );
}

// Wrapped method: getImmutabilityPolicyWithResponse
// Reason: Applies the options parameter pattern to improve usability and future extensibility, as per the "Option Parameters" guideline.// Wrapper for lockImmutabilityPolicy with options parameter pattern
// Wrapped method: lockImmutabilityPolicy
// Reason: Applies the options parameter pattern for future extensibility and improved developer experience as per guidelines.

public static class LockImmutabilityPolicyOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private String apiVersion;
    private String ifMatch;

    public LockImmutabilityPolicyOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName) {
        if (subscriptionId == null || subscriptionId.isEmpty()) throw new IllegalArgumentException("subscriptionId cannot be null or empty");
        if (resourceGroupName == null || resourceGroupName.isEmpty()) throw new IllegalArgumentException("resourceGroupName cannot be null or empty");
        if (accountName == null || accountName.isEmpty()) throw new IllegalArgumentException("accountName cannot be null or empty");
        if (containerName == null || containerName.isEmpty()) throw new IllegalArgumentException("containerName cannot be null or empty");
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getContainerName() {
        return containerName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public LockImmutabilityPolicyOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    public String getIfMatch() {
        return ifMatch;
    }

    public LockImmutabilityPolicyOptions setIfMatch(String ifMatch) {
        this.ifMatch = ifMatch;
        return this;
    }
}

/**
 * Convenience wrapper for locking the ImmutabilityPolicy using an options parameter.
 * Applies input validation and sensible defaults.
 *
 * @param options The options for locking the ImmutabilityPolicy.
 * @return the ImmutabilityPolicy property of a blob container.
 */
public ImmutabilityPolicy lockImmutabilityPolicy(LockImmutabilityPolicyOptions options) {
    if (options == null) throw new IllegalArgumentException("options cannot be null");
    String apiVersion = options.getApiVersion() != null ? options.getApiVersion() : "2021-01-01";
    return this.lockImmutabilityPolicy(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        apiVersion,
        options.getIfMatch()
    );
}// Wrapper for create method to introduce an options parameter pattern for future extensibility.
// Wrapped method: create
// Reason: To follow the options parameter pattern for better extensibility and developer experience as per Azure SDK guidelines.

public BlobContainer createContainer(CreateContainerOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("CreateContainerOptions cannot be null.");
    }
    if (options.getSubscriptionId() == null || options.getSubscriptionId().isEmpty()) {
        throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
    }
    if (options.getResourceGroupName() == null || options.getResourceGroupName().isEmpty()) {
        throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
    }
    if (options.getAccountName() == null || options.getAccountName().isEmpty()) {
        throw new IllegalArgumentException("accountName cannot be null or empty.");
    }
    if (options.getContainerName() == null || options.getContainerName().isEmpty()) {
        throw new IllegalArgumentException("containerName cannot be null or empty.");
    }
    if (options.getApiVersion() == null || options.getApiVersion().isEmpty()) {
        throw new IllegalArgumentException("apiVersion cannot be null or empty.");
    }
    if (options.getBlobContainer() == null) {
        throw new IllegalArgumentException("blobContainer cannot be null.");
    }
    return this.create(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getBlobContainer()
    );
}

// Example options type for the wrapper
public static class CreateContainerOptions {
    private String subscriptionId;
    private String resourceGroupName;
    private String accountName;
    private String containerName;
    private String apiVersion;
    private BlobContainer blobContainer;

    public CreateContainerOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, BlobContainer blobContainer) {
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
        this.apiVersion = apiVersion;
        this.blobContainer = blobContainer;
    }

    public String getSubscriptionId() { return subscriptionId; }
    public CreateContainerOptions setSubscriptionId(String subscriptionId) { this.subscriptionId = subscriptionId; return this; }

    public String getResourceGroupName() { return resourceGroupName; }
    public CreateContainerOptions setResourceGroupName(String resourceGroupName) { this.resourceGroupName = resourceGroupName; return this; }

    public String getAccountName() { return accountName; }
    public CreateContainerOptions setAccountName(String accountName) { this.accountName = accountName; return this; }

    public String getContainerName() { return containerName; }
    public CreateContainerOptions setContainerName(String containerName) { this.containerName = containerName; return this; }

    public String getApiVersion() { return apiVersion; }
    public CreateContainerOptions setApiVersion(String apiVersion) { this.apiVersion = apiVersion; return this; }

    public BlobContainer getBlobContainer() { return blobContainer; }
    public CreateContainerOptions setBlobContainer(BlobContainer blobContainer) { this.blobContainer = blobContainer; return this; }
}// Wrapper for extendImmutabilityPolicyWithResponse
// Reason: The method has a long parameter list (7 parameters), most of which are simple types, but it could benefit from the options parameter pattern for improved developer experience and future extensibility.
// Wrapped method: extendImmutabilityPolicyWithResponse

/**
 * Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy.
 * This is a convenience overload that uses an options parameter to simplify usage and improve extensibility.
 *
 * @param options The options to configure the extend operation.
 * @return the ImmutabilityPolicy property of a blob container.
 * @throws IllegalArgumentException thrown if required options are missing.
 * @throws HttpResponseException thrown if the service returns an error.
 * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
 */
public Response<ImmutabilityPolicy> extendImmutabilityPolicyWithResponse(ExtendImmutabilityPolicyOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    if (options.getSubscriptionId() == null || options.getResourceGroupName() == null ||
        options.getAccountName() == null || options.getContainerName() == null ||
        options.getApiVersion() == null || options.getIfMatch() == null ||
        options.getParameters() == null) {
        throw new IllegalArgumentException("All required options properties must be set.");
    }
    RequestContext context = options.getRequestContext() != null ? options.getRequestContext() : new RequestContext();
    return this.extendImmutabilityPolicyWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch(),
        options.getParameters(),
        context
    );
}

/**
 * Options type for extendImmutabilityPolicyWithResponse.
 */
public static class ExtendImmutabilityPolicyOptions {
    private String subscriptionId;
    private String resourceGroupName;
    private String accountName;
    private String containerName;
    private String apiVersion;
    private String ifMatch;
    private ImmutabilityPolicy parameters;
    private RequestContext requestContext;

    public ExtendImmutabilityPolicyOptions(String subscriptionId, String resourceGroupName, String accountName,
                                           String containerName, String apiVersion, String ifMatch, ImmutabilityPolicy parameters) {
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
        this.apiVersion = apiVersion;
        this.ifMatch = ifMatch;
        this.parameters = parameters;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public ExtendImmutabilityPolicyOptions setSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public ExtendImmutabilityPolicyOptions setResourceGroupName(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public String getAccountName() {
        return accountName;
    }

    public ExtendImmutabilityPolicyOptions setAccountName(String accountName) {
        this.accountName = accountName;
        return this;
    }

    public String getContainerName() {
        return containerName;
    }

    public ExtendImmutabilityPolicyOptions setContainerName(String containerName) {
        this.containerName = containerName;
        return this;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public ExtendImmutabilityPolicyOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    public String getIfMatch() {
        return ifMatch;
    }

    public ExtendImmutabilityPolicyOptions setIfMatch(String ifMatch) {
        this.ifMatch = ifMatch;
        return this;
    }

    public ImmutabilityPolicy getParameters() {
        return parameters;
    }

    public ExtendImmutabilityPolicyOptions setParameters(ImmutabilityPolicy parameters) {
        this.parameters = parameters;
        return this;
    }

    public RequestContext getRequestContext() {
        return requestContext;
    }

    public ExtendImmutabilityPolicyOptions setRequestContext(RequestContext requestContext) {
        this.requestContext = requestContext;
        return this;
    }
}// Wrapper for getImmutabilityPolicy
// Wrapped method: getImmutabilityPolicy
// Reason: Applies the options parameter pattern for future extensibility and improved developer experience per Azure SDK guidelines.

public static class GetImmutabilityPolicyOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private String apiVersion;

    public GetImmutabilityPolicyOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName) {
        if (subscriptionId == null || subscriptionId.isEmpty()) {
            throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
        }
        if (resourceGroupName == null || resourceGroupName.isEmpty()) {
            throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
        }
        if (accountName == null || accountName.isEmpty()) {
            throw new IllegalArgumentException("accountName cannot be null or empty.");
        }
        if (containerName == null || containerName.isEmpty()) {
            throw new IllegalArgumentException("containerName cannot be null or empty.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getContainerName() {
        return containerName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public GetImmutabilityPolicyOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }
}

/**
 * Convenience overload using options parameter pattern for getting the immutability policy.
 * 
 * @param options The GetImmutabilityPolicyOptions containing required and optional parameters.
 * @return the existing immutability policy along with the corresponding ETag.
 */
public ImmutabilityPolicy getImmutabilityPolicy(GetImmutabilityPolicyOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    String apiVersion = options.getApiVersion() != null ? options.getApiVersion() : "2021-01-01";
    return this.getImmutabilityPolicy(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        apiVersion
    );
}// Wrapper for lockImmutabilityPolicyWithResponse
// Reason: The method has a long parameter list with several required parameters. According to the "Option Parameters" guideline, an options parameter should be introduced for complex service methods, and a simpler overload provided for common scenarios. This wrapper introduces LockImmutabilityPolicyOptions for improved developer experience.

import com.azure.core.http.rest.Response;
import com.azure.core.util.RequestContext;
import java.util.Objects;

// Options class for lockImmutabilityPolicy
public class LockImmutabilityPolicyOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private String apiVersion;
    private String ifMatch;

    public LockImmutabilityPolicyOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName) {
        this.subscriptionId = Objects.requireNonNull(subscriptionId, "'subscriptionId' cannot be null.");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "'resourceGroupName' cannot be null.");
        this.accountName = Objects.requireNonNull(accountName, "'accountName' cannot be null.");
        this.containerName = Objects.requireNonNull(containerName, "'containerName' cannot be null.");
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getContainerName() {
        return containerName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public LockImmutabilityPolicyOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    public String getIfMatch() {
        return ifMatch;
    }

    public LockImmutabilityPolicyOptions setIfMatch(String ifMatch) {
        this.ifMatch = ifMatch;
        return this;
    }
}

// Wrapper method
public Response<ImmutabilityPolicy> lockImmutabilityPolicyWithResponse(LockImmutabilityPolicyOptions options, RequestContext requestContext) {
    Objects.requireNonNull(options, "'options' cannot be null.");
    // Optionally set sensible default for apiVersion if not provided
    String apiVersion = options.getApiVersion() != null ? options.getApiVersion() : "2021-08-01"; // Example default
    return this.lockImmutabilityPolicyWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        apiVersion,
        options.getIfMatch(),
        requestContext
    );
}

// Convenience overload for common scenario (without RequestContext)
public ImmutabilityPolicy lockImmutabilityPolicy(LockImmutabilityPolicyOptions options) {
    Response<ImmutabilityPolicy> response = lockImmutabilityPolicyWithResponse(options, null);
    return response.getValue();
}

// Wrapped method: lockImmutabilityPolicyWithResponse
// Reason: Applies the options parameter pattern for improved usability and future extensibility.// Wrapper for listWithResponse method to improve developer experience by introducing an options parameter pattern.
// Wrapped method: listWithResponse
// Reason: The method has a complex parameter list (more than six parameters, some optional), so introducing a ListContainersOptions type improves usability and aligns with the "Option Parameters" guideline.

public static class ListContainersOptions {
    private String subscriptionId;
    private String resourceGroupName;
    private String accountName;
    private String apiVersion;
    private String maxpagesize;
    private String filter;
    private ListContainersInclude include;

    public ListContainersOptions(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) {
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.apiVersion = apiVersion;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public String getMaxpagesize() {
        return maxpagesize;
    }

    public ListContainersOptions setMaxpagesize(String maxpagesize) {
        this.maxpagesize = maxpagesize;
        return this;
    }

    public String getFilter() {
        return filter;
    }

    public ListContainersOptions setFilter(String filter) {
        this.filter = filter;
        return this;
    }

    public ListContainersInclude getInclude() {
        return include;
    }

    public ListContainersOptions setInclude(ListContainersInclude include) {
        this.include = include;
        return this;
    }
}

/**
 * Convenience wrapper for listing containers using an options parameter.
 * Provides input validation and sensible defaults.
 *
 * @param options The options for listing containers.
 * @param requestContext The context to configure the HTTP request before HTTP client sends it.
 * @return response schema.
 */
public Response<ListContainerItems> listWithResponse(ListContainersOptions options, RequestContext requestContext) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    if (options.getSubscriptionId() == null || options.getResourceGroupName() == null
        || options.getAccountName() == null || options.getApiVersion() == null) {
        throw new IllegalArgumentException("subscriptionId, resourceGroupName, accountName, and apiVersion are required.");
    }
    return this.listWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getApiVersion(),
        options.getMaxpagesize(),
        options.getFilter(),
        options.getInclude(),
        requestContext
    );
}// Wrapper for createOrUpdateImmutabilityPolicyWithResponse
// Reason: The method has a complex parameter list (more than six parameters, including several primitives and a model), which is a candidate for the options parameter pattern as per the "Option Parameters" guideline. This wrapper introduces a CreateOrUpdateImmutabilityPolicyOptions model to simplify usage and improve developer experience.

import com.azure.core.http.rest.Response;
import com.azure.core.util.RequestContext;
import java.util.Objects;

// Models package: models.CreateOrUpdateImmutabilityPolicyOptions
public class CreateOrUpdateImmutabilityPolicyOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private String apiVersion = "2021-08-01"; // sensible default
    private String ifMatch;
    private ImmutabilityPolicy parameters;
    private RequestContext requestContext = RequestContext.NONE;

    public CreateOrUpdateImmutabilityPolicyOptions(
        String subscriptionId,
        String resourceGroupName,
        String accountName,
        String containerName
    ) {
        this.subscriptionId = Objects.requireNonNull(subscriptionId, "'subscriptionId' cannot be null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "'resourceGroupName' cannot be null");
        this.accountName = Objects.requireNonNull(accountName, "'accountName' cannot be null");
        this.containerName = Objects.requireNonNull(containerName, "'containerName' cannot be null");
    }

    public String getSubscriptionId() { return subscriptionId; }
    public String getResourceGroupName() { return resourceGroupName; }
    public String getAccountName() { return accountName; }
    public String getContainerName() { return containerName; }
    public String getApiVersion() { return apiVersion; }
    public String getIfMatch() { return ifMatch; }
    public ImmutabilityPolicy getParameters() { return parameters; }
    public RequestContext getRequestContext() { return requestContext; }

    public CreateOrUpdateImmutabilityPolicyOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    public CreateOrUpdateImmutabilityPolicyOptions setIfMatch(String ifMatch) {
        this.ifMatch = ifMatch;
        return this;
    }

    public CreateOrUpdateImmutabilityPolicyOptions setParameters(ImmutabilityPolicy parameters) {
        this.parameters = parameters;
        return this;
    }

    public CreateOrUpdateImmutabilityPolicyOptions setRequestContext(RequestContext requestContext) {
        this.requestContext = requestContext == null ? RequestContext.NONE : requestContext;
        return this;
    }
}

// Wrapper method in the client class
public Response<ImmutabilityPolicy> createOrUpdateImmutabilityPolicyWithResponse(CreateOrUpdateImmutabilityPolicyOptions options) {
    Objects.requireNonNull(options, "'options' cannot be null");
    Objects.requireNonNull(options.getParameters(), "'parameters' cannot be null");
    return this.createOrUpdateImmutabilityPolicyWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch(),
        options.getParameters(),
        options.getRequestContext()
    );
}