Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-07_23-35


// Wrapper for create, createWithResponse, update, updateWithResponse, get, getWithResponse, delete, deleteWithResponse, list, listWithResponse
// Reason: These methods share highly similar parameter lists and CRUD semantics for BlobContainer resources. To improve developer experience and reduce overload proliferation, introduce options types for complex operations and provide concise overloads for common scenarios, following the options pattern and parameter overload guidance. Also, use PagedIterable for list operations as per paging guidelines.

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.core.util.RequestContext;
import java.util.Objects;

// Options type for create/update operations
public class BlobContainerOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private final String apiVersion;
    private BlobContainer blobContainer;
    private RequestContext requestContext;

    public BlobContainerOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion) {
        this.subscriptionId = Objects.requireNonNull(subscriptionId, "'subscriptionId' cannot be null.");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "'resourceGroupName' cannot be null.");
        this.accountName = Objects.requireNonNull(accountName, "'accountName' cannot be null.");
        this.containerName = Objects.requireNonNull(containerName, "'containerName' cannot be null.");
        this.apiVersion = Objects.requireNonNull(apiVersion, "'apiVersion' cannot be null.");
    }

    public BlobContainer getBlobContainer() {
        return blobContainer;
    }

    public BlobContainerOptions setBlobContainer(BlobContainer blobContainer) {
        this.blobContainer = blobContainer;
        return this;
    }

    public RequestContext getRequestContext() {
        return requestContext;
    }

    public BlobContainerOptions setRequestContext(RequestContext requestContext) {
        this.requestContext = requestContext;
        return this;
    }

    public String getSubscriptionId() { return subscriptionId; }
    public String getResourceGroupName() { return resourceGroupName; }
    public String getAccountName() { return accountName; }
    public String getContainerName() { return containerName; }
    public String getApiVersion() { return apiVersion; }
}

// Options type for list operations
public class ListBlobContainersOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String apiVersion;
    private String maxpagesize;
    private String filter;
    private ListContainersInclude include;
    private RequestContext requestContext;

    public ListBlobContainersOptions(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) {
        this.subscriptionId = Objects.requireNonNull(subscriptionId, "'subscriptionId' cannot be null.");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "'resourceGroupName' cannot be null.");
        this.accountName = Objects.requireNonNull(accountName, "'accountName' cannot be null.");
        this.apiVersion = Objects.requireNonNull(apiVersion, "'apiVersion' cannot be null.");
    }

    public String getMaxpagesize() { return maxpagesize; }
    public ListBlobContainersOptions setMaxpagesize(String maxpagesize) {
        this.maxpagesize = maxpagesize;
        return this;
    }

    public String getFilter() { return filter; }
    public ListBlobContainersOptions setFilter(String filter) {
        this.filter = filter;
        return this;
    }

    public ListContainersInclude getInclude() { return include; }
    public ListBlobContainersOptions setInclude(ListContainersInclude include) {
        this.include = include;
        return this;
    }

    public RequestContext getRequestContext() { return requestContext; }
    public ListBlobContainersOptions setRequestContext(RequestContext requestContext) {
        this.requestContext = requestContext;
        return this;
    }

    public String getSubscriptionId() { return subscriptionId; }
    public String getResourceGroupName() { return resourceGroupName; }
    public String getAccountName() { return accountName; }
    public String getApiVersion() { return apiVersion; }
}

// Wrapper methods

/**
 * Creates or updates a BlobContainer using options.
 * Wraps: create, createWithResponse, update, updateWithResponse
 */
public BlobContainer upsertBlobContainer(BlobContainerOptions options) {
    Objects.requireNonNull(options, "'options' cannot be null.");
    if (options.getBlobContainer() == null) {
        throw new IllegalArgumentException("'blobContainer' must be set in options.");
    }
    // If requestContext is provided, use createWithResponse; otherwise, use create
    if (options.getRequestContext() != null) {
        return this.createWithResponse(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion(),
            options.getBlobContainer(),
            options.getRequestContext()
        ).getValue();
    } else {
        return this.create(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion(),
            options.getBlobContainer()
        );
    }
}

/**
 * Gets a BlobContainer using options.
 * Wraps: get, getWithResponse
 */
public BlobContainer getBlobContainer(BlobContainerOptions options) {
    Objects.requireNonNull(options, "'options' cannot be null.");
    if (options.getRequestContext() != null) {
        return this.getWithResponse(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion(),
            options.getRequestContext()
        ).getValue();
    } else {
        return this.get(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion()
        );
    }
}

/**
 * Deletes a BlobContainer using options.
 * Wraps: delete, deleteWithResponse
 */
public void deleteBlobContainer(BlobContainerOptions options) {
    Objects.requireNonNull(options, "'options' cannot be null.");
    if (options.getRequestContext() != null) {
        this.deleteWithResponse(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion(),
            options.getRequestContext()
        );
    } else {
        this.delete(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion()
        );
    }
}

/**
 * Lists BlobContainers using options.
 * Wraps: list, listWithResponse
 * Returns: PagedIterable for idiomatic Java collection handling.
 */
public PagedIterable<BlobContainer> listBlobContainers(ListBlobContainersOptions options) {
    Objects.requireNonNull(options, "'options' cannot be null.");
    if (options.getRequestContext() != null || options.getMaxpagesize() != null || options.getFilter() != null || options.getInclude() != null) {
        // Use listWithResponse for advanced options
        return new PagedIterable<>(() -> {
            Response<ListContainerItems> response = this.listWithResponse(
                options.getSubscriptionId(),
                options.getResourceGroupName(),
                options.getAccountName(),
                options.getApiVersion(),
                options.getMaxpagesize(),
                options.getFilter(),
                options.getInclude(),
                options.getRequestContext()
            );
            return new PagedResponse<BlobContainer>() {
                @Override
                public List<BlobContainer> getElements() {
                    return response.getValue() != null ? response.getValue().getValue() : Collections.emptyList();
                }
                @Override
                public String getContinuationToken() { return null; }
                @Override
                public int getStatusCode() { return response.getStatusCode(); }
                @Override
                public HttpHeaders getHeaders() { return response.getHeaders(); }
                @Override
                public HttpRequest getRequest() { return response.getRequest(); }
            };
        });
    } else {
        // Use simple list
        ListContainerItems items = this.list(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getApiVersion()
        );
        return new PagedIterable<>(() -> new PagedResponse<BlobContainer>() {
            @Override
            public List<BlobContainer> getElements() {
                return items != null ? items.getValue() : Collections.emptyList();
            }
            @Override
            public String getContinuationToken() { return null; }
            @Override
            public int getStatusCode() { return 200; }
            @Override
            public HttpHeaders getHeaders() { return new HttpHeaders(); }
            @Override
            public HttpRequest getRequest() { return null; }
        });
    }
}// Wrapper for setLegalHold, setLegalHoldWithResponse, clearLegalHold, clearLegalHoldWithResponse
// Reason: These methods share parameter patterns and operation semantics (setting/clearing legal hold tags). 
// Wrapping them using an options pattern improves developer experience by reducing parameter overload and 
// providing a single entry point for legal hold operations, following the "Option Parameters" guideline.

import com.azure.core.http.HttpResponseException;
import com.azure.core.http.rest.Response;
import com.azure.core.util.RequestContext;
import java.util.Objects;

/**
 * Options to configure legal hold operations.
 */
public class LegalHoldOptions {
    private String subscriptionId;
    private String resourceGroupName;
    private String accountName;
    private String containerName;
    private String apiVersion;
    private LegalHold legalHold;
    private RequestContext requestContext;

    public LegalHoldOptions(String subscriptionId, String resourceGroupName, String accountName,
                            String containerName, String apiVersion, LegalHold legalHold) {
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
        this.apiVersion = apiVersion;
        this.legalHold = legalHold;
    }

    public String getSubscriptionId() { return subscriptionId; }
    public String getResourceGroupName() { return resourceGroupName; }
    public String getAccountName() { return accountName; }
    public String getContainerName() { return containerName; }
    public String getApiVersion() { return apiVersion; }
    public LegalHold getLegalHold() { return legalHold; }
    public RequestContext getRequestContext() { return requestContext; }

    public LegalHoldOptions setRequestContext(RequestContext requestContext) {
        this.requestContext = requestContext;
        return this;
    }
}

/**
 * Performs a legal hold operation (set or clear) on a blob container.
 * 
 * @param options The options for the legal hold operation.
 * @param set True to set legal hold, false to clear.
 * @param withResponse True to return a Response<LegalHold>, false to return LegalHold only.
 * @return LegalHold or Response<LegalHold> depending on withResponse flag.
 * @throws IllegalArgumentException if required parameters are missing.
 * @throws HttpResponseException if the service returns an error.
 * @throws RuntimeException for other errors.
 */
public Object legalHoldOperation(LegalHoldOptions options, boolean set, boolean withResponse) {
    Objects.requireNonNull(options, "'options' cannot be null.");
    Objects.requireNonNull(options.getSubscriptionId(), "'subscriptionId' cannot be null.");
    Objects.requireNonNull(options.getResourceGroupName(), "'resourceGroupName' cannot be null.");
    Objects.requireNonNull(options.getAccountName(), "'accountName' cannot be null.");
    Objects.requireNonNull(options.getContainerName(), "'containerName' cannot be null.");
    Objects.requireNonNull(options.getApiVersion(), "'apiVersion' cannot be null.");
    Objects.requireNonNull(options.getLegalHold(), "'legalHold' cannot be null.");

    if (set) {
        if (withResponse) {
            return this.serviceClient.setLegalHoldWithResponse(
                options.getSubscriptionId(),
                options.getResourceGroupName(),
                options.getAccountName(),
                options.getContainerName(),
                options.getApiVersion(),
                options.getLegalHold(),
                options.getRequestContext()
            );
        } else {
            return this.serviceClient.setLegalHold(
                options.getSubscriptionId(),
                options.getResourceGroupName(),
                options.getAccountName(),
                options.getContainerName(),
                options.getApiVersion(),
                options.getLegalHold()
            );
        }
    } else {
        if (withResponse) {
            return this.serviceClient.clearLegalHoldWithResponse(
                options.getSubscriptionId(),
                options.getResourceGroupName(),
                options.getAccountName(),
                options.getContainerName(),
                options.getApiVersion(),
                options.getLegalHold(),
                options.getRequestContext()
            );
        } else {
            return this.serviceClient.clearLegalHold(
                options.getSubscriptionId(),
                options.getResourceGroupName(),
                options.getAccountName(),
                options.getContainerName(),
                options.getApiVersion(),
                options.getLegalHold()
            );
        }
    }
}

// Wrapped methods: setLegalHold, setLegalHoldWithResponse, clearLegalHold, clearLegalHoldWithResponse
// Reason: Consolidates similar legal hold operations into a single, option-based entry point, 
// reduces parameter overload, and aligns with Azure SDK guidelines for option parameters and overloads.// Wrapper for Immutability Policy operations
// Methods wrapped: 
// - createOrUpdateImmutabilityPolicy
// - createOrUpdateImmutabilityPolicyWithResponse
// - getImmutabilityPolicy
// - getImmutabilityPolicyWithResponse
// - lockImmutabilityPolicy
// - lockImmutabilityPolicyWithResponse
// - extendImmutabilityPolicy
// - extendImmutabilityPolicyWithResponse
// - deleteImmutabilityPolicy
// - deleteImmutabilityPolicyWithResponse
// Reason: These methods share similar parameter patterns and CRUD operations for ImmutabilityPolicy. Wrapping them with an options class and providing overloads improves developer experience by reducing parameter overload and aligning with the options pattern guideline.

public class ImmutabilityPolicyOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private final String apiVersion;
    private String ifMatch;
    private ImmutabilityPolicy parameters;

    public ImmutabilityPolicyOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion) {
        if (subscriptionId == null || resourceGroupName == null || accountName == null || containerName == null || apiVersion == null) {
            throw new IllegalArgumentException("Required parameters must not be null.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
        this.apiVersion = apiVersion;
    }

    public String getSubscriptionId() { return subscriptionId; }
    public String getResourceGroupName() { return resourceGroupName; }
    public String getAccountName() { return accountName; }
    public String getContainerName() { return containerName; }
    public String getApiVersion() { return apiVersion; }

    public String getIfMatch() { return ifMatch; }
    public ImmutabilityPolicyOptions setIfMatch(String ifMatch) { this.ifMatch = ifMatch; return this; }

    public ImmutabilityPolicy getParameters() { return parameters; }
    public ImmutabilityPolicyOptions setParameters(ImmutabilityPolicy parameters) { this.parameters = parameters; return this; }
}

// Convenience wrapper methods

public ImmutabilityPolicy createOrUpdateImmutabilityPolicy(ImmutabilityPolicyOptions options) {
    return this.createOrUpdateImmutabilityPolicy(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion()
    );
}

public Response<ImmutabilityPolicy> createOrUpdateImmutabilityPolicyWithResponse(ImmutabilityPolicyOptions options, RequestContext context) {
    return this.createOrUpdateImmutabilityPolicyWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch(),
        options.getParameters(),
        context
    );
}

public ImmutabilityPolicy getImmutabilityPolicy(ImmutabilityPolicyOptions options) {
    return this.getImmutabilityPolicy(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion()
    );
}

public Response<ImmutabilityPolicy> getImmutabilityPolicyWithResponse(ImmutabilityPolicyOptions options, RequestContext context) {
    return this.getImmutabilityPolicyWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch(),
        context
    );
}

public ImmutabilityPolicy lockImmutabilityPolicy(ImmutabilityPolicyOptions options) {
    return this.lockImmutabilityPolicy(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch()
    );
}

public Response<ImmutabilityPolicy> lockImmutabilityPolicyWithResponse(ImmutabilityPolicyOptions options, RequestContext context) {
    return this.lockImmutabilityPolicyWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch(),
        context
    );
}

public ImmutabilityPolicy extendImmutabilityPolicy(ImmutabilityPolicyOptions options) {
    return this.extendImmutabilityPolicy(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch()
    );
}

public Response<ImmutabilityPolicy> extendImmutabilityPolicyWithResponse(ImmutabilityPolicyOptions options, RequestContext context) {
    return this.extendImmutabilityPolicyWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch(),
        options.getParameters(),
        context
    );
}

public ImmutabilityPolicy deleteImmutabilityPolicy(ImmutabilityPolicyOptions options) {
    return this.deleteImmutabilityPolicy(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch()
    );
}

public Response<ImmutabilityPolicy> deleteImmutabilityPolicyWithResponse(ImmutabilityPolicyOptions options, RequestContext context) {
    return this.deleteImmutabilityPolicyWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch(),
        context
    );
}