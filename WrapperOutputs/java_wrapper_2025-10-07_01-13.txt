Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-07_01-13


// Wrapper for setLegalHold and setLegalHoldWithResponse to provide a convenient options pattern and overloads
// Methods wrapped: setLegalHold, setLegalHoldWithResponse
// Reason: These methods share the same core functionality (setting legal hold tags) and differ only by whether a Response<T> is returned and whether a RequestContext is supplied. Wrapping them with an options type and providing overloads improves usability and aligns with the options parameter guideline.

public class SetLegalHoldOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private final String apiVersion;
    private final LegalHold legalHold;
    private RequestContext requestContext;

    public SetLegalHoldOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, LegalHold legalHold) {
        if (subscriptionId == null || resourceGroupName == null || accountName == null || containerName == null || apiVersion == null || legalHold == null) {
            throw new IllegalArgumentException("Required parameter is null.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
        this.apiVersion = apiVersion;
        this.legalHold = legalHold;
    }

    public SetLegalHoldOptions setRequestContext(RequestContext requestContext) {
        this.requestContext = requestContext;
        return this;
    }

    public String getSubscriptionId() { return subscriptionId; }
    public String getResourceGroupName() { return resourceGroupName; }
    public String getAccountName() { return accountName; }
    public String getContainerName() { return containerName; }
    public String getApiVersion() { return apiVersion; }
    public LegalHold getLegalHold() { return legalHold; }
    public RequestContext getRequestContext() { return requestContext; }
}

// Convenience wrapper method
public LegalHold setLegalHold(SetLegalHoldOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("SetLegalHoldOptions cannot be null.");
    }
    if (options.getRequestContext() != null) {
        return this.setLegalHoldWithResponse(options).getValue();
    } else {
        return this.setLegalHold(
            options.getSubscriptionId(),
            options.getResourceGroupName(),
            options.getAccountName(),
            options.getContainerName(),
            options.getApiVersion(),
            options.getLegalHold()
        );
    }
}

// Convenience wrapper method with Response
public Response<LegalHold> setLegalHoldWithResponse(SetLegalHoldOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("SetLegalHoldOptions cannot be null.");
    }
    if (options.getRequestContext() == null) {
        throw new IllegalArgumentException("RequestContext must be provided for setLegalHoldWithResponse.");
    }
    return this.setLegalHoldWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getLegalHold(),
        options.getRequestContext()
    );
}