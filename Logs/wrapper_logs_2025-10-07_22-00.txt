Java Convenience Wrapper Generated by Azure OpenAI
Generated: 2025-10-07 22:00:57



================================================================================
Prompt 1: Method and Guideline Analysis
================================================================================

Context: You are analyzing the attached codegen methods from a client class, along with a list of Java Azure SDK Design Guidelines headers.

Your tasks:
1. Identify potential patterns across these methods that could be optimized to improve developer experience 
   (e.g. similar operations that could be combined, consistent parameter patterns, repetitive return processing, 
   avoiding low-level data types like byte streams).
2. From the list of guideline headers, select which guidelines are most relevant to the identified methods.

Instructions:
- Only consider patterns relevant to developer convenience. Ignore low-level protocol details.
- Evaluate whether there is any true convenience to be added.
- If no patterns are found, return only the string "no".
- If patterns are found, return a JSON object in the format:

{
  "methods": ["foo", "bar"],
  "guidelines": ["Header 1", "Header 3"]
}

Notes:
- Do NOT include any explanations or commentary.
- Do not put generated code into a class. You must only return the names as requested.
- If there is no real convenience to be added, ignore all steps and return only the word "no".

Method names:
```
[deleteWithResponse(, lockImmutabilityPolicy(, createOrUpdateImmutabilityPolicy(, createWithResponse(, getWithResponse(, setLegalHoldWithResponse(, getImmutabilityPolicyWithResponse(, clearLegalHold(, deleteImmutabilityPolicyWithResponse(, create(, get(, deleteImmutabilityPolicy(, listWithResponse(, list(, clearLegalHoldWithResponse(, getImmutabilityPolicy(, lockImmutabilityPolicyWithResponse(, updateWithResponse(, createOrUpdateImmutabilityPolicyWithResponse(, extendImmutabilityPolicyWithResponse(, delete(, extendImmutabilityPolicy(, update(, setLegalHold(]
```

Guideline headers:
"""
Introduction
Design Principles
General Guidelines
Support for non-HTTP Protocols
Azure SDK API Design
Service Client
Sync Service Clients
Async Service Clients
Service Client Creation
Service Versions
Service Methods
Non-Service Methods
Cancellation
Return Types
Option Parameters
Parameter Validation
Methods Returning Collections (Paging)
Methods Invoking Long-Running Operations
Conditional Request Methods
Hierarchical Clients
Model Types
Enumerations
Using Azure Core Types
Using Primitive Types
Exceptions
Authentication
Namespaces
Example Namespaces
Support for Mocking
Maven
Service-Specific Common Libraries
Java 9 Modules
Versioning
Client Version Numbers
Dependencies
Native code
Documentation
General guidelines
Samples
Java API Best Practices
Naming Patterns

"""
--------------------------------------------------------------------------------

Step 1 Output:
{
  "methods": [
    "create",
    "createWithResponse",
    "get",
    "getWithResponse",
    "update",
    "updateWithResponse",
    "delete",
    "deleteWithResponse",
    "list",
    "listWithResponse",
    "setLegalHold",
    "setLegalHoldWithResponse",
    "clearLegalHold",
    "clearLegalHoldWithResponse",
    "getImmutabilityPolicy",
    "getImmutabilityPolicyWithResponse",
    "createOrUpdateImmutabilityPolicy",
    "createOrUpdateImmutabilityPolicyWithResponse",
    "deleteImmutabilityPolicy",
    "deleteImmutabilityPolicyWithResponse",
    "lockImmutabilityPolicy",
    "lockImmutabilityPolicyWithResponse",
    "extendImmutabilityPolicy",
    "extendImmutabilityPolicyWithResponse"
  ],
  "guidelines": [
    "Service Methods",
    "Return Types",
    "Option Parameters",
    "Methods Returning Collections (Paging)",
    "Naming Patterns"
  ]
}
================================================================================


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The attached methods were flagged as having potential patterns, and the guidelines were selected as potentially being relevant:

Your task:
1. Evaluate the code to identify repeated logic, overlapping functionality, or opportunities to combine methods into a single wrapper.
2. If no patterns are found in certain methods, ignore them.
3. If patterns are found, create a wrapper method that improves developer experience according to the supplied design guidelines.
4. Return the generated wrapper code, along with comments stating which methods were wrapped along with a reason for the wrapping.

Notes:
- Do NOT invent new methods beyond what is attached.
- Include input validation and sensible defaults if applicable.
- Preserve existing functionality of the combined methods.

Methods:
```

    /**
     * Creates a new container under the specified account.
     * 
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param accountName The accountName parameter.
     * @param containerName The containerName parameter.
     * @param apiVersion The apiVersion parameter.
     * @param blobContainer The blobContainer parameter.
     * @param requestContext The context to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the blob container.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BlobContainer> createWithResponse(String subscriptionId, String resourceGroupName,
        String accountName, String containerName, String apiVersion, BlobContainer blobContainer,
        RequestContext requestContext) {
        return this.serviceClient.createWithResponse(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, blobContainer, requestContext);
    }



```

Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Naming Patterns
Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.
✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:
A class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.
⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().
✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.
✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.
⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.
⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case.

Methods Returning Collections (Paging)
Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable<T> or PagedFlux<T> (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.
✅ DO return PagedIterable<T> from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:
public final class ConfigurationClient {
    // synchronous API returning a PagedIterable of ConfigurationSetting instances
    public PagedIterable<ConfigurationSetting> listSettings(...) {
        ...
    }
}
PagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern <serviceName>PagedIterable or <operation>PagedFlux.
⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).
✅ DO return PagedFlux<T> (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux<T>, as it allows for consumers to retrieve response information in a consistent manner.
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
Consumers of this API can consume individual items by treating the response as a Flux<T>:
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
The consumer may process items page-by-page instead:
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists:
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
The PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.
✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""
--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The attached methods were flagged as having potential patterns, and the guidelines were selected as potentially being relevant:

Your task:
1. Evaluate the code to identify repeated logic, overlapping functionality, or opportunities to combine methods into a single wrapper.
2. If no patterns are found in certain methods, ignore them.
3. If patterns are found, create a wrapper method that improves developer experience according to the supplied design guidelines.
4. Return the generated wrapper code, along with comments stating which methods were wrapped along with a reason for the wrapping.

Notes:
- Do NOT invent new methods beyond what is attached.
- Include input validation and sensible defaults if applicable.
- Preserve existing functionality of the combined methods.

Methods:
```

    /**
     * Aborts an unlocked immutability policy.
     * 
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param accountName The accountName parameter.
     * @param containerName The containerName parameter.
     * @param apiVersion The apiVersion parameter.
     * @param ifMatch The ifMatch parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImmutabilityPolicy property of a blob container.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ImmutabilityPolicy deleteImmutabilityPolicy(String subscriptionId, String resourceGroupName,
        String accountName, String containerName, String apiVersion, String ifMatch) {
        return this.serviceClient.deleteImmutabilityPolicy(subscriptionId, resourceGroupName, accountName,
            containerName, apiVersion, ifMatch);
    }



```

Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Naming Patterns
Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.
✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:
A class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.
⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().
✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.
✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.
⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.
⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case.

Methods Returning Collections (Paging)
Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable<T> or PagedFlux<T> (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.
✅ DO return PagedIterable<T> from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:
public final class ConfigurationClient {
    // synchronous API returning a PagedIterable of ConfigurationSetting instances
    public PagedIterable<ConfigurationSetting> listSettings(...) {
        ...
    }
}
PagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern <serviceName>PagedIterable or <operation>PagedFlux.
⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).
✅ DO return PagedFlux<T> (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux<T>, as it allows for consumers to retrieve response information in a consistent manner.
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
Consumers of this API can consume individual items by treating the response as a Flux<T>:
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
The consumer may process items page-by-page instead:
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists:
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
The PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.
✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""
--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The attached methods were flagged as having potential patterns, and the guidelines were selected as potentially being relevant:

Your task:
1. Evaluate the code to identify repeated logic, overlapping functionality, or opportunities to combine methods into a single wrapper.
2. If no patterns are found in certain methods, ignore them.
3. If patterns are found, create a wrapper method that improves developer experience according to the supplied design guidelines.
4. Return the generated wrapper code, along with comments stating which methods were wrapped along with a reason for the wrapping.

Notes:
- Do NOT invent new methods beyond what is attached.
- Include input validation and sensible defaults if applicable.
- Preserve existing functionality of the combined methods.

Methods:
```

    /**
     * Gets properties of a specified container.
     * 
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param accountName The accountName parameter.
     * @param containerName The containerName parameter.
     * @param apiVersion The apiVersion parameter.
     * @param requestContext The context to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a specified container.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BlobContainer> getWithResponse(String subscriptionId, String resourceGroupName, String accountName,
        String containerName, String apiVersion, RequestContext requestContext) {
        return this.serviceClient.getWithResponse(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, requestContext);
    }



```

Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Naming Patterns
Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.
✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:
A class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.
⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().
✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.
✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.
⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.
⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case.

Methods Returning Collections (Paging)
Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable<T> or PagedFlux<T> (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.
✅ DO return PagedIterable<T> from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:
public final class ConfigurationClient {
    // synchronous API returning a PagedIterable of ConfigurationSetting instances
    public PagedIterable<ConfigurationSetting> listSettings(...) {
        ...
    }
}
PagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern <serviceName>PagedIterable or <operation>PagedFlux.
⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).
✅ DO return PagedFlux<T> (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux<T>, as it allows for consumers to retrieve response information in a consistent manner.
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
Consumers of this API can consume individual items by treating the response as a Flux<T>:
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
The consumer may process items page-by-page instead:
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists:
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
The PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.
✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""
--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The attached methods were flagged as having potential patterns, and the guidelines were selected as potentially being relevant:

Your task:
1. Evaluate the code to identify repeated logic, overlapping functionality, or opportunities to combine methods into a single wrapper.
2. If no patterns are found in certain methods, ignore them.
3. If patterns are found, create a wrapper method that improves developer experience according to the supplied design guidelines.
4. Return the generated wrapper code, along with comments stating which methods were wrapped along with a reason for the wrapping.

Notes:
- Do NOT invent new methods beyond what is attached.
- Include input validation and sensible defaults if applicable.
- Preserve existing functionality of the combined methods.

Methods:
```

    /**
     * Sets legal hold tags.
     * 
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param accountName The accountName parameter.
     * @param containerName The containerName parameter.
     * @param apiVersion The apiVersion parameter.
     * @param legalHold The legalHold parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the LegalHold property of a blob container.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LegalHold setLegalHold(String subscriptionId, String resourceGroupName, String accountName,
        String containerName, String apiVersion, LegalHold legalHold) {
        return this.serviceClient.setLegalHold(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, legalHold);
    }



```

Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Naming Patterns
Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.
✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:
A class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.
⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().
✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.
✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.
⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.
⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case.

Methods Returning Collections (Paging)
Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable<T> or PagedFlux<T> (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.
✅ DO return PagedIterable<T> from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:
public final class ConfigurationClient {
    // synchronous API returning a PagedIterable of ConfigurationSetting instances
    public PagedIterable<ConfigurationSetting> listSettings(...) {
        ...
    }
}
PagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern <serviceName>PagedIterable or <operation>PagedFlux.
⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).
✅ DO return PagedFlux<T> (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux<T>, as it allows for consumers to retrieve response information in a consistent manner.
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
Consumers of this API can consume individual items by treating the response as a Flux<T>:
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
The consumer may process items page-by-page instead:
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists:
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
The PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.
✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""
--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The attached methods were flagged as having potential patterns, and the guidelines were selected as potentially being relevant:

Your task:
1. Evaluate the code to identify repeated logic, overlapping functionality, or opportunities to combine methods into a single wrapper.
2. If no patterns are found in certain methods, ignore them.
3. If patterns are found, create a wrapper method that improves developer experience according to the supplied design guidelines.
4. Return the generated wrapper code, along with comments stating which methods were wrapped along with a reason for the wrapping.

Notes:
- Do NOT invent new methods beyond what is attached.
- Include input validation and sensible defaults if applicable.
- Preserve existing functionality of the combined methods.

Methods:
```

    /**
     * Sets legal hold tags.
     * 
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param accountName The accountName parameter.
     * @param containerName The containerName parameter.
     * @param apiVersion The apiVersion parameter.
     * @param legalHold The legalHold parameter.
     * @param requestContext The context to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the LegalHold property of a blob container.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<LegalHold> setLegalHoldWithResponse(String subscriptionId, String resourceGroupName,
        String accountName, String containerName, String apiVersion, LegalHold legalHold,
        RequestContext requestContext) {
        return this.serviceClient.setLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName,
            containerName, apiVersion, legalHold, requestContext);
    }



```

Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Naming Patterns
Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.
✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:
A class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.
⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().
✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.
✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.
⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.
⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case.

Methods Returning Collections (Paging)
Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable<T> or PagedFlux<T> (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.
✅ DO return PagedIterable<T> from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:
public final class ConfigurationClient {
    // synchronous API returning a PagedIterable of ConfigurationSetting instances
    public PagedIterable<ConfigurationSetting> listSettings(...) {
        ...
    }
}
PagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern <serviceName>PagedIterable or <operation>PagedFlux.
⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).
✅ DO return PagedFlux<T> (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux<T>, as it allows for consumers to retrieve response information in a consistent manner.
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
Consumers of this API can consume individual items by treating the response as a Flux<T>:
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
The consumer may process items page-by-page instead:
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists:
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
The PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.
✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""
--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The attached methods were flagged as having potential patterns, and the guidelines were selected as potentially being relevant:

Your task:
1. Evaluate the code to identify repeated logic, overlapping functionality, or opportunities to combine methods into a single wrapper.
2. If no patterns are found in certain methods, ignore them.
3. If patterns are found, create a wrapper method that improves developer experience according to the supplied design guidelines.
4. Return the generated wrapper code, along with comments stating which methods were wrapped along with a reason for the wrapping.

Notes:
- Do NOT invent new methods beyond what is attached.
- Include input validation and sensible defaults if applicable.
- Preserve existing functionality of the combined methods.

Methods:
```

    /**
     * Aborts an unlocked immutability policy.
     * 
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param accountName The accountName parameter.
     * @param containerName The containerName parameter.
     * @param apiVersion The apiVersion parameter.
     * @param ifMatch The ifMatch parameter.
     * @param requestContext The context to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImmutabilityPolicy property of a blob container.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ImmutabilityPolicy> deleteImmutabilityPolicyWithResponse(String subscriptionId,
        String resourceGroupName, String accountName, String containerName, String apiVersion, String ifMatch,
        RequestContext requestContext) {
        return this.serviceClient.deleteImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName, accountName,
            containerName, apiVersion, ifMatch, requestContext);
    }



```

Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Naming Patterns
Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.
✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:
A class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.
⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().
✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.
✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.
⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.
⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case.

Methods Returning Collections (Paging)
Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable<T> or PagedFlux<T> (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.
✅ DO return PagedIterable<T> from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:
public final class ConfigurationClient {
    // synchronous API returning a PagedIterable of ConfigurationSetting instances
    public PagedIterable<ConfigurationSetting> listSettings(...) {
        ...
    }
}
PagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern <serviceName>PagedIterable or <operation>PagedFlux.
⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).
✅ DO return PagedFlux<T> (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux<T>, as it allows for consumers to retrieve response information in a consistent manner.
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
Consumers of this API can consume individual items by treating the response as a Flux<T>:
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
The consumer may process items page-by-page instead:
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists:
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
The PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.
✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""
--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The attached methods were flagged as having potential patterns, and the guidelines were selected as potentially being relevant:

Your task:
1. Evaluate the code to identify repeated logic, overlapping functionality, or opportunities to combine methods into a single wrapper.
2. If no patterns are found in certain methods, ignore them.
3. If patterns are found, create a wrapper method that improves developer experience according to the supplied design guidelines.
4. Return the generated wrapper code, along with comments stating which methods were wrapped along with a reason for the wrapping.

Notes:
- Do NOT invent new methods beyond what is attached.
- Include input validation and sensible defaults if applicable.
- Preserve existing functionality of the combined methods.

Methods:
```

    /**
     * Updates container properties as specified in request body.
     * 
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param accountName The accountName parameter.
     * @param containerName The containerName parameter.
     * @param apiVersion The apiVersion parameter.
     * @param blobContainer The blobContainer parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the blob container.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BlobContainer update(String subscriptionId, String resourceGroupName, String accountName,
        String containerName, String apiVersion, BlobContainer blobContainer) {
        return this.serviceClient.update(subscriptionId, resourceGroupName, accountName, containerName, apiVersion,
            blobContainer);
    }



```

Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Naming Patterns
Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.
✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:
A class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.
⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().
✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.
✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.
⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.
⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case.

Methods Returning Collections (Paging)
Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable<T> or PagedFlux<T> (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.
✅ DO return PagedIterable<T> from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:
public final class ConfigurationClient {
    // synchronous API returning a PagedIterable of ConfigurationSetting instances
    public PagedIterable<ConfigurationSetting> listSettings(...) {
        ...
    }
}
PagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern <serviceName>PagedIterable or <operation>PagedFlux.
⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).
✅ DO return PagedFlux<T> (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux<T>, as it allows for consumers to retrieve response information in a consistent manner.
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
Consumers of this API can consume individual items by treating the response as a Flux<T>:
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
The consumer may process items page-by-page instead:
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists:
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
The PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.
✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""
--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The attached methods were flagged as having potential patterns, and the guidelines were selected as potentially being relevant:

Your task:
1. Evaluate the code to identify repeated logic, overlapping functionality, or opportunities to combine methods into a single wrapper.
2. If no patterns are found in certain methods, ignore them.
3. If patterns are found, create a wrapper method that improves developer experience according to the supplied design guidelines.
4. Return the generated wrapper code, along with comments stating which methods were wrapped along with a reason for the wrapping.

Notes:
- Do NOT invent new methods beyond what is attached.
- Include input validation and sensible defaults if applicable.
- Preserve existing functionality of the combined methods.

Methods:
```

    /**
     * Clears legal hold tags.
     * 
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param accountName The accountName parameter.
     * @param containerName The containerName parameter.
     * @param apiVersion The apiVersion parameter.
     * @param legalHold The legalHold parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the LegalHold property of a blob container.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LegalHold clearLegalHold(String subscriptionId, String resourceGroupName, String accountName,
        String containerName, String apiVersion, LegalHold legalHold) {
        return this.serviceClient.clearLegalHold(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, legalHold);
    }



```

Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Naming Patterns
Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.
✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:
A class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.
⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().
✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.
✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.
⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.
⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case.

Methods Returning Collections (Paging)
Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable<T> or PagedFlux<T> (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.
✅ DO return PagedIterable<T> from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:
public final class ConfigurationClient {
    // synchronous API returning a PagedIterable of ConfigurationSetting instances
    public PagedIterable<ConfigurationSetting> listSettings(...) {
        ...
    }
}
PagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern <serviceName>PagedIterable or <operation>PagedFlux.
⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).
✅ DO return PagedFlux<T> (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux<T>, as it allows for consumers to retrieve response information in a consistent manner.
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
Consumers of this API can consume individual items by treating the response as a Flux<T>:
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
The consumer may process items page-by-page instead:
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists:
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
The PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.
✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""
--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The attached methods were flagged as having potential patterns, and the guidelines were selected as potentially being relevant:

Your task:
1. Evaluate the code to identify repeated logic, overlapping functionality, or opportunities to combine methods into a single wrapper.
2. If no patterns are found in certain methods, ignore them.
3. If patterns are found, create a wrapper method that improves developer experience according to the supplied design guidelines.
4. Return the generated wrapper code, along with comments stating which methods were wrapped along with a reason for the wrapping.

Notes:
- Do NOT invent new methods beyond what is attached.
- Include input validation and sensible defaults if applicable.
- Preserve existing functionality of the combined methods.

Methods:
```

    /**
     * Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy.
     * 
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param accountName The accountName parameter.
     * @param containerName The containerName parameter.
     * @param apiVersion The apiVersion parameter.
     * @param ifMatch The ifMatch parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImmutabilityPolicy property of a blob container.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ImmutabilityPolicy extendImmutabilityPolicy(String subscriptionId, String resourceGroupName,
        String accountName, String containerName, String apiVersion, String ifMatch) {
        return this.serviceClient.extendImmutabilityPolicy(subscriptionId, resourceGroupName, accountName,
            containerName, apiVersion, ifMatch);
    }
}


```

Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Naming Patterns
Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.
✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:
A class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.
⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().
✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.
✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.
⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.
⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case.

Methods Returning Collections (Paging)
Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable<T> or PagedFlux<T> (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.
✅ DO return PagedIterable<T> from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:
public final class ConfigurationClient {
    // synchronous API returning a PagedIterable of ConfigurationSetting instances
    public PagedIterable<ConfigurationSetting> listSettings(...) {
        ...
    }
}
PagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern <serviceName>PagedIterable or <operation>PagedFlux.
⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).
✅ DO return PagedFlux<T> (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux<T>, as it allows for consumers to retrieve response information in a consistent manner.
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
Consumers of this API can consume individual items by treating the response as a Flux<T>:
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
The consumer may process items page-by-page instead:
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists:
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
The PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.
✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""
--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The attached methods were flagged as having potential patterns, and the guidelines were selected as potentially being relevant:

Your task:
1. Evaluate the code to identify repeated logic, overlapping functionality, or opportunities to combine methods into a single wrapper.
2. If no patterns are found in certain methods, ignore them.
3. If patterns are found, create a wrapper method that improves developer experience according to the supplied design guidelines.
4. Return the generated wrapper code, along with comments stating which methods were wrapped along with a reason for the wrapping.

Notes:
- Do NOT invent new methods beyond what is attached.
- Include input validation and sensible defaults if applicable.
- Preserve existing functionality of the combined methods.

Methods:
```

    /**
     * Deletes specified container under its account.
     * 
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param accountName The accountName parameter.
     * @param containerName The containerName parameter.
     * @param apiVersion The apiVersion parameter.
     * @param requestContext The context to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String subscriptionId, String resourceGroupName, String accountName,
        String containerName, String apiVersion, RequestContext requestContext) {
        return this.serviceClient.deleteWithResponse(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, requestContext);
    }



```

Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Naming Patterns
Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.
✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:
A class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.
⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().
✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.
✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.
⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.
⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case.

Methods Returning Collections (Paging)
Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable<T> or PagedFlux<T> (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.
✅ DO return PagedIterable<T> from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:
public final class ConfigurationClient {
    // synchronous API returning a PagedIterable of ConfigurationSetting instances
    public PagedIterable<ConfigurationSetting> listSettings(...) {
        ...
    }
}
PagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern <serviceName>PagedIterable or <operation>PagedFlux.
⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).
✅ DO return PagedFlux<T> (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux<T>, as it allows for consumers to retrieve response information in a consistent manner.
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
Consumers of this API can consume individual items by treating the response as a Flux<T>:
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
The consumer may process items page-by-page instead:
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists:
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
The PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.
✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""
--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The attached methods were flagged as having potential patterns, and the guidelines were selected as potentially being relevant:

Your task:
1. Evaluate the code to identify repeated logic, overlapping functionality, or opportunities to combine methods into a single wrapper.
2. If no patterns are found in certain methods, ignore them.
3. If patterns are found, create a wrapper method that improves developer experience according to the supplied design guidelines.
4. Return the generated wrapper code, along with comments stating which methods were wrapped along with a reason for the wrapping.

Notes:
- Do NOT invent new methods beyond what is attached.
- Include input validation and sensible defaults if applicable.
- Preserve existing functionality of the combined methods.

Methods:
```

    /**
     * Lists all containers and does not support a prefix like data plane.
     * 
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param accountName The accountName parameter.
     * @param apiVersion The apiVersion parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response schema.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListContainerItems list(String subscriptionId, String resourceGroupName, String accountName,
        String apiVersion) {
        return this.serviceClient.list(subscriptionId, resourceGroupName, accountName, apiVersion);
    }



```

Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Naming Patterns
Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.
✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:
A class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.
⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().
✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.
✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.
⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.
⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case.

Methods Returning Collections (Paging)
Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable<T> or PagedFlux<T> (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.
✅ DO return PagedIterable<T> from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:
public final class ConfigurationClient {
    // synchronous API returning a PagedIterable of ConfigurationSetting instances
    public PagedIterable<ConfigurationSetting> listSettings(...) {
        ...
    }
}
PagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern <serviceName>PagedIterable or <operation>PagedFlux.
⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).
✅ DO return PagedFlux<T> (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux<T>, as it allows for consumers to retrieve response information in a consistent manner.
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
Consumers of this API can consume individual items by treating the response as a Flux<T>:
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
The consumer may process items page-by-page instead:
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists:
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
The PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.
✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""
--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The attached methods were flagged as having potential patterns, and the guidelines were selected as potentially being relevant:

Your task:
1. Evaluate the code to identify repeated logic, overlapping functionality, or opportunities to combine methods into a single wrapper.
2. If no patterns are found in certain methods, ignore them.
3. If patterns are found, create a wrapper method that improves developer experience according to the supplied design guidelines.
4. Return the generated wrapper code, along with comments stating which methods were wrapped along with a reason for the wrapping.

Notes:
- Do NOT invent new methods beyond what is attached.
- Include input validation and sensible defaults if applicable.
- Preserve existing functionality of the combined methods.

Methods:
```

    /**
     * Deletes specified container under its account.
     * 
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param accountName The accountName parameter.
     * @param containerName The containerName parameter.
     * @param apiVersion The apiVersion parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String subscriptionId, String resourceGroupName, String accountName, String containerName,
        String apiVersion) {
        this.serviceClient.delete(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
    }



```

Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Naming Patterns
Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.
✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:
A class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.
⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().
✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.
✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.
⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.
⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case.

Methods Returning Collections (Paging)
Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable<T> or PagedFlux<T> (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.
✅ DO return PagedIterable<T> from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:
public final class ConfigurationClient {
    // synchronous API returning a PagedIterable of ConfigurationSetting instances
    public PagedIterable<ConfigurationSetting> listSettings(...) {
        ...
    }
}
PagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern <serviceName>PagedIterable or <operation>PagedFlux.
⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).
✅ DO return PagedFlux<T> (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux<T>, as it allows for consumers to retrieve response information in a consistent manner.
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
Consumers of this API can consume individual items by treating the response as a Flux<T>:
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
The consumer may process items page-by-page instead:
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists:
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
The PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.
✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""
--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The attached methods were flagged as having potential patterns, and the guidelines were selected as potentially being relevant:

Your task:
1. Evaluate the code to identify repeated logic, overlapping functionality, or opportunities to combine methods into a single wrapper.
2. If no patterns are found in certain methods, ignore them.
3. If patterns are found, create a wrapper method that improves developer experience according to the supplied design guidelines.
4. Return the generated wrapper code, along with comments stating which methods were wrapped along with a reason for the wrapping.

Notes:
- Do NOT invent new methods beyond what is attached.
- Include input validation and sensible defaults if applicable.
- Preserve existing functionality of the combined methods.

Methods:
```

    /**
     * Creates or updates an unlocked immutability policy.
     * 
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param accountName The accountName parameter.
     * @param containerName The containerName parameter.
     * @param apiVersion The apiVersion parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImmutabilityPolicy property of a blob container.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ImmutabilityPolicy createOrUpdateImmutabilityPolicy(String subscriptionId, String resourceGroupName,
        String accountName, String containerName, String apiVersion) {
        return this.serviceClient.createOrUpdateImmutabilityPolicy(subscriptionId, resourceGroupName, accountName,
            containerName, apiVersion);
    }



```

Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Naming Patterns
Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.
✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:
A class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.
⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().
✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.
✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.
⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.
⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case.

Methods Returning Collections (Paging)
Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable<T> or PagedFlux<T> (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.
✅ DO return PagedIterable<T> from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:
public final class ConfigurationClient {
    // synchronous API returning a PagedIterable of ConfigurationSetting instances
    public PagedIterable<ConfigurationSetting> listSettings(...) {
        ...
    }
}
PagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern <serviceName>PagedIterable or <operation>PagedFlux.
⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).
✅ DO return PagedFlux<T> (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux<T>, as it allows for consumers to retrieve response information in a consistent manner.
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
Consumers of this API can consume individual items by treating the response as a Flux<T>:
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
The consumer may process items page-by-page instead:
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists:
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
The PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.
✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""
--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The attached methods were flagged as having potential patterns, and the guidelines were selected as potentially being relevant:

Your task:
1. Evaluate the code to identify repeated logic, overlapping functionality, or opportunities to combine methods into a single wrapper.
2. If no patterns are found in certain methods, ignore them.
3. If patterns are found, create a wrapper method that improves developer experience according to the supplied design guidelines.
4. Return the generated wrapper code, along with comments stating which methods were wrapped along with a reason for the wrapping.

Notes:
- Do NOT invent new methods beyond what is attached.
- Include input validation and sensible defaults if applicable.
- Preserve existing functionality of the combined methods.

Methods:
```

    /**
     * Updates container properties as specified in request body.
     * 
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param accountName The accountName parameter.
     * @param containerName The containerName parameter.
     * @param apiVersion The apiVersion parameter.
     * @param blobContainer The blobContainer parameter.
     * @param requestContext The context to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the blob container.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BlobContainer> updateWithResponse(String subscriptionId, String resourceGroupName,
        String accountName, String containerName, String apiVersion, BlobContainer blobContainer,
        RequestContext requestContext) {
        return this.serviceClient.updateWithResponse(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, blobContainer, requestContext);
    }



```

Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Naming Patterns
Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.
✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:
A class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.
⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().
✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.
✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.
⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.
⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case.

Methods Returning Collections (Paging)
Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable<T> or PagedFlux<T> (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.
✅ DO return PagedIterable<T> from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:
public final class ConfigurationClient {
    // synchronous API returning a PagedIterable of ConfigurationSetting instances
    public PagedIterable<ConfigurationSetting> listSettings(...) {
        ...
    }
}
PagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern <serviceName>PagedIterable or <operation>PagedFlux.
⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).
✅ DO return PagedFlux<T> (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux<T>, as it allows for consumers to retrieve response information in a consistent manner.
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
Consumers of this API can consume individual items by treating the response as a Flux<T>:
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
The consumer may process items page-by-page instead:
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists:
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
The PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.
✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""
--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The attached methods were flagged as having potential patterns, and the guidelines were selected as potentially being relevant:

Your task:
1. Evaluate the code to identify repeated logic, overlapping functionality, or opportunities to combine methods into a single wrapper.
2. If no patterns are found in certain methods, ignore them.
3. If patterns are found, create a wrapper method that improves developer experience according to the supplied design guidelines.
4. Return the generated wrapper code, along with comments stating which methods were wrapped along with a reason for the wrapping.

Notes:
- Do NOT invent new methods beyond what is attached.
- Include input validation and sensible defaults if applicable.
- Preserve existing functionality of the combined methods.

Methods:
```

    /**
     * Clears legal hold tags.
     * 
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param accountName The accountName parameter.
     * @param containerName The containerName parameter.
     * @param apiVersion The apiVersion parameter.
     * @param legalHold The legalHold parameter.
     * @param requestContext The context to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the LegalHold property of a blob container.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<LegalHold> clearLegalHoldWithResponse(String subscriptionId, String resourceGroupName,
        String accountName, String containerName, String apiVersion, LegalHold legalHold,
        RequestContext requestContext) {
        return this.serviceClient.clearLegalHoldWithResponse(subscriptionId, resourceGroupName, accountName,
            containerName, apiVersion, legalHold, requestContext);
    }



```

Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Naming Patterns
Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.
✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:
A class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.
⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().
✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.
✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.
⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.
⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case.

Methods Returning Collections (Paging)
Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable<T> or PagedFlux<T> (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.
✅ DO return PagedIterable<T> from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:
public final class ConfigurationClient {
    // synchronous API returning a PagedIterable of ConfigurationSetting instances
    public PagedIterable<ConfigurationSetting> listSettings(...) {
        ...
    }
}
PagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern <serviceName>PagedIterable or <operation>PagedFlux.
⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).
✅ DO return PagedFlux<T> (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux<T>, as it allows for consumers to retrieve response information in a consistent manner.
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
Consumers of this API can consume individual items by treating the response as a Flux<T>:
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
The consumer may process items page-by-page instead:
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists:
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
The PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.
✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""
--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The attached methods were flagged as having potential patterns, and the guidelines were selected as potentially being relevant:

Your task:
1. Evaluate the code to identify repeated logic, overlapping functionality, or opportunities to combine methods into a single wrapper.
2. If no patterns are found in certain methods, ignore them.
3. If patterns are found, create a wrapper method that improves developer experience according to the supplied design guidelines.
4. Return the generated wrapper code, along with comments stating which methods were wrapped along with a reason for the wrapping.

Notes:
- Do NOT invent new methods beyond what is attached.
- Include input validation and sensible defaults if applicable.
- Preserve existing functionality of the combined methods.

Methods:
```

    /**
     * Gets properties of a specified container.
     * 
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param accountName The accountName parameter.
     * @param containerName The containerName parameter.
     * @param apiVersion The apiVersion parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a specified container.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BlobContainer get(String subscriptionId, String resourceGroupName, String accountName, String containerName,
        String apiVersion) {
        return this.serviceClient.get(subscriptionId, resourceGroupName, accountName, containerName, apiVersion);
    }



```

Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Naming Patterns
Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.
✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:
A class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.
⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().
✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.
✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.
⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.
⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case.

Methods Returning Collections (Paging)
Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable<T> or PagedFlux<T> (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.
✅ DO return PagedIterable<T> from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:
public final class ConfigurationClient {
    // synchronous API returning a PagedIterable of ConfigurationSetting instances
    public PagedIterable<ConfigurationSetting> listSettings(...) {
        ...
    }
}
PagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern <serviceName>PagedIterable or <operation>PagedFlux.
⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).
✅ DO return PagedFlux<T> (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux<T>, as it allows for consumers to retrieve response information in a consistent manner.
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
Consumers of this API can consume individual items by treating the response as a Flux<T>:
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
The consumer may process items page-by-page instead:
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists:
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
The PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.
✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""
--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The attached methods were flagged as having potential patterns, and the guidelines were selected as potentially being relevant:

Your task:
1. Evaluate the code to identify repeated logic, overlapping functionality, or opportunities to combine methods into a single wrapper.
2. If no patterns are found in certain methods, ignore them.
3. If patterns are found, create a wrapper method that improves developer experience according to the supplied design guidelines.
4. Return the generated wrapper code, along with comments stating which methods were wrapped along with a reason for the wrapping.

Notes:
- Do NOT invent new methods beyond what is attached.
- Include input validation and sensible defaults if applicable.
- Preserve existing functionality of the combined methods.

Methods:
```

    /**
     * Gets the existing immutability policy along with the corresponding ETag.
     * 
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param accountName The accountName parameter.
     * @param containerName The containerName parameter.
     * @param apiVersion The apiVersion parameter.
     * @param ifMatch The ifMatch parameter.
     * @param requestContext The context to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the existing immutability policy along with the corresponding ETag.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ImmutabilityPolicy> getImmutabilityPolicyWithResponse(String subscriptionId,
        String resourceGroupName, String accountName, String containerName, String apiVersion, String ifMatch,
        RequestContext requestContext) {
        return this.serviceClient.getImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName, accountName,
            containerName, apiVersion, ifMatch, requestContext);
    }



```

Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Naming Patterns
Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.
✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:
A class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.
⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().
✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.
✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.
⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.
⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case.

Methods Returning Collections (Paging)
Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable<T> or PagedFlux<T> (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.
✅ DO return PagedIterable<T> from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:
public final class ConfigurationClient {
    // synchronous API returning a PagedIterable of ConfigurationSetting instances
    public PagedIterable<ConfigurationSetting> listSettings(...) {
        ...
    }
}
PagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern <serviceName>PagedIterable or <operation>PagedFlux.
⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).
✅ DO return PagedFlux<T> (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux<T>, as it allows for consumers to retrieve response information in a consistent manner.
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
Consumers of this API can consume individual items by treating the response as a Flux<T>:
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
The consumer may process items page-by-page instead:
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists:
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
The PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.
✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""
--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The attached methods were flagged as having potential patterns, and the guidelines were selected as potentially being relevant:

Your task:
1. Evaluate the code to identify repeated logic, overlapping functionality, or opportunities to combine methods into a single wrapper.
2. If no patterns are found in certain methods, ignore them.
3. If patterns are found, create a wrapper method that improves developer experience according to the supplied design guidelines.
4. Return the generated wrapper code, along with comments stating which methods were wrapped along with a reason for the wrapping.

Notes:
- Do NOT invent new methods beyond what is attached.
- Include input validation and sensible defaults if applicable.
- Preserve existing functionality of the combined methods.

Methods:
```

    /**
     * Sets the ImmutabilityPolicy to Locked state.
     * 
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param accountName The accountName parameter.
     * @param containerName The containerName parameter.
     * @param apiVersion The apiVersion parameter.
     * @param ifMatch The ifMatch parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImmutabilityPolicy property of a blob container.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ImmutabilityPolicy lockImmutabilityPolicy(String subscriptionId, String resourceGroupName,
        String accountName, String containerName, String apiVersion, String ifMatch) {
        return this.serviceClient.lockImmutabilityPolicy(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion, ifMatch);
    }



```

Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Naming Patterns
Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.
✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:
A class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.
⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().
✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.
✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.
⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.
⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case.

Methods Returning Collections (Paging)
Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable<T> or PagedFlux<T> (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.
✅ DO return PagedIterable<T> from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:
public final class ConfigurationClient {
    // synchronous API returning a PagedIterable of ConfigurationSetting instances
    public PagedIterable<ConfigurationSetting> listSettings(...) {
        ...
    }
}
PagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern <serviceName>PagedIterable or <operation>PagedFlux.
⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).
✅ DO return PagedFlux<T> (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux<T>, as it allows for consumers to retrieve response information in a consistent manner.
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
Consumers of this API can consume individual items by treating the response as a Flux<T>:
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
The consumer may process items page-by-page instead:
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists:
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
The PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.
✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""
--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The attached methods were flagged as having potential patterns, and the guidelines were selected as potentially being relevant:

Your task:
1. Evaluate the code to identify repeated logic, overlapping functionality, or opportunities to combine methods into a single wrapper.
2. If no patterns are found in certain methods, ignore them.
3. If patterns are found, create a wrapper method that improves developer experience according to the supplied design guidelines.
4. Return the generated wrapper code, along with comments stating which methods were wrapped along with a reason for the wrapping.

Notes:
- Do NOT invent new methods beyond what is attached.
- Include input validation and sensible defaults if applicable.
- Preserve existing functionality of the combined methods.

Methods:
```

    /**
     * Creates a new container under the specified account.
     * 
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param accountName The accountName parameter.
     * @param containerName The containerName parameter.
     * @param apiVersion The apiVersion parameter.
     * @param blobContainer The blobContainer parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the blob container.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BlobContainer create(String subscriptionId, String resourceGroupName, String accountName,
        String containerName, String apiVersion, BlobContainer blobContainer) {
        return this.serviceClient.create(subscriptionId, resourceGroupName, accountName, containerName, apiVersion,
            blobContainer);
    }



```

Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Naming Patterns
Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.
✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:
A class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.
⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().
✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.
✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.
⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.
⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case.

Methods Returning Collections (Paging)
Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable<T> or PagedFlux<T> (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.
✅ DO return PagedIterable<T> from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:
public final class ConfigurationClient {
    // synchronous API returning a PagedIterable of ConfigurationSetting instances
    public PagedIterable<ConfigurationSetting> listSettings(...) {
        ...
    }
}
PagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern <serviceName>PagedIterable or <operation>PagedFlux.
⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).
✅ DO return PagedFlux<T> (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux<T>, as it allows for consumers to retrieve response information in a consistent manner.
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
Consumers of this API can consume individual items by treating the response as a Flux<T>:
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
The consumer may process items page-by-page instead:
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists:
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
The PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.
✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""
--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The attached methods were flagged as having potential patterns, and the guidelines were selected as potentially being relevant:

Your task:
1. Evaluate the code to identify repeated logic, overlapping functionality, or opportunities to combine methods into a single wrapper.
2. If no patterns are found in certain methods, ignore them.
3. If patterns are found, create a wrapper method that improves developer experience according to the supplied design guidelines.
4. Return the generated wrapper code, along with comments stating which methods were wrapped along with a reason for the wrapping.

Notes:
- Do NOT invent new methods beyond what is attached.
- Include input validation and sensible defaults if applicable.
- Preserve existing functionality of the combined methods.

Methods:
```

    /**
     * Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy.
     * 
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param accountName The accountName parameter.
     * @param containerName The containerName parameter.
     * @param apiVersion The apiVersion parameter.
     * @param ifMatch The ifMatch parameter.
     * @param parameters The parameters parameter.
     * @param requestContext The context to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImmutabilityPolicy property of a blob container.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ImmutabilityPolicy> extendImmutabilityPolicyWithResponse(String subscriptionId,
        String resourceGroupName, String accountName, String containerName, String apiVersion, String ifMatch,
        ImmutabilityPolicy parameters, RequestContext requestContext) {
        return this.serviceClient.extendImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName, accountName,
            containerName, apiVersion, ifMatch, parameters, requestContext);
    }



```

Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Naming Patterns
Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.
✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:
A class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.
⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().
✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.
✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.
⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.
⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case.

Methods Returning Collections (Paging)
Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable<T> or PagedFlux<T> (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.
✅ DO return PagedIterable<T> from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:
public final class ConfigurationClient {
    // synchronous API returning a PagedIterable of ConfigurationSetting instances
    public PagedIterable<ConfigurationSetting> listSettings(...) {
        ...
    }
}
PagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern <serviceName>PagedIterable or <operation>PagedFlux.
⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).
✅ DO return PagedFlux<T> (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux<T>, as it allows for consumers to retrieve response information in a consistent manner.
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
Consumers of this API can consume individual items by treating the response as a Flux<T>:
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
The consumer may process items page-by-page instead:
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists:
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
The PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.
✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""
--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The attached methods were flagged as having potential patterns, and the guidelines were selected as potentially being relevant:

Your task:
1. Evaluate the code to identify repeated logic, overlapping functionality, or opportunities to combine methods into a single wrapper.
2. If no patterns are found in certain methods, ignore them.
3. If patterns are found, create a wrapper method that improves developer experience according to the supplied design guidelines.
4. Return the generated wrapper code, along with comments stating which methods were wrapped along with a reason for the wrapping.

Notes:
- Do NOT invent new methods beyond what is attached.
- Include input validation and sensible defaults if applicable.
- Preserve existing functionality of the combined methods.

Methods:
```

    /**
     * Gets the existing immutability policy along with the corresponding ETag.
     * 
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param accountName The accountName parameter.
     * @param containerName The containerName parameter.
     * @param apiVersion The apiVersion parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the existing immutability policy along with the corresponding ETag.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ImmutabilityPolicy getImmutabilityPolicy(String subscriptionId, String resourceGroupName, String accountName,
        String containerName, String apiVersion) {
        return this.serviceClient.getImmutabilityPolicy(subscriptionId, resourceGroupName, accountName, containerName,
            apiVersion);
    }



```

Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Naming Patterns
Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.
✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:
A class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.
⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().
✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.
✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.
⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.
⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case.

Methods Returning Collections (Paging)
Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable<T> or PagedFlux<T> (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.
✅ DO return PagedIterable<T> from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:
public final class ConfigurationClient {
    // synchronous API returning a PagedIterable of ConfigurationSetting instances
    public PagedIterable<ConfigurationSetting> listSettings(...) {
        ...
    }
}
PagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern <serviceName>PagedIterable or <operation>PagedFlux.
⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).
✅ DO return PagedFlux<T> (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux<T>, as it allows for consumers to retrieve response information in a consistent manner.
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
Consumers of this API can consume individual items by treating the response as a Flux<T>:
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
The consumer may process items page-by-page instead:
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists:
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
The PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.
✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""
--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The attached methods were flagged as having potential patterns, and the guidelines were selected as potentially being relevant:

Your task:
1. Evaluate the code to identify repeated logic, overlapping functionality, or opportunities to combine methods into a single wrapper.
2. If no patterns are found in certain methods, ignore them.
3. If patterns are found, create a wrapper method that improves developer experience according to the supplied design guidelines.
4. Return the generated wrapper code, along with comments stating which methods were wrapped along with a reason for the wrapping.

Notes:
- Do NOT invent new methods beyond what is attached.
- Include input validation and sensible defaults if applicable.
- Preserve existing functionality of the combined methods.

Methods:
```

    /**
     * Sets the ImmutabilityPolicy to Locked state.
     * 
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param accountName The accountName parameter.
     * @param containerName The containerName parameter.
     * @param apiVersion The apiVersion parameter.
     * @param ifMatch The ifMatch parameter.
     * @param requestContext The context to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImmutabilityPolicy property of a blob container.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ImmutabilityPolicy> lockImmutabilityPolicyWithResponse(String subscriptionId,
        String resourceGroupName, String accountName, String containerName, String apiVersion, String ifMatch,
        RequestContext requestContext) {
        return this.serviceClient.lockImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName, accountName,
            containerName, apiVersion, ifMatch, requestContext);
    }



```

Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Naming Patterns
Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.
✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:
A class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.
⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().
✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.
✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.
⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.
⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case.

Methods Returning Collections (Paging)
Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable<T> or PagedFlux<T> (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.
✅ DO return PagedIterable<T> from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:
public final class ConfigurationClient {
    // synchronous API returning a PagedIterable of ConfigurationSetting instances
    public PagedIterable<ConfigurationSetting> listSettings(...) {
        ...
    }
}
PagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern <serviceName>PagedIterable or <operation>PagedFlux.
⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).
✅ DO return PagedFlux<T> (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux<T>, as it allows for consumers to retrieve response information in a consistent manner.
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
Consumers of this API can consume individual items by treating the response as a Flux<T>:
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
The consumer may process items page-by-page instead:
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists:
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
The PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.
✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""
--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The attached methods were flagged as having potential patterns, and the guidelines were selected as potentially being relevant:

Your task:
1. Evaluate the code to identify repeated logic, overlapping functionality, or opportunities to combine methods into a single wrapper.
2. If no patterns are found in certain methods, ignore them.
3. If patterns are found, create a wrapper method that improves developer experience according to the supplied design guidelines.
4. Return the generated wrapper code, along with comments stating which methods were wrapped along with a reason for the wrapping.

Notes:
- Do NOT invent new methods beyond what is attached.
- Include input validation and sensible defaults if applicable.
- Preserve existing functionality of the combined methods.

Methods:
```

    /**
     * Lists all containers and does not support a prefix like data plane.
     * 
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param accountName The accountName parameter.
     * @param apiVersion The apiVersion parameter.
     * @param maxpagesize The maxpagesize parameter.
     * @param filter The filter parameter.
     * @param include The include parameter.
     * @param requestContext The context to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response schema.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ListContainerItems> listWithResponse(String subscriptionId, String resourceGroupName,
        String accountName, String apiVersion, String maxpagesize, String filter, ListContainersInclude include,
        RequestContext requestContext) {
        return this.serviceClient.listWithResponse(subscriptionId, resourceGroupName, accountName, apiVersion,
            maxpagesize, filter, include, requestContext);
    }



```

Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Naming Patterns
Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.
✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:
A class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.
⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().
✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.
✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.
⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.
⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case.

Methods Returning Collections (Paging)
Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable<T> or PagedFlux<T> (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.
✅ DO return PagedIterable<T> from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:
public final class ConfigurationClient {
    // synchronous API returning a PagedIterable of ConfigurationSetting instances
    public PagedIterable<ConfigurationSetting> listSettings(...) {
        ...
    }
}
PagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern <serviceName>PagedIterable or <operation>PagedFlux.
⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).
✅ DO return PagedFlux<T> (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux<T>, as it allows for consumers to retrieve response information in a consistent manner.
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
Consumers of this API can consume individual items by treating the response as a Flux<T>:
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
The consumer may process items page-by-page instead:
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists:
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
The PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.
✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""
--------------------------------------------------------------------------------


================================================================================
Prompt 2: Convenience Wrapper Generation
================================================================================

Context: The attached methods were flagged as having potential patterns, and the guidelines were selected as potentially being relevant:

Your task:
1. Evaluate the code to identify repeated logic, overlapping functionality, or opportunities to combine methods into a single wrapper.
2. If no patterns are found in certain methods, ignore them.
3. If patterns are found, create a wrapper method that improves developer experience according to the supplied design guidelines.
4. Return the generated wrapper code, along with comments stating which methods were wrapped along with a reason for the wrapping.

Notes:
- Do NOT invent new methods beyond what is attached.
- Include input validation and sensible defaults if applicable.
- Preserve existing functionality of the combined methods.

Methods:
```

    /**
     * Creates or updates an unlocked immutability policy.
     * 
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param accountName The accountName parameter.
     * @param containerName The containerName parameter.
     * @param apiVersion The apiVersion parameter.
     * @param ifMatch The ifMatch parameter.
     * @param parameters The parameters parameter.
     * @param requestContext The context to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImmutabilityPolicy property of a blob container.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ImmutabilityPolicy> createOrUpdateImmutabilityPolicyWithResponse(String subscriptionId,
        String resourceGroupName, String accountName, String containerName, String apiVersion, String ifMatch,
        ImmutabilityPolicy parameters, RequestContext requestContext) {
        return this.serviceClient.createOrUpdateImmutabilityPolicyWithResponse(subscriptionId, resourceGroupName,
            accountName, containerName, apiVersion, ifMatch, parameters, requestContext);
    }



```

Design Guidelines:
"""
Option Parameters
Service methods fall into two main groups when it comes to the number and complexity of parameters they accept:
Service Methods with simple inputs, simple methods for short Service Methods with complex inputs, complex methods for short
Simple methods are methods that take up to six parameters, with most of the parameters being simple primitive types. Complex methods are methods that take a larger number of parameters and typically correspond to REST APIs with complex request payloads.
Simple methods should follow standard Java best practices for parameter list and overload design.
Complex methods should introduce an option parameter to represent the request payload. Consideration can subsequently be made for providing simpler convenience overloads for the most common scenarios. This is referred to in this document as the ‘options pattern’, and is demonstrated in the code below:
public class BlobContainerClient {

    // simple service methods
    public BlobInfo uploadBlob(String blobName, byte[] content);
    public Response<BlobInfo> uploadBlobWithResponse(String blobName, byte[] content, Context context);

    // complex service methods, note the introduction of the 'CreateBlobOptions' type
    public BlobInfo createBlob(CreateBlobOptions options);
    public Response<BlobInfo> createBlobWithResponse(CreateBlobOptions options, Context context);

    // convenience overload[s]
    public BlobInfo createBlob(String blobName);
}

@Fluent
public class CreateBlobOptions {
    private String blobName;
    private PublicAccessType access;
    private Map<String, String> metadata;

    // Constructor enforces the requirement that blobName is always set
    public CreateBlobOptions(String blobName) {
        this.blobName = blobName;
    }

    public String getBlobName() {
        return blobName;
    }

    public CreateBlobOptions setAccess(PublicAccessType access) {
        this.access = access;
        return this;
    }

    public PublicAccessType getAccess() {
        return access;
    }

    public CreateBlobOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }
}
✅ DO name the options type after the name of the service method it is used for, such that the type is named <operation>Options. For example, above the method was createBlob, and so the options type was named CreateBlobOptions.
✅ DO use the options parameter pattern for complex service methods.
✔️ YOU MAY use the options parameter pattern for simple service methods that you expect to grow in the future.
✔️ YOU MAY add simple overloads of methods using the options parameter pattern.
If in common scenarios, users are likely to pass just a small subset of what the options parameter represents, consider adding an overload with a parameter list representing just this subset.
⛔️ DO NOT introduce method overloads that take a subset of the parameters as well as the options parameter, except for parameters that are for client-side use only (e.g. Context, timeout, etc).
✅ DO use the options parameter type, if it exists, for all *WithResponse methods. If no options parameter type exists, do not create one solely for the *WithResponse method.
✅ DO place all options types in a root-level models package, to prevent too many root-level packages and to make use of the existing models package used by other model types.
✅ DO design options types with the same design guidance as given below for model class types, namely fluent setters for optional arguments, using the standard JavaBean naming convention of get*, set*, and is*. Additionally, there may be constructor overloads for each combination of required arguments.
✔️ YOU MAY introduce constructor overloads for each combination of required arguments (in a similar manner to required properties on model types).

Service Methods
Service methods are methods that invoke operations on a service. They are commonly found on classes suffixed with Client, but can also be found on other resource classes that are vended by a client.
⛔️ DO NOT use the suffix Async in methods that do operations asynchronously. Let the fact the user has an instance of an ‘async client’ provide this context.
✅ DO prefer the use of the following terms for CRUD operations:
Verb Parameters Returns Comments upsert<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used in database-like services. set<noun> key, item Updated or created item Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service. create<noun> key, item Created item Create new item. Fails if item already exists. update<noun> key, partial item Updated item Fails if item doesn’t exist. replace<noun> key, item Replace existing item Completely replaces an existing item. Fails if the item doesn’t exist. delete<noun> key Deleted item, or null Delete an existing item. Will succeed even if item didn’t exist. Deleted item may be returned, if service supports it. add<noun> index, item Added item Add item to a collection. Item will be added last, or into the index position specified. get<noun> key Item Will return null if item doesn’t exist. list<noun> Items Return list of items. Returns empty list if no items exist. <noun>Exists key boolean Return true if the item exists.
☑️ YOU SHOULD remain flexible and use names best suited for developer experience. Don’t let the naming rules result in non-idiomatic naming patterns. For example, Java developers prefer list operations over getAll operations.
One of the Azure Core types is com.azure.core.util.Context, which acts as an append-only key-value map, and which by default is empty. The Context allows end users of the API to modify the outgoing requests to Azure on a per-method call basis, for example to enable distributed tracing.
✅ DO provide an overload method that takes a com.azure.core.util.Context argument for each service operation in sync clients only. The Context argument must be the last argument into the service method (except where varargs are used). If a service method has multiple overloads, only the ‘maximal’ overloads need to have the Context argument. A maximal overload is one that has a full set of arguments. It may not be necessary to offer a ‘Context overload’ in all cases. We prefer a minimal API surface, but Context must always be supported.
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required
// (replacing the two maximal overloads above)
getFoo(x, y, z, Context)
getFoo(a, Context)
⛔️ DO NOT include overloads that take Context in async clients. Async clients use the subscriber context built into Reactor Flux and Mono APIs.

Naming Patterns
Using a consistent set of naming patterns across all client libraries will ensure a consistent and more intuitive developer experience. This section outlines good practices for naming that must be followed by all client libraries.
✅ DO prefer succinctness over verbosity in method and class names, except when readability is impacted. A few examples include:
A class may want to return an identifier to a user. There is no additional value in the fully-qualified getIdentifier() compared with the shorter and equally-descriptive getId(). A method called getName() is short, but may leave some doubt in the users mind about which name is being represented. Instead, naming this method getLinkName() will remove all doubt from the users mind, and without substantial additional verbosity. Similarly, in the case of getId() above, always choose to specify the identifier name if there is any likelihood of confusion about which identifier is being referenced. For example, use getTenantId() rather than getId(), unless it is completely unambiguous as to which identifier is being referenced.
⛔️ DO NOT fully uppercase acronyms. APIs must take the form of getHttpConnection() or getUrlName() rather than getHTTPConnection() or getURLName().
✅ DO use service-specific acronyms sparingly in API. Whereas most users will accept a method including Http or Url in the name, most users will not know what Sas or Cpk mean. Where possible (without breaking the succinctness over verbosity requirement above), expansion of acronyms, or at the very least sufficient documentation at class and method levels to describe the acronym, must be considered.
✅ DO use the correct naming for ‘host’ vs ‘hostname’. ‘hostname’ is the host name without any port number, whereas ‘host’ is the hostname with the port number.
⛔️ DO NOT use camel case on words that are commonly accepted in their combined form. For example, ‘hostname’ should be spelt as hostname rather than hostName, and ‘username’ should be spelt as username rather than userName.
⛔️ DO NOT name interface types with an ‘I’ prefix, e.g. ISearchClient. Instead, do not have any prefix for an interface, preferring SearchClient as the name for the interface type in this case.

Methods Returning Collections (Paging)
Many Azure REST APIs return collections of data in batches or pages. A client library will expose such APIs as special enumerable types PagedIterable<T> or PagedFlux<T> (or one of their parent types), for synchronous and asynchronous APIs, respectively. These types are located in the azure-core library.
✅ DO return PagedIterable<T> from service methods in synchronous that return a collection of items. For example, the configuration service sync client should offer the following API:
public final class ConfigurationClient {
    // synchronous API returning a PagedIterable of ConfigurationSetting instances
    public PagedIterable<ConfigurationSetting> listSettings(...) {
        ...
    }
}
PagedIterable allows developers to write code that works using the standard for loop syntax (as it is an Iterable), and also to work with a Java Stream (as there is a stream() method). Consumers may also call streamByPage() and iterableByPage() methods to work on page boundaries. Subclasses of these types are acceptable as return types too, so long as the naming convention generally follows the pattern <serviceName>PagedIterable or <operation>PagedFlux.
⛔️ DO NOT return other collection types for sync APIs that return collections (for example, do not return List, Stream, Iterable, or Iterator).
✅ DO return PagedFlux<T> (or an appropriately-named subclass) for asynchronous APIs that expose a collection of items. Even if the service does not support pagination, always return PagedFlux<T>, as it allows for consumers to retrieve response information in a consistent manner.
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
Consumers of this API can consume individual items by treating the response as a Flux<T>:
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
The consumer may process items page-by-page instead:
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists:
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
The PagedFlux.byPage() offers an overload to accept a continuationToken string, which will begin the returned Flux at the page specified by this token.
✔️ YOU MAY subclass the azure-core paged and iterable APIs, where appropriate, to offer additional, service specific API to users. If this is done, the subtype must be named as it currently is, prefixed with the name of the service. For example, SearchPagedFlux and SearchPagedIterable. Subtypes are expected to be placed within a util package existing within the root package.

Return Types
Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.
The logical entity is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an ETag header as a property on the logical entity. Response<T> is the ‘complete response’. It contains HTTP headers, status code, and the T object (a deserialized object created from the response body). The T object would be the ‘logical entity’.
✅ DO return the logical entity (i.e. the T) for all synchronous service methods.
✅ DO return the logical entity (i.e. the T) wrapped inside a Mono for all asynchronous service methods that make network requests.
Return Response<T> on the maximal overload for a service method with WithResponse appended to the name. For example:
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload, so it is replaced with the 'withResponse' 'overload' below
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
For methods that combine multiple requests into a single call:
⛔️ DO NOT return headers and other per-request metadata unless it’s obvious which specific HTTP request the methods return value corresponds to.
✅ DO provide enough information in failure cases for a developer to take appropriate corrective action, including a message describing what went wrong and details on the corrective actions to take.


"""
--------------------------------------------------------------------------------

Step 2 Output: Generated Convenience Wrapper

--------------------------------------------------------------------------------
// Wrapper for createWithResponse to provide a simpler overload with sensible defaults and input validation.
// Wrapped method: createWithResponse
// Reason: The original method has a long parameter list with mostly simple types. According to the "Option Parameters" guideline, provide a convenience overload for common scenarios, reducing parameter complexity and improving developer experience.

public BlobContainer createContainer(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    BlobContainer blobContainer
) {
    if (subscriptionId == null || subscriptionId.isEmpty()) {
        throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
    }
    if (resourceGroupName == null || resourceGroupName.isEmpty()) {
        throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
    }
    if (accountName == null || accountName.isEmpty()) {
        throw new IllegalArgumentException("accountName cannot be null or empty.");
    }
    if (containerName == null || containerName.isEmpty()) {
        throw new IllegalArgumentException("containerName cannot be null or empty.");
    }
    if (blobContainer == null) {
        throw new IllegalArgumentException("blobContainer cannot be null.");
    }
    // Provide sensible default for apiVersion and requestContext
    String defaultApiVersion = "2021-09-01";
    RequestContext defaultRequestContext = new RequestContext();
    return createWithResponse(
        subscriptionId,
        resourceGroupName,
        accountName,
        containerName,
        defaultApiVersion,
        blobContainer,
        defaultRequestContext
    ).getValue();
}// Wrapper for deleteImmutabilityPolicy using options pattern for future extensibility.
// Wrapped method: deleteImmutabilityPolicy
// Reason: Applies the options parameter pattern for improved extensibility and developer experience per guidelines.

public static class DeleteImmutabilityPolicyOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private final String apiVersion;
    private String ifMatch;

    public DeleteImmutabilityPolicyOptions(
        String subscriptionId,
        String resourceGroupName,
        String accountName,
        String containerName,
        String apiVersion
    ) {
        if (subscriptionId == null || subscriptionId.isEmpty()) {
            throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
        }
        if (resourceGroupName == null || resourceGroupName.isEmpty()) {
            throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
        }
        if (accountName == null || accountName.isEmpty()) {
            throw new IllegalArgumentException("accountName cannot be null or empty.");
        }
        if (containerName == null || containerName.isEmpty()) {
            throw new IllegalArgumentException("containerName cannot be null or empty.");
        }
        if (apiVersion == null || apiVersion.isEmpty()) {
            throw new IllegalArgumentException("apiVersion cannot be null or empty.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
        this.apiVersion = apiVersion;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getContainerName() {
        return containerName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public String getIfMatch() {
        return ifMatch;
    }

    public DeleteImmutabilityPolicyOptions setIfMatch(String ifMatch) {
        this.ifMatch = ifMatch;
        return this;
    }
}

/**
 * Convenience wrapper for aborting an unlocked immutability policy using options pattern.
 * 
 * @param options The options to configure the delete operation.
 * @return the ImmutabilityPolicy property of a blob container.
 */
public ImmutabilityPolicy deleteImmutabilityPolicy(DeleteImmutabilityPolicyOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    return this.deleteImmutabilityPolicy(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch()
    );
}// Wrapper for getWithResponse method to provide a simpler overload without requiring apiVersion and requestContext.
// This improves developer experience by reducing required parameters for common scenarios, following the "Option Parameters" guideline.
// Wrapped method: getWithResponse(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, RequestContext requestContext)
// Reason: Provide a convenience overload for common use cases where apiVersion and requestContext can be defaulted.

public BlobContainer getContainer(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName
) {
    if (subscriptionId == null || subscriptionId.isEmpty()) {
        throw new IllegalArgumentException("subscriptionId cannot be null or empty");
    }
    if (resourceGroupName == null || resourceGroupName.isEmpty()) {
        throw new IllegalArgumentException("resourceGroupName cannot be null or empty");
    }
    if (accountName == null || accountName.isEmpty()) {
        throw new IllegalArgumentException("accountName cannot be null or empty");
    }
    if (containerName == null || containerName.isEmpty()) {
        throw new IllegalArgumentException("containerName cannot be null or empty");
    }
    // Use sensible defaults for apiVersion and requestContext
    String defaultApiVersion = "2021-04-01"; // Replace with the actual default if different
    RequestContext defaultRequestContext = new RequestContext();

    return getWithResponse(
        subscriptionId,
        resourceGroupName,
        accountName,
        containerName,
        defaultApiVersion,
        defaultRequestContext
    ).getValue();
}// Wrapper for setLegalHold with options parameter pattern
// Wrapped method: setLegalHold
// Reason: Applies the options parameter pattern for future extensibility and improved developer experience.

public static class SetLegalHoldOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private final String apiVersion;
    private final LegalHold legalHold;

    public SetLegalHoldOptions(String subscriptionId, String resourceGroupName, String accountName,
                               String containerName, String apiVersion, LegalHold legalHold) {
        if (subscriptionId == null || subscriptionId.isEmpty()) {
            throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
        }
        if (resourceGroupName == null || resourceGroupName.isEmpty()) {
            throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
        }
        if (accountName == null || accountName.isEmpty()) {
            throw new IllegalArgumentException("accountName cannot be null or empty.");
        }
        if (containerName == null || containerName.isEmpty()) {
            throw new IllegalArgumentException("containerName cannot be null or empty.");
        }
        if (apiVersion == null || apiVersion.isEmpty()) {
            throw new IllegalArgumentException("apiVersion cannot be null or empty.");
        }
        if (legalHold == null) {
            throw new IllegalArgumentException("legalHold cannot be null.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
        this.apiVersion = apiVersion;
        this.legalHold = legalHold;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getContainerName() {
        return containerName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public LegalHold getLegalHold() {
        return legalHold;
    }
}

public LegalHold setLegalHold(SetLegalHoldOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    return setLegalHold(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getLegalHold()
    );
}// Wrapper for setLegalHoldWithResponse
// Reason: Introduces an options parameter pattern for improved extensibility and developer experience per guideline.
// Methods wrapped: setLegalHoldWithResponse

/**
 * Options for setting legal hold tags on a blob container.
 */
public static class SetLegalHoldOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private String apiVersion;
    private LegalHold legalHold;

    /**
     * Constructor for required parameters.
     */
    public SetLegalHoldOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName) {
        if (subscriptionId == null || resourceGroupName == null || accountName == null || containerName == null) {
            throw new IllegalArgumentException("Required parameters must not be null.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getContainerName() {
        return containerName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public SetLegalHoldOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    public LegalHold getLegalHold() {
        return legalHold;
    }

    public SetLegalHoldOptions setLegalHold(LegalHold legalHold) {
        this.legalHold = legalHold;
        return this;
    }
}

/**
 * Sets legal hold tags using an options parameter.
 * 
 * @param options The options for setting legal hold.
 * @param requestContext The context to configure the HTTP request before HTTP client sends it.
 * @return the LegalHold property of a blob container.
 */
public Response<LegalHold> setLegalHoldWithResponse(SetLegalHoldOptions options, RequestContext requestContext) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    return this.setLegalHoldWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getLegalHold(),
        requestContext
    );
}// Wrapper for deleteImmutabilityPolicyWithResponse
// Wrapped method: deleteImmutabilityPolicyWithResponse
// Reason: Applies the 'options parameter' pattern for future extensibility and improved developer experience per guidelines.

public static class DeleteImmutabilityPolicyOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private final String apiVersion;
    private String ifMatch;

    public DeleteImmutabilityPolicyOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion) {
        if (subscriptionId == null || resourceGroupName == null || accountName == null || containerName == null || apiVersion == null) {
            throw new IllegalArgumentException("Required parameters must not be null.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
        this.apiVersion = apiVersion;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getContainerName() {
        return containerName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public String getIfMatch() {
        return ifMatch;
    }

    public DeleteImmutabilityPolicyOptions setIfMatch(String ifMatch) {
        this.ifMatch = ifMatch;
        return this;
    }
}

public Response<ImmutabilityPolicy> deleteImmutabilityPolicyWithResponse(DeleteImmutabilityPolicyOptions options, RequestContext requestContext) {
    if (options == null) {
        throw new IllegalArgumentException("DeleteImmutabilityPolicyOptions cannot be null.");
    }
    return this.deleteImmutabilityPolicyWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch(),
        requestContext
    );
}// Wrapper for update method to apply the options parameter pattern for future extensibility.
// Wrapped method: update
// Reason: The update method has a relatively long parameter list and a complex input (BlobContainer). 
// Introducing an UpdateBlobContainerOptions options class improves developer experience and aligns with the "Option Parameters" guideline.

public BlobContainer update(UpdateBlobContainerOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    if (options.getSubscriptionId() == null || options.getSubscriptionId().isEmpty()) {
        throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
    }
    if (options.getResourceGroupName() == null || options.getResourceGroupName().isEmpty()) {
        throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
    }
    if (options.getAccountName() == null || options.getAccountName().isEmpty()) {
        throw new IllegalArgumentException("accountName cannot be null or empty.");
    }
    if (options.getContainerName() == null || options.getContainerName().isEmpty()) {
        throw new IllegalArgumentException("containerName cannot be null or empty.");
    }
    if (options.getApiVersion() == null || options.getApiVersion().isEmpty()) {
        throw new IllegalArgumentException("apiVersion cannot be null or empty.");
    }
    if (options.getBlobContainer() == null) {
        throw new IllegalArgumentException("blobContainer cannot be null.");
    }
    return this.update(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getBlobContainer()
    );
}

// Example options class for update operation
public static class UpdateBlobContainerOptions {
    private String subscriptionId;
    private String resourceGroupName;
    private String accountName;
    private String containerName;
    private String apiVersion;
    private BlobContainer blobContainer;

    public UpdateBlobContainerOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, BlobContainer blobContainer) {
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
        this.apiVersion = apiVersion;
        this.blobContainer = blobContainer;
    }

    public String getSubscriptionId() { return subscriptionId; }
    public UpdateBlobContainerOptions setSubscriptionId(String subscriptionId) { this.subscriptionId = subscriptionId; return this; }

    public String getResourceGroupName() { return resourceGroupName; }
    public UpdateBlobContainerOptions setResourceGroupName(String resourceGroupName) { this.resourceGroupName = resourceGroupName; return this; }

    public String getAccountName() { return accountName; }
    public UpdateBlobContainerOptions setAccountName(String accountName) { this.accountName = accountName; return this; }

    public String getContainerName() { return containerName; }
    public UpdateBlobContainerOptions setContainerName(String containerName) { this.containerName = containerName; return this; }

    public String getApiVersion() { return apiVersion; }
    public UpdateBlobContainerOptions setApiVersion(String apiVersion) { this.apiVersion = apiVersion; return this; }

    public BlobContainer getBlobContainer() { return blobContainer; }
    public UpdateBlobContainerOptions setBlobContainer(BlobContainer blobContainer) { this.blobContainer = blobContainer; return this; }
}// Wrapper for clearLegalHold method to use options pattern for improved developer experience.
// Wrapped method: clearLegalHold
// Reason: The method has multiple parameters, including a complex parameter (LegalHold), and can benefit from an options parameter pattern for easier extensibility and usability.

public static class ClearLegalHoldOptions {
    private String subscriptionId;
    private String resourceGroupName;
    private String accountName;
    private String containerName;
    private String apiVersion;
    private LegalHold legalHold;

    public ClearLegalHoldOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, LegalHold legalHold) {
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
        this.apiVersion = apiVersion;
        this.legalHold = legalHold;
    }

    public String getSubscriptionId() { return subscriptionId; }
    public ClearLegalHoldOptions setSubscriptionId(String subscriptionId) { this.subscriptionId = subscriptionId; return this; }

    public String getResourceGroupName() { return resourceGroupName; }
    public ClearLegalHoldOptions setResourceGroupName(String resourceGroupName) { this.resourceGroupName = resourceGroupName; return this; }

    public String getAccountName() { return accountName; }
    public ClearLegalHoldOptions setAccountName(String accountName) { this.accountName = accountName; return this; }

    public String getContainerName() { return containerName; }
    public ClearLegalHoldOptions setContainerName(String containerName) { this.containerName = containerName; return this; }

    public String getApiVersion() { return apiVersion; }
    public ClearLegalHoldOptions setApiVersion(String apiVersion) { this.apiVersion = apiVersion; return this; }

    public LegalHold getLegalHold() { return legalHold; }
    public ClearLegalHoldOptions setLegalHold(LegalHold legalHold) { this.legalHold = legalHold; return this; }
}

/**
 * Convenience overload using options pattern for clearing legal hold tags.
 * @param options The ClearLegalHoldOptions parameter.
 * @throws IllegalArgumentException thrown if parameters fail the validation.
 * @throws HttpResponseException thrown if the service returns an error.
 * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
 * @return the LegalHold property of a blob container.
 */
public LegalHold clearLegalHold(ClearLegalHoldOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    if (options.getSubscriptionId() == null || options.getResourceGroupName() == null ||
        options.getAccountName() == null || options.getContainerName() == null ||
        options.getApiVersion() == null || options.getLegalHold() == null) {
        throw new IllegalArgumentException("All parameters in ClearLegalHoldOptions must be set.");
    }
    return clearLegalHold(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getLegalHold()
    );
}// Wrapper for extendImmutabilityPolicy method
// Wrapped method: extendImmutabilityPolicy
// Reason: Applies the options parameter pattern for future extensibility and improved developer experience per guidelines.

public static class ExtendImmutabilityPolicyOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private String apiVersion;
    private String ifMatch;

    public ExtendImmutabilityPolicyOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName) {
        if (subscriptionId == null || subscriptionId.isEmpty()) {
            throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
        }
        if (resourceGroupName == null || resourceGroupName.isEmpty()) {
            throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
        }
        if (accountName == null || accountName.isEmpty()) {
            throw new IllegalArgumentException("accountName cannot be null or empty.");
        }
        if (containerName == null || containerName.isEmpty()) {
            throw new IllegalArgumentException("containerName cannot be null or empty.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getContainerName() {
        return containerName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public ExtendImmutabilityPolicyOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    public String getIfMatch() {
        return ifMatch;
    }

    public ExtendImmutabilityPolicyOptions setIfMatch(String ifMatch) {
        this.ifMatch = ifMatch;
        return this;
    }
}

/**
 * Convenience wrapper using options parameter pattern for extendImmutabilityPolicy.
 * @param options The options for extending the immutability policy.
 * @return the ImmutabilityPolicy property of a blob container.
 */
public ImmutabilityPolicy extendImmutabilityPolicy(ExtendImmutabilityPolicyOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    return this.extendImmutabilityPolicy(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch()
    );
}// Wrapper for deleteWithResponse method to provide a simpler overload using the options parameter pattern.
// Wrapped method: deleteWithResponse
// Reason: Simplifies method invocation by introducing DeleteContainerOptions for future extensibility and better developer experience.

public static class DeleteContainerOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private String apiVersion;

    public DeleteContainerOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName) {
        if (subscriptionId == null || subscriptionId.isEmpty()) {
            throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
        }
        if (resourceGroupName == null || resourceGroupName.isEmpty()) {
            throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
        }
        if (accountName == null || accountName.isEmpty()) {
            throw new IllegalArgumentException("accountName cannot be null or empty.");
        }
        if (containerName == null || containerName.isEmpty()) {
            throw new IllegalArgumentException("containerName cannot be null or empty.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getContainerName() {
        return containerName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public DeleteContainerOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }
}

// Convenience wrapper method
public Response<Void> deleteContainerWithResponse(DeleteContainerOptions options, RequestContext requestContext) {
    if (options == null) {
        throw new IllegalArgumentException("DeleteContainerOptions cannot be null.");
    }
    String apiVersion = options.getApiVersion() != null ? options.getApiVersion() : "2021-01-01"; // sensible default
    return deleteWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        apiVersion,
        requestContext
    );
}// Wrapper for method: list
// Reason: The method returns ListContainerItems directly, which is a collection type. According to the "Methods Returning Collections (Paging)" guideline, synchronous APIs should return PagedIterable<T> for collections to improve developer experience. This wrapper provides a PagedIterable<ListContainerItem> over the items in ListContainerItems, enabling idiomatic iteration and paging support.

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.SimplePagedResponse;
import com.azure.core.util.Context;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

public PagedIterable<ListContainerItem> listContainersPaged(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) {
    // Input validation
    Objects.requireNonNull(subscriptionId, "'subscriptionId' cannot be null.");
    Objects.requireNonNull(resourceGroupName, "'resourceGroupName' cannot be null.");
    Objects.requireNonNull(accountName, "'accountName' cannot be null.");
    Objects.requireNonNull(apiVersion, "'apiVersion' cannot be null.");

    ListContainerItems items = this.list(subscriptionId, resourceGroupName, accountName, apiVersion);
    List<ListContainerItem> containerList = (items != null && items.value() != null) ? items.value() : Collections.emptyList();

    PagedResponse<ListContainerItem> pagedResponse = new SimplePagedResponse<>(
        null, // request
        200,  // status code
        null, // headers
        containerList,
        null, // continuation token
        null  // deserialized headers
    );
    return new PagedIterable<>(() -> pagedResponse);
}// Wrapper for delete method to use an options parameter pattern for future extensibility.
// Methods wrapped: delete
// Reason: Applies the options parameter pattern as per guidelines, allowing for future growth and improved developer experience.

public static class DeleteContainerOptions {
    private String subscriptionId;
    private String resourceGroupName;
    private String accountName;
    private String containerName;
    private String apiVersion;

    public DeleteContainerOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion) {
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
        this.apiVersion = apiVersion;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public DeleteContainerOptions setSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public DeleteContainerOptions setResourceGroupName(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public String getAccountName() {
        return accountName;
    }

    public DeleteContainerOptions setAccountName(String accountName) {
        this.accountName = accountName;
        return this;
    }

    public String getContainerName() {
        return containerName;
    }

    public DeleteContainerOptions setContainerName(String containerName) {
        this.containerName = containerName;
        return this;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public DeleteContainerOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }
}

/**
 * Deletes specified container under its account using DeleteContainerOptions.
 * 
 * @param options The DeleteContainerOptions parameter.
 * @throws IllegalArgumentException thrown if parameters fail the validation.
 * @throws HttpResponseException thrown if the service returns an error.
 * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
 */
public void delete(DeleteContainerOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("DeleteContainerOptions cannot be null.");
    }
    if (options.getSubscriptionId() == null || options.getResourceGroupName() == null ||
        options.getAccountName() == null || options.getContainerName() == null || options.getApiVersion() == null) {
        throw new IllegalArgumentException("All parameters in DeleteContainerOptions must be provided.");
    }
    this.delete(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion()
    );
}// Wrapper for createOrUpdateImmutabilityPolicy method
// Wrapped method: createOrUpdateImmutabilityPolicy
// Reason: Applies the options parameter pattern for future extensibility and improved developer experience per guidelines.

public static class CreateOrUpdateImmutabilityPolicyOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private String apiVersion;

    public CreateOrUpdateImmutabilityPolicyOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName) {
        if (subscriptionId == null || subscriptionId.isEmpty()) {
            throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
        }
        if (resourceGroupName == null || resourceGroupName.isEmpty()) {
            throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
        }
        if (accountName == null || accountName.isEmpty()) {
            throw new IllegalArgumentException("accountName cannot be null or empty.");
        }
        if (containerName == null || containerName.isEmpty()) {
            throw new IllegalArgumentException("containerName cannot be null or empty.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getContainerName() {
        return containerName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public CreateOrUpdateImmutabilityPolicyOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }
}

/**
 * Convenience wrapper for creating or updating an unlocked immutability policy using an options parameter.
 *
 * @param options The options for creating or updating the immutability policy.
 * @return the ImmutabilityPolicy property of a blob container.
 */
public ImmutabilityPolicy createOrUpdateImmutabilityPolicy(CreateOrUpdateImmutabilityPolicyOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    String apiVersion = options.getApiVersion() != null ? options.getApiVersion() : "2021-01-01";
    return this.createOrUpdateImmutabilityPolicy(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        apiVersion
    );
}// Wrapper for updateWithResponse to provide a simpler overload with sensible defaults and input validation.
// Wrapped method: updateWithResponse
// Reason: The original method has a long parameter list with several required primitives and a complex object.
//         According to the "Option Parameters" guideline, a convenience overload with fewer parameters is recommended
//         for developer experience, especially when common scenarios use a subset of parameters.

public Response<BlobContainer> updateContainerWithResponse(
    String subscriptionId,
    String resourceGroupName,
    String accountName,
    String containerName,
    BlobContainer blobContainer) {

    // Input validation
    if (subscriptionId == null || subscriptionId.isEmpty()) {
        throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
    }
    if (resourceGroupName == null || resourceGroupName.isEmpty()) {
        throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
    }
    if (accountName == null || accountName.isEmpty()) {
        throw new IllegalArgumentException("accountName cannot be null or empty.");
    }
    if (containerName == null || containerName.isEmpty()) {
        throw new IllegalArgumentException("containerName cannot be null or empty.");
    }
    if (blobContainer == null) {
        throw new IllegalArgumentException("blobContainer cannot be null.");
    }

    // Provide sensible defaults
    String apiVersion = "2021-04-01"; // Example default, replace with appropriate default if needed
    RequestContext requestContext = new RequestContext();

    return updateWithResponse(
        subscriptionId,
        resourceGroupName,
        accountName,
        containerName,
        apiVersion,
        blobContainer,
        requestContext
    );
}// Wrapper for clearLegalHoldWithResponse
// Reason: The method has a complex parameter list (more than 6 parameters, including a model type), which can be simplified using the options parameter pattern for improved developer experience. This follows the "Option Parameters" guideline.

public Response<LegalHold> clearLegalHoldWithResponse(ClearLegalHoldOptions options, RequestContext requestContext) {
    if (options == null) {
        throw new IllegalArgumentException("ClearLegalHoldOptions cannot be null.");
    }
    if (options.getSubscriptionId() == null || options.getSubscriptionId().isEmpty()) {
        throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
    }
    if (options.getResourceGroupName() == null || options.getResourceGroupName().isEmpty()) {
        throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
    }
    if (options.getAccountName() == null || options.getAccountName().isEmpty()) {
        throw new IllegalArgumentException("accountName cannot be null or empty.");
    }
    if (options.getContainerName() == null || options.getContainerName().isEmpty()) {
        throw new IllegalArgumentException("containerName cannot be null or empty.");
    }
    if (options.getApiVersion() == null || options.getApiVersion().isEmpty()) {
        throw new IllegalArgumentException("apiVersion cannot be null or empty.");
    }
    if (options.getLegalHold() == null) {
        throw new IllegalArgumentException("legalHold cannot be null.");
    }
    return this.clearLegalHoldWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getLegalHold(),
        requestContext
    );
}

// Example ClearLegalHoldOptions model (should be placed in the models package)
public class ClearLegalHoldOptions {
    private String subscriptionId;
    private String resourceGroupName;
    private String accountName;
    private String containerName;
    private String apiVersion;
    private LegalHold legalHold;

    public ClearLegalHoldOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, LegalHold legalHold) {
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
        this.apiVersion = apiVersion;
        this.legalHold = legalHold;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public ClearLegalHoldOptions setSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public ClearLegalHoldOptions setResourceGroupName(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public String getAccountName() {
        return accountName;
    }

    public ClearLegalHoldOptions setAccountName(String accountName) {
        this.accountName = accountName;
        return this;
    }

    public String getContainerName() {
        return containerName;
    }

    public ClearLegalHoldOptions setContainerName(String containerName) {
        this.containerName = containerName;
        return this;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public ClearLegalHoldOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    public LegalHold getLegalHold() {
        return legalHold;
    }

    public ClearLegalHoldOptions setLegalHold(LegalHold legalHold) {
        this.legalHold = legalHold;
        return this;
    }
}// Wrapper for get method with options parameter pattern
// Wrapped methods: get
// Reason: Introduces an options parameter for future extensibility and developer convenience, following the 'Option Parameters' guideline.

public static class GetBlobContainerOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private String apiVersion;

    public GetBlobContainerOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName) {
        if (subscriptionId == null || subscriptionId.isEmpty()) {
            throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
        }
        if (resourceGroupName == null || resourceGroupName.isEmpty()) {
            throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
        }
        if (accountName == null || accountName.isEmpty()) {
            throw new IllegalArgumentException("accountName cannot be null or empty.");
        }
        if (containerName == null || containerName.isEmpty()) {
            throw new IllegalArgumentException("containerName cannot be null or empty.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getContainerName() {
        return containerName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public GetBlobContainerOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }
}

public BlobContainer get(GetBlobContainerOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    // Provide sensible default for apiVersion if not set
    String apiVersion = options.getApiVersion() != null ? options.getApiVersion() : "2021-08-06";
    return this.get(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        apiVersion
    );
}// Wrapper for getImmutabilityPolicyWithResponse
// Reason: The method has a long parameter list with several required primitive parameters. According to the "Option Parameters" guideline, an options parameter pattern can improve developer experience and future extensibility.

public static final class GetImmutabilityPolicyOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private String apiVersion;
    private String ifMatch;

    public GetImmutabilityPolicyOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName) {
        if (subscriptionId == null || subscriptionId.isEmpty()) {
            throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
        }
        if (resourceGroupName == null || resourceGroupName.isEmpty()) {
            throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
        }
        if (accountName == null || accountName.isEmpty()) {
            throw new IllegalArgumentException("accountName cannot be null or empty.");
        }
        if (containerName == null || containerName.isEmpty()) {
            throw new IllegalArgumentException("containerName cannot be null or empty.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getContainerName() {
        return containerName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public GetImmutabilityPolicyOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    public String getIfMatch() {
        return ifMatch;
    }

    public GetImmutabilityPolicyOptions setIfMatch(String ifMatch) {
        this.ifMatch = ifMatch;
        return this;
    }
}

/**
 * Convenience wrapper for getImmutabilityPolicyWithResponse using options pattern.
 * 
 * @param options The options object containing required and optional parameters.
 * @param requestContext The context to configure the HTTP request before HTTP client sends it.
 * @return the existing immutability policy along with the corresponding ETag.
 */
public Response<ImmutabilityPolicy> getImmutabilityPolicyWithResponse(GetImmutabilityPolicyOptions options, RequestContext requestContext) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    return this.getImmutabilityPolicyWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch(),
        requestContext
    );
}

// Wrapped method: getImmutabilityPolicyWithResponse
// Reason: Applies the options parameter pattern to improve usability and future extensibility, as per the "Option Parameters" guideline.// Wrapper for lockImmutabilityPolicy with options parameter pattern
// Wrapped method: lockImmutabilityPolicy
// Reason: Applies the options parameter pattern for future extensibility and improved developer experience as per guidelines.

public static class LockImmutabilityPolicyOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private String apiVersion;
    private String ifMatch;

    public LockImmutabilityPolicyOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName) {
        if (subscriptionId == null || subscriptionId.isEmpty()) throw new IllegalArgumentException("subscriptionId cannot be null or empty");
        if (resourceGroupName == null || resourceGroupName.isEmpty()) throw new IllegalArgumentException("resourceGroupName cannot be null or empty");
        if (accountName == null || accountName.isEmpty()) throw new IllegalArgumentException("accountName cannot be null or empty");
        if (containerName == null || containerName.isEmpty()) throw new IllegalArgumentException("containerName cannot be null or empty");
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getContainerName() {
        return containerName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public LockImmutabilityPolicyOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    public String getIfMatch() {
        return ifMatch;
    }

    public LockImmutabilityPolicyOptions setIfMatch(String ifMatch) {
        this.ifMatch = ifMatch;
        return this;
    }
}

/**
 * Convenience wrapper for locking the ImmutabilityPolicy using an options parameter.
 * Applies input validation and sensible defaults.
 *
 * @param options The options for locking the ImmutabilityPolicy.
 * @return the ImmutabilityPolicy property of a blob container.
 */
public ImmutabilityPolicy lockImmutabilityPolicy(LockImmutabilityPolicyOptions options) {
    if (options == null) throw new IllegalArgumentException("options cannot be null");
    String apiVersion = options.getApiVersion() != null ? options.getApiVersion() : "2021-01-01";
    return this.lockImmutabilityPolicy(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        apiVersion,
        options.getIfMatch()
    );
}// Wrapper for create method to introduce an options parameter pattern for future extensibility.
// Wrapped method: create
// Reason: To follow the options parameter pattern for better extensibility and developer experience as per Azure SDK guidelines.

public BlobContainer createContainer(CreateContainerOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("CreateContainerOptions cannot be null.");
    }
    if (options.getSubscriptionId() == null || options.getSubscriptionId().isEmpty()) {
        throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
    }
    if (options.getResourceGroupName() == null || options.getResourceGroupName().isEmpty()) {
        throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
    }
    if (options.getAccountName() == null || options.getAccountName().isEmpty()) {
        throw new IllegalArgumentException("accountName cannot be null or empty.");
    }
    if (options.getContainerName() == null || options.getContainerName().isEmpty()) {
        throw new IllegalArgumentException("containerName cannot be null or empty.");
    }
    if (options.getApiVersion() == null || options.getApiVersion().isEmpty()) {
        throw new IllegalArgumentException("apiVersion cannot be null or empty.");
    }
    if (options.getBlobContainer() == null) {
        throw new IllegalArgumentException("blobContainer cannot be null.");
    }
    return this.create(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getBlobContainer()
    );
}

// Example options type for the wrapper
public static class CreateContainerOptions {
    private String subscriptionId;
    private String resourceGroupName;
    private String accountName;
    private String containerName;
    private String apiVersion;
    private BlobContainer blobContainer;

    public CreateContainerOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName, String apiVersion, BlobContainer blobContainer) {
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
        this.apiVersion = apiVersion;
        this.blobContainer = blobContainer;
    }

    public String getSubscriptionId() { return subscriptionId; }
    public CreateContainerOptions setSubscriptionId(String subscriptionId) { this.subscriptionId = subscriptionId; return this; }

    public String getResourceGroupName() { return resourceGroupName; }
    public CreateContainerOptions setResourceGroupName(String resourceGroupName) { this.resourceGroupName = resourceGroupName; return this; }

    public String getAccountName() { return accountName; }
    public CreateContainerOptions setAccountName(String accountName) { this.accountName = accountName; return this; }

    public String getContainerName() { return containerName; }
    public CreateContainerOptions setContainerName(String containerName) { this.containerName = containerName; return this; }

    public String getApiVersion() { return apiVersion; }
    public CreateContainerOptions setApiVersion(String apiVersion) { this.apiVersion = apiVersion; return this; }

    public BlobContainer getBlobContainer() { return blobContainer; }
    public CreateContainerOptions setBlobContainer(BlobContainer blobContainer) { this.blobContainer = blobContainer; return this; }
}// Wrapper for extendImmutabilityPolicyWithResponse
// Reason: The method has a long parameter list (7 parameters), most of which are simple types, but it could benefit from the options parameter pattern for improved developer experience and future extensibility.
// Wrapped method: extendImmutabilityPolicyWithResponse

/**
 * Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy.
 * This is a convenience overload that uses an options parameter to simplify usage and improve extensibility.
 *
 * @param options The options to configure the extend operation.
 * @return the ImmutabilityPolicy property of a blob container.
 * @throws IllegalArgumentException thrown if required options are missing.
 * @throws HttpResponseException thrown if the service returns an error.
 * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
 */
public Response<ImmutabilityPolicy> extendImmutabilityPolicyWithResponse(ExtendImmutabilityPolicyOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    if (options.getSubscriptionId() == null || options.getResourceGroupName() == null ||
        options.getAccountName() == null || options.getContainerName() == null ||
        options.getApiVersion() == null || options.getIfMatch() == null ||
        options.getParameters() == null) {
        throw new IllegalArgumentException("All required options properties must be set.");
    }
    RequestContext context = options.getRequestContext() != null ? options.getRequestContext() : new RequestContext();
    return this.extendImmutabilityPolicyWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch(),
        options.getParameters(),
        context
    );
}

/**
 * Options type for extendImmutabilityPolicyWithResponse.
 */
public static class ExtendImmutabilityPolicyOptions {
    private String subscriptionId;
    private String resourceGroupName;
    private String accountName;
    private String containerName;
    private String apiVersion;
    private String ifMatch;
    private ImmutabilityPolicy parameters;
    private RequestContext requestContext;

    public ExtendImmutabilityPolicyOptions(String subscriptionId, String resourceGroupName, String accountName,
                                           String containerName, String apiVersion, String ifMatch, ImmutabilityPolicy parameters) {
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
        this.apiVersion = apiVersion;
        this.ifMatch = ifMatch;
        this.parameters = parameters;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public ExtendImmutabilityPolicyOptions setSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public ExtendImmutabilityPolicyOptions setResourceGroupName(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public String getAccountName() {
        return accountName;
    }

    public ExtendImmutabilityPolicyOptions setAccountName(String accountName) {
        this.accountName = accountName;
        return this;
    }

    public String getContainerName() {
        return containerName;
    }

    public ExtendImmutabilityPolicyOptions setContainerName(String containerName) {
        this.containerName = containerName;
        return this;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public ExtendImmutabilityPolicyOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    public String getIfMatch() {
        return ifMatch;
    }

    public ExtendImmutabilityPolicyOptions setIfMatch(String ifMatch) {
        this.ifMatch = ifMatch;
        return this;
    }

    public ImmutabilityPolicy getParameters() {
        return parameters;
    }

    public ExtendImmutabilityPolicyOptions setParameters(ImmutabilityPolicy parameters) {
        this.parameters = parameters;
        return this;
    }

    public RequestContext getRequestContext() {
        return requestContext;
    }

    public ExtendImmutabilityPolicyOptions setRequestContext(RequestContext requestContext) {
        this.requestContext = requestContext;
        return this;
    }
}// Wrapper for getImmutabilityPolicy
// Wrapped method: getImmutabilityPolicy
// Reason: Applies the options parameter pattern for future extensibility and improved developer experience per Azure SDK guidelines.

public static class GetImmutabilityPolicyOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private String apiVersion;

    public GetImmutabilityPolicyOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName) {
        if (subscriptionId == null || subscriptionId.isEmpty()) {
            throw new IllegalArgumentException("subscriptionId cannot be null or empty.");
        }
        if (resourceGroupName == null || resourceGroupName.isEmpty()) {
            throw new IllegalArgumentException("resourceGroupName cannot be null or empty.");
        }
        if (accountName == null || accountName.isEmpty()) {
            throw new IllegalArgumentException("accountName cannot be null or empty.");
        }
        if (containerName == null || containerName.isEmpty()) {
            throw new IllegalArgumentException("containerName cannot be null or empty.");
        }
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.containerName = containerName;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getContainerName() {
        return containerName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public GetImmutabilityPolicyOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }
}

/**
 * Convenience overload using options parameter pattern for getting the immutability policy.
 * 
 * @param options The GetImmutabilityPolicyOptions containing required and optional parameters.
 * @return the existing immutability policy along with the corresponding ETag.
 */
public ImmutabilityPolicy getImmutabilityPolicy(GetImmutabilityPolicyOptions options) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    String apiVersion = options.getApiVersion() != null ? options.getApiVersion() : "2021-01-01";
    return this.getImmutabilityPolicy(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        apiVersion
    );
}// Wrapper for lockImmutabilityPolicyWithResponse
// Reason: The method has a long parameter list with several required parameters. According to the "Option Parameters" guideline, an options parameter should be introduced for complex service methods, and a simpler overload provided for common scenarios. This wrapper introduces LockImmutabilityPolicyOptions for improved developer experience.

import com.azure.core.http.rest.Response;
import com.azure.core.util.RequestContext;
import java.util.Objects;

// Options class for lockImmutabilityPolicy
public class LockImmutabilityPolicyOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private String apiVersion;
    private String ifMatch;

    public LockImmutabilityPolicyOptions(String subscriptionId, String resourceGroupName, String accountName, String containerName) {
        this.subscriptionId = Objects.requireNonNull(subscriptionId, "'subscriptionId' cannot be null.");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "'resourceGroupName' cannot be null.");
        this.accountName = Objects.requireNonNull(accountName, "'accountName' cannot be null.");
        this.containerName = Objects.requireNonNull(containerName, "'containerName' cannot be null.");
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getContainerName() {
        return containerName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public LockImmutabilityPolicyOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    public String getIfMatch() {
        return ifMatch;
    }

    public LockImmutabilityPolicyOptions setIfMatch(String ifMatch) {
        this.ifMatch = ifMatch;
        return this;
    }
}

// Wrapper method
public Response<ImmutabilityPolicy> lockImmutabilityPolicyWithResponse(LockImmutabilityPolicyOptions options, RequestContext requestContext) {
    Objects.requireNonNull(options, "'options' cannot be null.");
    // Optionally set sensible default for apiVersion if not provided
    String apiVersion = options.getApiVersion() != null ? options.getApiVersion() : "2021-08-01"; // Example default
    return this.lockImmutabilityPolicyWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        apiVersion,
        options.getIfMatch(),
        requestContext
    );
}

// Convenience overload for common scenario (without RequestContext)
public ImmutabilityPolicy lockImmutabilityPolicy(LockImmutabilityPolicyOptions options) {
    Response<ImmutabilityPolicy> response = lockImmutabilityPolicyWithResponse(options, null);
    return response.getValue();
}

// Wrapped method: lockImmutabilityPolicyWithResponse
// Reason: Applies the options parameter pattern for improved usability and future extensibility.// Wrapper for listWithResponse method to improve developer experience by introducing an options parameter pattern.
// Wrapped method: listWithResponse
// Reason: The method has a complex parameter list (more than six parameters, some optional), so introducing a ListContainersOptions type improves usability and aligns with the "Option Parameters" guideline.

public static class ListContainersOptions {
    private String subscriptionId;
    private String resourceGroupName;
    private String accountName;
    private String apiVersion;
    private String maxpagesize;
    private String filter;
    private ListContainersInclude include;

    public ListContainersOptions(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) {
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.apiVersion = apiVersion;
    }

    public String getSubscriptionId() {
        return subscriptionId;
    }

    public String getResourceGroupName() {
        return resourceGroupName;
    }

    public String getAccountName() {
        return accountName;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public String getMaxpagesize() {
        return maxpagesize;
    }

    public ListContainersOptions setMaxpagesize(String maxpagesize) {
        this.maxpagesize = maxpagesize;
        return this;
    }

    public String getFilter() {
        return filter;
    }

    public ListContainersOptions setFilter(String filter) {
        this.filter = filter;
        return this;
    }

    public ListContainersInclude getInclude() {
        return include;
    }

    public ListContainersOptions setInclude(ListContainersInclude include) {
        this.include = include;
        return this;
    }
}

/**
 * Convenience wrapper for listing containers using an options parameter.
 * Provides input validation and sensible defaults.
 *
 * @param options The options for listing containers.
 * @param requestContext The context to configure the HTTP request before HTTP client sends it.
 * @return response schema.
 */
public Response<ListContainerItems> listWithResponse(ListContainersOptions options, RequestContext requestContext) {
    if (options == null) {
        throw new IllegalArgumentException("options cannot be null.");
    }
    if (options.getSubscriptionId() == null || options.getResourceGroupName() == null
        || options.getAccountName() == null || options.getApiVersion() == null) {
        throw new IllegalArgumentException("subscriptionId, resourceGroupName, accountName, and apiVersion are required.");
    }
    return this.listWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getApiVersion(),
        options.getMaxpagesize(),
        options.getFilter(),
        options.getInclude(),
        requestContext
    );
}// Wrapper for createOrUpdateImmutabilityPolicyWithResponse
// Reason: The method has a complex parameter list (more than six parameters, including several primitives and a model), which is a candidate for the options parameter pattern as per the "Option Parameters" guideline. This wrapper introduces a CreateOrUpdateImmutabilityPolicyOptions model to simplify usage and improve developer experience.

import com.azure.core.http.rest.Response;
import com.azure.core.util.RequestContext;
import java.util.Objects;

// Models package: models.CreateOrUpdateImmutabilityPolicyOptions
public class CreateOrUpdateImmutabilityPolicyOptions {
    private final String subscriptionId;
    private final String resourceGroupName;
    private final String accountName;
    private final String containerName;
    private String apiVersion = "2021-08-01"; // sensible default
    private String ifMatch;
    private ImmutabilityPolicy parameters;
    private RequestContext requestContext = RequestContext.NONE;

    public CreateOrUpdateImmutabilityPolicyOptions(
        String subscriptionId,
        String resourceGroupName,
        String accountName,
        String containerName
    ) {
        this.subscriptionId = Objects.requireNonNull(subscriptionId, "'subscriptionId' cannot be null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "'resourceGroupName' cannot be null");
        this.accountName = Objects.requireNonNull(accountName, "'accountName' cannot be null");
        this.containerName = Objects.requireNonNull(containerName, "'containerName' cannot be null");
    }

    public String getSubscriptionId() { return subscriptionId; }
    public String getResourceGroupName() { return resourceGroupName; }
    public String getAccountName() { return accountName; }
    public String getContainerName() { return containerName; }
    public String getApiVersion() { return apiVersion; }
    public String getIfMatch() { return ifMatch; }
    public ImmutabilityPolicy getParameters() { return parameters; }
    public RequestContext getRequestContext() { return requestContext; }

    public CreateOrUpdateImmutabilityPolicyOptions setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    public CreateOrUpdateImmutabilityPolicyOptions setIfMatch(String ifMatch) {
        this.ifMatch = ifMatch;
        return this;
    }

    public CreateOrUpdateImmutabilityPolicyOptions setParameters(ImmutabilityPolicy parameters) {
        this.parameters = parameters;
        return this;
    }

    public CreateOrUpdateImmutabilityPolicyOptions setRequestContext(RequestContext requestContext) {
        this.requestContext = requestContext == null ? RequestContext.NONE : requestContext;
        return this;
    }
}

// Wrapper method in the client class
public Response<ImmutabilityPolicy> createOrUpdateImmutabilityPolicyWithResponse(CreateOrUpdateImmutabilityPolicyOptions options) {
    Objects.requireNonNull(options, "'options' cannot be null");
    Objects.requireNonNull(options.getParameters(), "'parameters' cannot be null");
    return this.createOrUpdateImmutabilityPolicyWithResponse(
        options.getSubscriptionId(),
        options.getResourceGroupName(),
        options.getAccountName(),
        options.getContainerName(),
        options.getApiVersion(),
        options.getIfMatch(),
        options.getParameters(),
        options.getRequestContext()
    );
}
================================================================================
